/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 21068.0, "series": [{"data": [[0.0, 7.0], [0.1, 9.0], [0.2, 9.0], [0.3, 9.0], [0.4, 9.0], [0.5, 9.0], [0.6, 9.0], [0.7, 10.0], [0.8, 10.0], [0.9, 10.0], [1.0, 10.0], [1.1, 10.0], [1.2, 10.0], [1.3, 10.0], [1.4, 10.0], [1.5, 10.0], [1.6, 10.0], [1.7, 10.0], [1.8, 10.0], [1.9, 10.0], [2.0, 10.0], [2.1, 10.0], [2.2, 10.0], [2.3, 10.0], [2.4, 10.0], [2.5, 10.0], [2.6, 10.0], [2.7, 10.0], [2.8, 10.0], [2.9, 10.0], [3.0, 10.0], [3.1, 10.0], [3.2, 10.0], [3.3, 10.0], [3.4, 10.0], [3.5, 10.0], [3.6, 10.0], [3.7, 11.0], [3.8, 11.0], [3.9, 11.0], [4.0, 11.0], [4.1, 11.0], [4.2, 11.0], [4.3, 11.0], [4.4, 11.0], [4.5, 11.0], [4.6, 11.0], [4.7, 11.0], [4.8, 11.0], [4.9, 11.0], [5.0, 11.0], [5.1, 11.0], [5.2, 11.0], [5.3, 11.0], [5.4, 11.0], [5.5, 11.0], [5.6, 11.0], [5.7, 11.0], [5.8, 11.0], [5.9, 11.0], [6.0, 11.0], [6.1, 11.0], [6.2, 11.0], [6.3, 11.0], [6.4, 11.0], [6.5, 11.0], [6.6, 11.0], [6.7, 11.0], [6.8, 11.0], [6.9, 11.0], [7.0, 11.0], [7.1, 11.0], [7.2, 11.0], [7.3, 11.0], [7.4, 11.0], [7.5, 11.0], [7.6, 11.0], [7.7, 11.0], [7.8, 11.0], [7.9, 11.0], [8.0, 11.0], [8.1, 11.0], [8.2, 11.0], [8.3, 11.0], [8.4, 11.0], [8.5, 11.0], [8.6, 11.0], [8.7, 11.0], [8.8, 11.0], [8.9, 11.0], [9.0, 11.0], [9.1, 11.0], [9.2, 11.0], [9.3, 11.0], [9.4, 11.0], [9.5, 11.0], [9.6, 11.0], [9.7, 11.0], [9.8, 11.0], [9.9, 11.0], [10.0, 11.0], [10.1, 11.0], [10.2, 11.0], [10.3, 11.0], [10.4, 11.0], [10.5, 12.0], [10.6, 12.0], [10.7, 12.0], [10.8, 12.0], [10.9, 12.0], [11.0, 12.0], [11.1, 12.0], [11.2, 12.0], [11.3, 12.0], [11.4, 12.0], [11.5, 12.0], [11.6, 12.0], [11.7, 12.0], [11.8, 12.0], [11.9, 12.0], [12.0, 12.0], [12.1, 12.0], [12.2, 12.0], [12.3, 12.0], [12.4, 12.0], [12.5, 12.0], [12.6, 12.0], [12.7, 12.0], [12.8, 12.0], [12.9, 12.0], [13.0, 12.0], [13.1, 12.0], [13.2, 12.0], [13.3, 12.0], [13.4, 12.0], [13.5, 12.0], [13.6, 12.0], [13.7, 12.0], [13.8, 12.0], [13.9, 12.0], [14.0, 12.0], [14.1, 12.0], [14.2, 12.0], [14.3, 12.0], [14.4, 12.0], [14.5, 12.0], [14.6, 12.0], [14.7, 12.0], [14.8, 12.0], [14.9, 12.0], [15.0, 12.0], [15.1, 12.0], [15.2, 12.0], [15.3, 12.0], [15.4, 12.0], [15.5, 12.0], [15.6, 12.0], [15.7, 12.0], [15.8, 12.0], [15.9, 12.0], [16.0, 12.0], [16.1, 12.0], [16.2, 12.0], [16.3, 12.0], [16.4, 12.0], [16.5, 12.0], [16.6, 12.0], [16.7, 12.0], [16.8, 12.0], [16.9, 12.0], [17.0, 12.0], [17.1, 12.0], [17.2, 12.0], [17.3, 12.0], [17.4, 12.0], [17.5, 12.0], [17.6, 12.0], [17.7, 12.0], [17.8, 12.0], [17.9, 12.0], [18.0, 12.0], [18.1, 12.0], [18.2, 12.0], [18.3, 12.0], [18.4, 12.0], [18.5, 12.0], [18.6, 12.0], [18.7, 12.0], [18.8, 12.0], [18.9, 12.0], [19.0, 12.0], [19.1, 12.0], [19.2, 12.0], [19.3, 12.0], [19.4, 12.0], [19.5, 12.0], [19.6, 12.0], [19.7, 12.0], [19.8, 12.0], [19.9, 12.0], [20.0, 12.0], [20.1, 12.0], [20.2, 12.0], [20.3, 13.0], [20.4, 13.0], [20.5, 13.0], [20.6, 13.0], [20.7, 13.0], [20.8, 13.0], [20.9, 13.0], [21.0, 13.0], [21.1, 13.0], [21.2, 13.0], [21.3, 13.0], [21.4, 13.0], [21.5, 13.0], [21.6, 13.0], [21.7, 13.0], [21.8, 13.0], [21.9, 13.0], [22.0, 13.0], [22.1, 13.0], [22.2, 13.0], [22.3, 13.0], [22.4, 13.0], [22.5, 13.0], [22.6, 13.0], [22.7, 13.0], [22.8, 13.0], [22.9, 13.0], [23.0, 13.0], [23.1, 13.0], [23.2, 13.0], [23.3, 13.0], [23.4, 13.0], [23.5, 13.0], [23.6, 13.0], [23.7, 13.0], [23.8, 13.0], [23.9, 13.0], [24.0, 13.0], [24.1, 13.0], [24.2, 13.0], [24.3, 13.0], [24.4, 13.0], [24.5, 13.0], [24.6, 13.0], [24.7, 13.0], [24.8, 13.0], [24.9, 13.0], [25.0, 13.0], [25.1, 13.0], [25.2, 13.0], [25.3, 13.0], [25.4, 13.0], [25.5, 13.0], [25.6, 13.0], [25.7, 13.0], [25.8, 13.0], [25.9, 13.0], [26.0, 13.0], [26.1, 13.0], [26.2, 13.0], [26.3, 13.0], [26.4, 13.0], [26.5, 13.0], [26.6, 13.0], [26.7, 13.0], [26.8, 13.0], [26.9, 13.0], [27.0, 13.0], [27.1, 13.0], [27.2, 13.0], [27.3, 13.0], [27.4, 13.0], [27.5, 13.0], [27.6, 13.0], [27.7, 13.0], [27.8, 13.0], [27.9, 13.0], [28.0, 13.0], [28.1, 13.0], [28.2, 13.0], [28.3, 13.0], [28.4, 13.0], [28.5, 13.0], [28.6, 13.0], [28.7, 13.0], [28.8, 13.0], [28.9, 13.0], [29.0, 13.0], [29.1, 13.0], [29.2, 13.0], [29.3, 13.0], [29.4, 13.0], [29.5, 13.0], [29.6, 13.0], [29.7, 13.0], [29.8, 13.0], [29.9, 13.0], [30.0, 13.0], [30.1, 13.0], [30.2, 13.0], [30.3, 13.0], [30.4, 13.0], [30.5, 13.0], [30.6, 13.0], [30.7, 13.0], [30.8, 13.0], [30.9, 13.0], [31.0, 13.0], [31.1, 13.0], [31.2, 13.0], [31.3, 13.0], [31.4, 14.0], [31.5, 14.0], [31.6, 14.0], [31.7, 14.0], [31.8, 14.0], [31.9, 14.0], [32.0, 14.0], [32.1, 14.0], [32.2, 14.0], [32.3, 14.0], [32.4, 14.0], [32.5, 14.0], [32.6, 14.0], [32.7, 14.0], [32.8, 14.0], [32.9, 14.0], [33.0, 14.0], [33.1, 14.0], [33.2, 14.0], [33.3, 14.0], [33.4, 14.0], [33.5, 14.0], [33.6, 14.0], [33.7, 14.0], [33.8, 14.0], [33.9, 14.0], [34.0, 14.0], [34.1, 14.0], [34.2, 14.0], [34.3, 14.0], [34.4, 14.0], [34.5, 14.0], [34.6, 14.0], [34.7, 14.0], [34.8, 14.0], [34.9, 14.0], [35.0, 14.0], [35.1, 14.0], [35.2, 14.0], [35.3, 14.0], [35.4, 14.0], [35.5, 14.0], [35.6, 14.0], [35.7, 14.0], [35.8, 14.0], [35.9, 14.0], [36.0, 14.0], [36.1, 14.0], [36.2, 14.0], [36.3, 14.0], [36.4, 14.0], [36.5, 14.0], [36.6, 14.0], [36.7, 14.0], [36.8, 14.0], [36.9, 14.0], [37.0, 14.0], [37.1, 14.0], [37.2, 14.0], [37.3, 14.0], [37.4, 14.0], [37.5, 14.0], [37.6, 14.0], [37.7, 14.0], [37.8, 14.0], [37.9, 14.0], [38.0, 14.0], [38.1, 14.0], [38.2, 14.0], [38.3, 14.0], [38.4, 14.0], [38.5, 14.0], [38.6, 14.0], [38.7, 14.0], [38.8, 14.0], [38.9, 14.0], [39.0, 14.0], [39.1, 14.0], [39.2, 14.0], [39.3, 14.0], [39.4, 14.0], [39.5, 14.0], [39.6, 14.0], [39.7, 14.0], [39.8, 14.0], [39.9, 14.0], [40.0, 14.0], [40.1, 14.0], [40.2, 14.0], [40.3, 14.0], [40.4, 14.0], [40.5, 14.0], [40.6, 14.0], [40.7, 14.0], [40.8, 14.0], [40.9, 15.0], [41.0, 15.0], [41.1, 15.0], [41.2, 15.0], [41.3, 15.0], [41.4, 15.0], [41.5, 15.0], [41.6, 15.0], [41.7, 15.0], [41.8, 15.0], [41.9, 15.0], [42.0, 15.0], [42.1, 15.0], [42.2, 15.0], [42.3, 15.0], [42.4, 15.0], [42.5, 15.0], [42.6, 15.0], [42.7, 15.0], [42.8, 15.0], [42.9, 15.0], [43.0, 15.0], [43.1, 15.0], [43.2, 15.0], [43.3, 15.0], [43.4, 15.0], [43.5, 15.0], [43.6, 15.0], [43.7, 15.0], [43.8, 15.0], [43.9, 15.0], [44.0, 15.0], [44.1, 15.0], [44.2, 15.0], [44.3, 15.0], [44.4, 15.0], [44.5, 15.0], [44.6, 15.0], [44.7, 15.0], [44.8, 15.0], [44.9, 15.0], [45.0, 15.0], [45.1, 15.0], [45.2, 15.0], [45.3, 15.0], [45.4, 15.0], [45.5, 15.0], [45.6, 15.0], [45.7, 15.0], [45.8, 15.0], [45.9, 15.0], [46.0, 15.0], [46.1, 15.0], [46.2, 15.0], [46.3, 15.0], [46.4, 15.0], [46.5, 15.0], [46.6, 15.0], [46.7, 15.0], [46.8, 15.0], [46.9, 15.0], [47.0, 15.0], [47.1, 15.0], [47.2, 15.0], [47.3, 15.0], [47.4, 15.0], [47.5, 15.0], [47.6, 15.0], [47.7, 15.0], [47.8, 15.0], [47.9, 15.0], [48.0, 15.0], [48.1, 16.0], [48.2, 16.0], [48.3, 16.0], [48.4, 16.0], [48.5, 16.0], [48.6, 16.0], [48.7, 16.0], [48.8, 16.0], [48.9, 16.0], [49.0, 16.0], [49.1, 16.0], [49.2, 16.0], [49.3, 16.0], [49.4, 16.0], [49.5, 16.0], [49.6, 16.0], [49.7, 16.0], [49.8, 16.0], [49.9, 16.0], [50.0, 16.0], [50.1, 16.0], [50.2, 16.0], [50.3, 16.0], [50.4, 16.0], [50.5, 16.0], [50.6, 16.0], [50.7, 16.0], [50.8, 16.0], [50.9, 16.0], [51.0, 16.0], [51.1, 16.0], [51.2, 16.0], [51.3, 16.0], [51.4, 16.0], [51.5, 16.0], [51.6, 16.0], [51.7, 16.0], [51.8, 16.0], [51.9, 16.0], [52.0, 16.0], [52.1, 16.0], [52.2, 16.0], [52.3, 16.0], [52.4, 16.0], [52.5, 16.0], [52.6, 16.0], [52.7, 16.0], [52.8, 16.0], [52.9, 16.0], [53.0, 16.0], [53.1, 16.0], [53.2, 16.0], [53.3, 16.0], [53.4, 16.0], [53.5, 16.0], [53.6, 16.0], [53.7, 16.0], [53.8, 16.0], [53.9, 17.0], [54.0, 17.0], [54.1, 17.0], [54.2, 17.0], [54.3, 17.0], [54.4, 17.0], [54.5, 17.0], [54.6, 17.0], [54.7, 17.0], [54.8, 17.0], [54.9, 17.0], [55.0, 17.0], [55.1, 17.0], [55.2, 17.0], [55.3, 17.0], [55.4, 17.0], [55.5, 17.0], [55.6, 17.0], [55.7, 17.0], [55.8, 17.0], [55.9, 17.0], [56.0, 17.0], [56.1, 17.0], [56.2, 17.0], [56.3, 17.0], [56.4, 17.0], [56.5, 17.0], [56.6, 17.0], [56.7, 17.0], [56.8, 17.0], [56.9, 17.0], [57.0, 17.0], [57.1, 17.0], [57.2, 17.0], [57.3, 17.0], [57.4, 17.0], [57.5, 17.0], [57.6, 17.0], [57.7, 17.0], [57.8, 17.0], [57.9, 17.0], [58.0, 17.0], [58.1, 17.0], [58.2, 17.0], [58.3, 17.0], [58.4, 17.0], [58.5, 17.0], [58.6, 18.0], [58.7, 18.0], [58.8, 18.0], [58.9, 18.0], [59.0, 18.0], [59.1, 18.0], [59.2, 18.0], [59.3, 18.0], [59.4, 18.0], [59.5, 18.0], [59.6, 18.0], [59.7, 18.0], [59.8, 18.0], [59.9, 18.0], [60.0, 18.0], [60.1, 18.0], [60.2, 18.0], [60.3, 18.0], [60.4, 18.0], [60.5, 18.0], [60.6, 18.0], [60.7, 18.0], [60.8, 18.0], [60.9, 18.0], [61.0, 18.0], [61.1, 18.0], [61.2, 18.0], [61.3, 18.0], [61.4, 18.0], [61.5, 18.0], [61.6, 18.0], [61.7, 18.0], [61.8, 18.0], [61.9, 18.0], [62.0, 18.0], [62.1, 18.0], [62.2, 18.0], [62.3, 19.0], [62.4, 19.0], [62.5, 19.0], [62.6, 19.0], [62.7, 19.0], [62.8, 19.0], [62.9, 19.0], [63.0, 19.0], [63.1, 19.0], [63.2, 19.0], [63.3, 19.0], [63.4, 19.0], [63.5, 19.0], [63.6, 19.0], [63.7, 19.0], [63.8, 19.0], [63.9, 19.0], [64.0, 19.0], [64.1, 19.0], [64.2, 19.0], [64.3, 19.0], [64.4, 19.0], [64.5, 19.0], [64.6, 19.0], [64.7, 19.0], [64.8, 19.0], [64.9, 19.0], [65.0, 19.0], [65.1, 19.0], [65.2, 20.0], [65.3, 20.0], [65.4, 20.0], [65.5, 20.0], [65.6, 20.0], [65.7, 20.0], [65.8, 20.0], [65.9, 20.0], [66.0, 20.0], [66.1, 20.0], [66.2, 20.0], [66.3, 20.0], [66.4, 20.0], [66.5, 20.0], [66.6, 20.0], [66.7, 20.0], [66.8, 20.0], [66.9, 20.0], [67.0, 20.0], [67.1, 20.0], [67.2, 20.0], [67.3, 20.0], [67.4, 20.0], [67.5, 20.0], [67.6, 20.0], [67.7, 20.0], [67.8, 20.0], [67.9, 21.0], [68.0, 21.0], [68.1, 21.0], [68.2, 21.0], [68.3, 21.0], [68.4, 21.0], [68.5, 21.0], [68.6, 21.0], [68.7, 21.0], [68.8, 21.0], [68.9, 21.0], [69.0, 21.0], [69.1, 21.0], [69.2, 21.0], [69.3, 21.0], [69.4, 21.0], [69.5, 21.0], [69.6, 21.0], [69.7, 21.0], [69.8, 21.0], [69.9, 21.0], [70.0, 21.0], [70.1, 22.0], [70.2, 22.0], [70.3, 22.0], [70.4, 22.0], [70.5, 22.0], [70.6, 22.0], [70.7, 22.0], [70.8, 22.0], [70.9, 22.0], [71.0, 22.0], [71.1, 22.0], [71.2, 22.0], [71.3, 22.0], [71.4, 22.0], [71.5, 22.0], [71.6, 22.0], [71.7, 22.0], [71.8, 22.0], [71.9, 23.0], [72.0, 23.0], [72.1, 23.0], [72.2, 23.0], [72.3, 23.0], [72.4, 23.0], [72.5, 23.0], [72.6, 23.0], [72.7, 23.0], [72.8, 23.0], [72.9, 23.0], [73.0, 23.0], [73.1, 23.0], [73.2, 23.0], [73.3, 23.0], [73.4, 23.0], [73.5, 23.0], [73.6, 23.0], [73.7, 24.0], [73.8, 24.0], [73.9, 24.0], [74.0, 24.0], [74.1, 24.0], [74.2, 24.0], [74.3, 24.0], [74.4, 24.0], [74.5, 24.0], [74.6, 24.0], [74.7, 24.0], [74.8, 24.0], [74.9, 24.0], [75.0, 24.0], [75.1, 24.0], [75.2, 24.0], [75.3, 25.0], [75.4, 25.0], [75.5, 25.0], [75.6, 25.0], [75.7, 25.0], [75.8, 25.0], [75.9, 25.0], [76.0, 25.0], [76.1, 25.0], [76.2, 25.0], [76.3, 25.0], [76.4, 25.0], [76.5, 25.0], [76.6, 25.0], [76.7, 25.0], [76.8, 25.0], [76.9, 26.0], [77.0, 26.0], [77.1, 26.0], [77.2, 26.0], [77.3, 26.0], [77.4, 26.0], [77.5, 26.0], [77.6, 26.0], [77.7, 26.0], [77.8, 26.0], [77.9, 26.0], [78.0, 26.0], [78.1, 26.0], [78.2, 26.0], [78.3, 27.0], [78.4, 27.0], [78.5, 27.0], [78.6, 27.0], [78.7, 27.0], [78.8, 27.0], [78.9, 27.0], [79.0, 27.0], [79.1, 27.0], [79.2, 27.0], [79.3, 27.0], [79.4, 27.0], [79.5, 27.0], [79.6, 28.0], [79.7, 28.0], [79.8, 28.0], [79.9, 28.0], [80.0, 28.0], [80.1, 28.0], [80.2, 28.0], [80.3, 28.0], [80.4, 28.0], [80.5, 28.0], [80.6, 28.0], [80.7, 28.0], [80.8, 29.0], [80.9, 29.0], [81.0, 29.0], [81.1, 29.0], [81.2, 29.0], [81.3, 29.0], [81.4, 29.0], [81.5, 29.0], [81.6, 29.0], [81.7, 29.0], [81.8, 30.0], [81.9, 30.0], [82.0, 30.0], [82.1, 30.0], [82.2, 30.0], [82.3, 30.0], [82.4, 30.0], [82.5, 30.0], [82.6, 30.0], [82.7, 30.0], [82.8, 31.0], [82.9, 31.0], [83.0, 31.0], [83.1, 31.0], [83.2, 31.0], [83.3, 31.0], [83.4, 31.0], [83.5, 31.0], [83.6, 32.0], [83.7, 32.0], [83.8, 32.0], [83.9, 32.0], [84.0, 32.0], [84.1, 32.0], [84.2, 32.0], [84.3, 32.0], [84.4, 32.0], [84.5, 33.0], [84.6, 33.0], [84.7, 33.0], [84.8, 33.0], [84.9, 33.0], [85.0, 33.0], [85.1, 33.0], [85.2, 33.0], [85.3, 34.0], [85.4, 34.0], [85.5, 34.0], [85.6, 34.0], [85.7, 34.0], [85.8, 34.0], [85.9, 34.0], [86.0, 35.0], [86.1, 35.0], [86.2, 35.0], [86.3, 35.0], [86.4, 35.0], [86.5, 35.0], [86.6, 36.0], [86.7, 36.0], [86.8, 36.0], [86.9, 36.0], [87.0, 36.0], [87.1, 36.0], [87.2, 37.0], [87.3, 37.0], [87.4, 37.0], [87.5, 37.0], [87.6, 37.0], [87.7, 37.0], [87.8, 38.0], [87.9, 38.0], [88.0, 38.0], [88.1, 38.0], [88.2, 38.0], [88.3, 38.0], [88.4, 39.0], [88.5, 39.0], [88.6, 39.0], [88.7, 39.0], [88.8, 39.0], [88.9, 40.0], [89.0, 40.0], [89.1, 40.0], [89.2, 40.0], [89.3, 40.0], [89.4, 41.0], [89.5, 41.0], [89.6, 41.0], [89.7, 41.0], [89.8, 41.0], [89.9, 42.0], [90.0, 42.0], [90.1, 42.0], [90.2, 42.0], [90.3, 43.0], [90.4, 43.0], [90.5, 43.0], [90.6, 43.0], [90.7, 44.0], [90.8, 44.0], [90.9, 44.0], [91.0, 45.0], [91.1, 45.0], [91.2, 45.0], [91.3, 45.0], [91.4, 46.0], [91.5, 46.0], [91.6, 46.0], [91.7, 47.0], [91.8, 47.0], [91.9, 47.0], [92.0, 48.0], [92.1, 48.0], [92.2, 48.0], [92.3, 49.0], [92.4, 49.0], [92.5, 49.0], [92.6, 50.0], [92.7, 50.0], [92.8, 51.0], [92.9, 51.0], [93.0, 51.0], [93.1, 52.0], [93.2, 52.0], [93.3, 53.0], [93.4, 53.0], [93.5, 54.0], [93.6, 54.0], [93.7, 55.0], [93.8, 55.0], [93.9, 56.0], [94.0, 56.0], [94.1, 57.0], [94.2, 57.0], [94.3, 58.0], [94.4, 58.0], [94.5, 59.0], [94.6, 59.0], [94.7, 60.0], [94.8, 61.0], [94.9, 61.0], [95.0, 62.0], [95.1, 62.0], [95.2, 63.0], [95.3, 64.0], [95.4, 65.0], [95.5, 65.0], [95.6, 66.0], [95.7, 67.0], [95.8, 68.0], [95.9, 69.0], [96.0, 70.0], [96.1, 70.0], [96.2, 71.0], [96.3, 72.0], [96.4, 74.0], [96.5, 75.0], [96.6, 76.0], [96.7, 77.0], [96.8, 79.0], [96.9, 81.0], [97.0, 82.0], [97.1, 84.0], [97.2, 86.0], [97.3, 88.0], [97.4, 90.0], [97.5, 93.0], [97.6, 95.0], [97.7, 96.0], [97.8, 100.0], [97.9, 102.0], [98.0, 104.0], [98.1, 107.0], [98.2, 111.0], [98.3, 115.0], [98.4, 120.0], [98.5, 124.0], [98.6, 129.0], [98.7, 138.0], [98.8, 146.0], [98.9, 165.0], [99.0, 194.0], [99.1, 232.0], [99.2, 280.0], [99.3, 335.0], [99.4, 497.0], [99.5, 578.0], [99.6, 836.0], [99.7, 1108.0], [99.8, 2561.0], [99.9, 21032.0]], "isOverall": false, "label": "访问首页", "isController": false}, {"data": [[0.0, 9.0], [0.1, 10.0], [0.2, 10.0], [0.3, 11.0], [0.4, 11.0], [0.5, 11.0], [0.6, 11.0], [0.7, 11.0], [0.8, 11.0], [0.9, 11.0], [1.0, 11.0], [1.1, 11.0], [1.2, 11.0], [1.3, 11.0], [1.4, 11.0], [1.5, 11.0], [1.6, 11.0], [1.7, 11.0], [1.8, 11.0], [1.9, 11.0], [2.0, 11.0], [2.1, 11.0], [2.2, 12.0], [2.3, 12.0], [2.4, 12.0], [2.5, 12.0], [2.6, 12.0], [2.7, 12.0], [2.8, 12.0], [2.9, 12.0], [3.0, 12.0], [3.1, 12.0], [3.2, 12.0], [3.3, 12.0], [3.4, 12.0], [3.5, 12.0], [3.6, 12.0], [3.7, 12.0], [3.8, 12.0], [3.9, 12.0], [4.0, 12.0], [4.1, 12.0], [4.2, 12.0], [4.3, 12.0], [4.4, 12.0], [4.5, 12.0], [4.6, 12.0], [4.7, 12.0], [4.8, 12.0], [4.9, 12.0], [5.0, 12.0], [5.1, 12.0], [5.2, 12.0], [5.3, 12.0], [5.4, 12.0], [5.5, 12.0], [5.6, 12.0], [5.7, 12.0], [5.8, 12.0], [5.9, 12.0], [6.0, 12.0], [6.1, 12.0], [6.2, 12.0], [6.3, 12.0], [6.4, 12.0], [6.5, 12.0], [6.6, 12.0], [6.7, 12.0], [6.8, 12.0], [6.9, 12.0], [7.0, 12.0], [7.1, 12.0], [7.2, 12.0], [7.3, 12.0], [7.4, 12.0], [7.5, 12.0], [7.6, 12.0], [7.7, 12.0], [7.8, 12.0], [7.9, 13.0], [8.0, 13.0], [8.1, 13.0], [8.2, 13.0], [8.3, 13.0], [8.4, 13.0], [8.5, 13.0], [8.6, 13.0], [8.7, 13.0], [8.8, 13.0], [8.9, 13.0], [9.0, 13.0], [9.1, 13.0], [9.2, 13.0], [9.3, 13.0], [9.4, 13.0], [9.5, 13.0], [9.6, 13.0], [9.7, 13.0], [9.8, 13.0], [9.9, 13.0], [10.0, 13.0], [10.1, 13.0], [10.2, 13.0], [10.3, 13.0], [10.4, 13.0], [10.5, 13.0], [10.6, 13.0], [10.7, 13.0], [10.8, 13.0], [10.9, 13.0], [11.0, 13.0], [11.1, 13.0], [11.2, 13.0], [11.3, 13.0], [11.4, 13.0], [11.5, 13.0], [11.6, 13.0], [11.7, 13.0], [11.8, 13.0], [11.9, 13.0], [12.0, 13.0], [12.1, 13.0], [12.2, 13.0], [12.3, 13.0], [12.4, 13.0], [12.5, 13.0], [12.6, 13.0], [12.7, 13.0], [12.8, 13.0], [12.9, 13.0], [13.0, 13.0], [13.1, 13.0], [13.2, 13.0], [13.3, 13.0], [13.4, 13.0], [13.5, 13.0], [13.6, 13.0], [13.7, 13.0], [13.8, 13.0], [13.9, 13.0], [14.0, 13.0], [14.1, 13.0], [14.2, 13.0], [14.3, 13.0], [14.4, 13.0], [14.5, 13.0], [14.6, 13.0], [14.7, 13.0], [14.8, 13.0], [14.9, 13.0], [15.0, 13.0], [15.1, 13.0], [15.2, 13.0], [15.3, 13.0], [15.4, 13.0], [15.5, 13.0], [15.6, 13.0], [15.7, 13.0], [15.8, 13.0], [15.9, 13.0], [16.0, 13.0], [16.1, 13.0], [16.2, 13.0], [16.3, 13.0], [16.4, 13.0], [16.5, 13.0], [16.6, 13.0], [16.7, 13.0], [16.8, 13.0], [16.9, 13.0], [17.0, 13.0], [17.1, 13.0], [17.2, 13.0], [17.3, 13.0], [17.4, 13.0], [17.5, 14.0], [17.6, 14.0], [17.7, 14.0], [17.8, 14.0], [17.9, 14.0], [18.0, 14.0], [18.1, 14.0], [18.2, 14.0], [18.3, 14.0], [18.4, 14.0], [18.5, 14.0], [18.6, 14.0], [18.7, 14.0], [18.8, 14.0], [18.9, 14.0], [19.0, 14.0], [19.1, 14.0], [19.2, 14.0], [19.3, 14.0], [19.4, 14.0], [19.5, 14.0], [19.6, 14.0], [19.7, 14.0], [19.8, 14.0], [19.9, 14.0], [20.0, 14.0], [20.1, 14.0], [20.2, 14.0], [20.3, 14.0], [20.4, 14.0], [20.5, 14.0], [20.6, 14.0], [20.7, 14.0], [20.8, 14.0], [20.9, 14.0], [21.0, 14.0], [21.1, 14.0], [21.2, 14.0], [21.3, 14.0], [21.4, 14.0], [21.5, 14.0], [21.6, 14.0], [21.7, 14.0], [21.8, 14.0], [21.9, 14.0], [22.0, 14.0], [22.1, 14.0], [22.2, 14.0], [22.3, 14.0], [22.4, 14.0], [22.5, 14.0], [22.6, 14.0], [22.7, 14.0], [22.8, 14.0], [22.9, 14.0], [23.0, 14.0], [23.1, 14.0], [23.2, 14.0], [23.3, 14.0], [23.4, 14.0], [23.5, 14.0], [23.6, 14.0], [23.7, 14.0], [23.8, 14.0], [23.9, 14.0], [24.0, 14.0], [24.1, 14.0], [24.2, 14.0], [24.3, 14.0], [24.4, 14.0], [24.5, 14.0], [24.6, 14.0], [24.7, 14.0], [24.8, 14.0], [24.9, 14.0], [25.0, 14.0], [25.1, 14.0], [25.2, 14.0], [25.3, 14.0], [25.4, 14.0], [25.5, 14.0], [25.6, 14.0], [25.7, 14.0], [25.8, 14.0], [25.9, 14.0], [26.0, 14.0], [26.1, 14.0], [26.2, 14.0], [26.3, 14.0], [26.4, 14.0], [26.5, 14.0], [26.6, 14.0], [26.7, 14.0], [26.8, 14.0], [26.9, 14.0], [27.0, 14.0], [27.1, 14.0], [27.2, 14.0], [27.3, 14.0], [27.4, 14.0], [27.5, 14.0], [27.6, 14.0], [27.7, 14.0], [27.8, 14.0], [27.9, 14.0], [28.0, 15.0], [28.1, 15.0], [28.2, 15.0], [28.3, 15.0], [28.4, 15.0], [28.5, 15.0], [28.6, 15.0], [28.7, 15.0], [28.8, 15.0], [28.9, 15.0], [29.0, 15.0], [29.1, 15.0], [29.2, 15.0], [29.3, 15.0], [29.4, 15.0], [29.5, 15.0], [29.6, 15.0], [29.7, 15.0], [29.8, 15.0], [29.9, 15.0], [30.0, 15.0], [30.1, 15.0], [30.2, 15.0], [30.3, 15.0], [30.4, 15.0], [30.5, 15.0], [30.6, 15.0], [30.7, 15.0], [30.8, 15.0], [30.9, 15.0], [31.0, 15.0], [31.1, 15.0], [31.2, 15.0], [31.3, 15.0], [31.4, 15.0], [31.5, 15.0], [31.6, 15.0], [31.7, 15.0], [31.8, 15.0], [31.9, 15.0], [32.0, 15.0], [32.1, 15.0], [32.2, 15.0], [32.3, 15.0], [32.4, 15.0], [32.5, 15.0], [32.6, 15.0], [32.7, 15.0], [32.8, 15.0], [32.9, 15.0], [33.0, 15.0], [33.1, 15.0], [33.2, 15.0], [33.3, 15.0], [33.4, 15.0], [33.5, 15.0], [33.6, 15.0], [33.7, 15.0], [33.8, 15.0], [33.9, 15.0], [34.0, 15.0], [34.1, 15.0], [34.2, 15.0], [34.3, 15.0], [34.4, 15.0], [34.5, 15.0], [34.6, 15.0], [34.7, 15.0], [34.8, 15.0], [34.9, 15.0], [35.0, 15.0], [35.1, 15.0], [35.2, 15.0], [35.3, 15.0], [35.4, 15.0], [35.5, 15.0], [35.6, 15.0], [35.7, 15.0], [35.8, 15.0], [35.9, 15.0], [36.0, 15.0], [36.1, 15.0], [36.2, 15.0], [36.3, 15.0], [36.4, 15.0], [36.5, 15.0], [36.6, 15.0], [36.7, 15.0], [36.8, 15.0], [36.9, 15.0], [37.0, 15.0], [37.1, 15.0], [37.2, 15.0], [37.3, 15.0], [37.4, 15.0], [37.5, 15.0], [37.6, 15.0], [37.7, 16.0], [37.8, 16.0], [37.9, 16.0], [38.0, 16.0], [38.1, 16.0], [38.2, 16.0], [38.3, 16.0], [38.4, 16.0], [38.5, 16.0], [38.6, 16.0], [38.7, 16.0], [38.8, 16.0], [38.9, 16.0], [39.0, 16.0], [39.1, 16.0], [39.2, 16.0], [39.3, 16.0], [39.4, 16.0], [39.5, 16.0], [39.6, 16.0], [39.7, 16.0], [39.8, 16.0], [39.9, 16.0], [40.0, 16.0], [40.1, 16.0], [40.2, 16.0], [40.3, 16.0], [40.4, 16.0], [40.5, 16.0], [40.6, 16.0], [40.7, 16.0], [40.8, 16.0], [40.9, 16.0], [41.0, 16.0], [41.1, 16.0], [41.2, 16.0], [41.3, 16.0], [41.4, 16.0], [41.5, 16.0], [41.6, 16.0], [41.7, 16.0], [41.8, 16.0], [41.9, 16.0], [42.0, 16.0], [42.1, 16.0], [42.2, 16.0], [42.3, 16.0], [42.4, 16.0], [42.5, 16.0], [42.6, 16.0], [42.7, 16.0], [42.8, 16.0], [42.9, 16.0], [43.0, 16.0], [43.1, 16.0], [43.2, 16.0], [43.3, 16.0], [43.4, 16.0], [43.5, 16.0], [43.6, 16.0], [43.7, 16.0], [43.8, 16.0], [43.9, 16.0], [44.0, 16.0], [44.1, 16.0], [44.2, 16.0], [44.3, 16.0], [44.4, 16.0], [44.5, 16.0], [44.6, 16.0], [44.7, 16.0], [44.8, 16.0], [44.9, 16.0], [45.0, 16.0], [45.1, 16.0], [45.2, 16.0], [45.3, 16.0], [45.4, 16.0], [45.5, 16.0], [45.6, 16.0], [45.7, 16.0], [45.8, 17.0], [45.9, 17.0], [46.0, 17.0], [46.1, 17.0], [46.2, 17.0], [46.3, 17.0], [46.4, 17.0], [46.5, 17.0], [46.6, 17.0], [46.7, 17.0], [46.8, 17.0], [46.9, 17.0], [47.0, 17.0], [47.1, 17.0], [47.2, 17.0], [47.3, 17.0], [47.4, 17.0], [47.5, 17.0], [47.6, 17.0], [47.7, 17.0], [47.8, 17.0], [47.9, 17.0], [48.0, 17.0], [48.1, 17.0], [48.2, 17.0], [48.3, 17.0], [48.4, 17.0], [48.5, 17.0], [48.6, 17.0], [48.7, 17.0], [48.8, 17.0], [48.9, 17.0], [49.0, 17.0], [49.1, 17.0], [49.2, 17.0], [49.3, 17.0], [49.4, 17.0], [49.5, 17.0], [49.6, 17.0], [49.7, 17.0], [49.8, 17.0], [49.9, 17.0], [50.0, 17.0], [50.1, 17.0], [50.2, 17.0], [50.3, 17.0], [50.4, 17.0], [50.5, 17.0], [50.6, 17.0], [50.7, 17.0], [50.8, 17.0], [50.9, 17.0], [51.0, 17.0], [51.1, 17.0], [51.2, 17.0], [51.3, 17.0], [51.4, 17.0], [51.5, 17.0], [51.6, 17.0], [51.7, 17.0], [51.8, 17.0], [51.9, 17.0], [52.0, 17.0], [52.1, 17.0], [52.2, 17.0], [52.3, 17.0], [52.4, 18.0], [52.5, 18.0], [52.6, 18.0], [52.7, 18.0], [52.8, 18.0], [52.9, 18.0], [53.0, 18.0], [53.1, 18.0], [53.2, 18.0], [53.3, 18.0], [53.4, 18.0], [53.5, 18.0], [53.6, 18.0], [53.7, 18.0], [53.8, 18.0], [53.9, 18.0], [54.0, 18.0], [54.1, 18.0], [54.2, 18.0], [54.3, 18.0], [54.4, 18.0], [54.5, 18.0], [54.6, 18.0], [54.7, 18.0], [54.8, 18.0], [54.9, 18.0], [55.0, 18.0], [55.1, 18.0], [55.2, 18.0], [55.3, 18.0], [55.4, 18.0], [55.5, 18.0], [55.6, 18.0], [55.7, 18.0], [55.8, 18.0], [55.9, 18.0], [56.0, 18.0], [56.1, 18.0], [56.2, 18.0], [56.3, 18.0], [56.4, 18.0], [56.5, 18.0], [56.6, 18.0], [56.7, 18.0], [56.8, 18.0], [56.9, 18.0], [57.0, 18.0], [57.1, 18.0], [57.2, 18.0], [57.3, 18.0], [57.4, 18.0], [57.5, 18.0], [57.6, 19.0], [57.7, 19.0], [57.8, 19.0], [57.9, 19.0], [58.0, 19.0], [58.1, 19.0], [58.2, 19.0], [58.3, 19.0], [58.4, 19.0], [58.5, 19.0], [58.6, 19.0], [58.7, 19.0], [58.8, 19.0], [58.9, 19.0], [59.0, 19.0], [59.1, 19.0], [59.2, 19.0], [59.3, 19.0], [59.4, 19.0], [59.5, 19.0], [59.6, 19.0], [59.7, 19.0], [59.8, 19.0], [59.9, 19.0], [60.0, 19.0], [60.1, 19.0], [60.2, 19.0], [60.3, 19.0], [60.4, 19.0], [60.5, 19.0], [60.6, 19.0], [60.7, 19.0], [60.8, 19.0], [60.9, 19.0], [61.0, 19.0], [61.1, 19.0], [61.2, 19.0], [61.3, 19.0], [61.4, 20.0], [61.5, 20.0], [61.6, 20.0], [61.7, 20.0], [61.8, 20.0], [61.9, 20.0], [62.0, 20.0], [62.1, 20.0], [62.2, 20.0], [62.3, 20.0], [62.4, 20.0], [62.5, 20.0], [62.6, 20.0], [62.7, 20.0], [62.8, 20.0], [62.9, 20.0], [63.0, 20.0], [63.1, 20.0], [63.2, 20.0], [63.3, 20.0], [63.4, 20.0], [63.5, 20.0], [63.6, 20.0], [63.7, 20.0], [63.8, 20.0], [63.9, 20.0], [64.0, 20.0], [64.1, 20.0], [64.2, 20.0], [64.3, 20.0], [64.4, 20.0], [64.5, 21.0], [64.6, 21.0], [64.7, 21.0], [64.8, 21.0], [64.9, 21.0], [65.0, 21.0], [65.1, 21.0], [65.2, 21.0], [65.3, 21.0], [65.4, 21.0], [65.5, 21.0], [65.6, 21.0], [65.7, 21.0], [65.8, 21.0], [65.9, 21.0], [66.0, 21.0], [66.1, 21.0], [66.2, 21.0], [66.3, 21.0], [66.4, 21.0], [66.5, 21.0], [66.6, 21.0], [66.7, 21.0], [66.8, 21.0], [66.9, 21.0], [67.0, 21.0], [67.1, 21.0], [67.2, 21.0], [67.3, 22.0], [67.4, 22.0], [67.5, 22.0], [67.6, 22.0], [67.7, 22.0], [67.8, 22.0], [67.9, 22.0], [68.0, 22.0], [68.1, 22.0], [68.2, 22.0], [68.3, 22.0], [68.4, 22.0], [68.5, 22.0], [68.6, 22.0], [68.7, 22.0], [68.8, 22.0], [68.9, 22.0], [69.0, 22.0], [69.1, 22.0], [69.2, 22.0], [69.3, 22.0], [69.4, 22.0], [69.5, 23.0], [69.6, 23.0], [69.7, 23.0], [69.8, 23.0], [69.9, 23.0], [70.0, 23.0], [70.1, 23.0], [70.2, 23.0], [70.3, 23.0], [70.4, 23.0], [70.5, 23.0], [70.6, 23.0], [70.7, 23.0], [70.8, 23.0], [70.9, 23.0], [71.0, 23.0], [71.1, 23.0], [71.2, 23.0], [71.3, 23.0], [71.4, 24.0], [71.5, 24.0], [71.6, 24.0], [71.7, 24.0], [71.8, 24.0], [71.9, 24.0], [72.0, 24.0], [72.1, 24.0], [72.2, 24.0], [72.3, 24.0], [72.4, 24.0], [72.5, 24.0], [72.6, 24.0], [72.7, 24.0], [72.8, 24.0], [72.9, 24.0], [73.0, 25.0], [73.1, 25.0], [73.2, 25.0], [73.3, 25.0], [73.4, 25.0], [73.5, 25.0], [73.6, 25.0], [73.7, 25.0], [73.8, 25.0], [73.9, 25.0], [74.0, 25.0], [74.1, 25.0], [74.2, 25.0], [74.3, 25.0], [74.4, 25.0], [74.5, 25.0], [74.6, 26.0], [74.7, 26.0], [74.8, 26.0], [74.9, 26.0], [75.0, 26.0], [75.1, 26.0], [75.2, 26.0], [75.3, 26.0], [75.4, 26.0], [75.5, 26.0], [75.6, 26.0], [75.7, 26.0], [75.8, 26.0], [75.9, 27.0], [76.0, 27.0], [76.1, 27.0], [76.2, 27.0], [76.3, 27.0], [76.4, 27.0], [76.5, 27.0], [76.6, 27.0], [76.7, 27.0], [76.8, 27.0], [76.9, 27.0], [77.0, 27.0], [77.1, 27.0], [77.2, 28.0], [77.3, 28.0], [77.4, 28.0], [77.5, 28.0], [77.6, 28.0], [77.7, 28.0], [77.8, 28.0], [77.9, 28.0], [78.0, 28.0], [78.1, 28.0], [78.2, 28.0], [78.3, 28.0], [78.4, 29.0], [78.5, 29.0], [78.6, 29.0], [78.7, 29.0], [78.8, 29.0], [78.9, 29.0], [79.0, 29.0], [79.1, 29.0], [79.2, 29.0], [79.3, 29.0], [79.4, 30.0], [79.5, 30.0], [79.6, 30.0], [79.7, 30.0], [79.8, 30.0], [79.9, 30.0], [80.0, 30.0], [80.1, 30.0], [80.2, 31.0], [80.3, 31.0], [80.4, 31.0], [80.5, 31.0], [80.6, 31.0], [80.7, 31.0], [80.8, 31.0], [80.9, 31.0], [81.0, 31.0], [81.1, 32.0], [81.2, 32.0], [81.3, 32.0], [81.4, 32.0], [81.5, 32.0], [81.6, 32.0], [81.7, 32.0], [81.8, 33.0], [81.9, 33.0], [82.0, 33.0], [82.1, 33.0], [82.2, 33.0], [82.3, 33.0], [82.4, 33.0], [82.5, 33.0], [82.6, 34.0], [82.7, 34.0], [82.8, 34.0], [82.9, 34.0], [83.0, 34.0], [83.1, 34.0], [83.2, 34.0], [83.3, 35.0], [83.4, 35.0], [83.5, 35.0], [83.6, 35.0], [83.7, 35.0], [83.8, 35.0], [83.9, 35.0], [84.0, 36.0], [84.1, 36.0], [84.2, 36.0], [84.3, 36.0], [84.4, 36.0], [84.5, 36.0], [84.6, 37.0], [84.7, 37.0], [84.8, 37.0], [84.9, 37.0], [85.0, 37.0], [85.1, 37.0], [85.2, 38.0], [85.3, 38.0], [85.4, 38.0], [85.5, 38.0], [85.6, 38.0], [85.7, 38.0], [85.8, 39.0], [85.9, 39.0], [86.0, 39.0], [86.1, 39.0], [86.2, 39.0], [86.3, 40.0], [86.4, 40.0], [86.5, 40.0], [86.6, 40.0], [86.7, 40.0], [86.8, 40.0], [86.9, 41.0], [87.0, 41.0], [87.1, 41.0], [87.2, 41.0], [87.3, 41.0], [87.4, 42.0], [87.5, 42.0], [87.6, 42.0], [87.7, 42.0], [87.8, 42.0], [87.9, 43.0], [88.0, 43.0], [88.1, 43.0], [88.2, 43.0], [88.3, 43.0], [88.4, 44.0], [88.5, 44.0], [88.6, 44.0], [88.7, 44.0], [88.8, 44.0], [88.9, 45.0], [89.0, 45.0], [89.1, 45.0], [89.2, 45.0], [89.3, 46.0], [89.4, 46.0], [89.5, 46.0], [89.6, 46.0], [89.7, 47.0], [89.8, 47.0], [89.9, 47.0], [90.0, 47.0], [90.1, 48.0], [90.2, 48.0], [90.3, 48.0], [90.4, 48.0], [90.5, 49.0], [90.6, 49.0], [90.7, 49.0], [90.8, 49.0], [90.9, 50.0], [91.0, 50.0], [91.1, 50.0], [91.2, 51.0], [91.3, 51.0], [91.4, 51.0], [91.5, 51.0], [91.6, 52.0], [91.7, 52.0], [91.8, 52.0], [91.9, 53.0], [92.0, 53.0], [92.1, 53.0], [92.2, 53.0], [92.3, 54.0], [92.4, 54.0], [92.5, 54.0], [92.6, 55.0], [92.7, 55.0], [92.8, 56.0], [92.9, 56.0], [93.0, 57.0], [93.1, 57.0], [93.2, 57.0], [93.3, 58.0], [93.4, 58.0], [93.5, 59.0], [93.6, 59.0], [93.7, 59.0], [93.8, 60.0], [93.9, 61.0], [94.0, 61.0], [94.1, 62.0], [94.2, 62.0], [94.3, 63.0], [94.4, 63.0], [94.5, 64.0], [94.6, 64.0], [94.7, 65.0], [94.8, 65.0], [94.9, 66.0], [95.0, 67.0], [95.1, 67.0], [95.2, 68.0], [95.3, 68.0], [95.4, 69.0], [95.5, 69.0], [95.6, 70.0], [95.7, 71.0], [95.8, 71.0], [95.9, 72.0], [96.0, 73.0], [96.1, 74.0], [96.2, 75.0], [96.3, 76.0], [96.4, 76.0], [96.5, 77.0], [96.6, 79.0], [96.7, 80.0], [96.8, 81.0], [96.9, 82.0], [97.0, 84.0], [97.1, 86.0], [97.2, 88.0], [97.3, 90.0], [97.4, 92.0], [97.5, 94.0], [97.6, 96.0], [97.7, 98.0], [97.8, 100.0], [97.9, 102.0], [98.0, 104.0], [98.1, 107.0], [98.2, 109.0], [98.3, 113.0], [98.4, 118.0], [98.5, 122.0], [98.6, 126.0], [98.7, 133.0], [98.8, 142.0], [98.9, 153.0], [99.0, 166.0], [99.1, 187.0], [99.2, 216.0], [99.3, 264.0], [99.4, 313.0], [99.5, 371.0], [99.6, 534.0], [99.7, 630.0], [99.8, 892.0], [99.9, 1480.0]], "isOverall": false, "label": "第二tab查询", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 117359.0, "series": [{"data": [[0.0, 117359.0], [600.0, 39.0], [700.0, 50.0], [800.0, 63.0], [900.0, 35.0], [1000.0, 28.0], [1100.0, 25.0], [1200.0, 19.0], [1300.0, 10.0], [1400.0, 6.0], [1500.0, 12.0], [1600.0, 4.0], [1700.0, 10.0], [1800.0, 4.0], [1900.0, 5.0], [2000.0, 4.0], [2100.0, 3.0], [2200.0, 8.0], [2300.0, 4.0], [2400.0, 11.0], [2500.0, 2.0], [2600.0, 5.0], [2800.0, 4.0], [2700.0, 8.0], [2900.0, 9.0], [3000.0, 3.0], [3200.0, 5.0], [3300.0, 4.0], [3400.0, 3.0], [3500.0, 2.0], [3600.0, 3.0], [3700.0, 9.0], [3800.0, 5.0], [3900.0, 1.0], [4000.0, 2.0], [4300.0, 2.0], [4200.0, 3.0], [4600.0, 2.0], [4700.0, 2.0], [4800.0, 1.0], [4900.0, 1.0], [5200.0, 1.0], [5500.0, 1.0], [6000.0, 1.0], [6100.0, 1.0], [6200.0, 1.0], [10800.0, 1.0], [21000.0, 158.0], [100.0, 1467.0], [200.0, 274.0], [300.0, 136.0], [400.0, 45.0], [500.0, 139.0]], "isOverall": false, "label": "访问首页", "isController": false}, {"data": [[0.0, 117334.0], [600.0, 40.0], [700.0, 54.0], [800.0, 41.0], [900.0, 53.0], [1000.0, 28.0], [1100.0, 11.0], [1200.0, 8.0], [21000.0, 8.0], [1300.0, 17.0], [1400.0, 5.0], [1500.0, 10.0], [100.0, 1645.0], [1600.0, 3.0], [1700.0, 8.0], [1800.0, 3.0], [1900.0, 5.0], [2000.0, 7.0], [2200.0, 4.0], [2400.0, 10.0], [2500.0, 1.0], [2600.0, 3.0], [2800.0, 13.0], [2700.0, 12.0], [2900.0, 8.0], [3000.0, 2.0], [3100.0, 4.0], [200.0, 283.0], [3200.0, 3.0], [3300.0, 1.0], [3500.0, 2.0], [3600.0, 1.0], [3700.0, 2.0], [3800.0, 1.0], [4300.0, 1.0], [4200.0, 1.0], [4600.0, 3.0], [300.0, 154.0], [400.0, 62.0], [500.0, 149.0]], "isOverall": false, "label": "第二tab查询", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 166.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 238761.0, "series": [{"data": [[0.0, 238761.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 818.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 255.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 166.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 20.052875381313093, "minX": 1.63145508E12, "maxY": 120.03993910877382, "series": [{"data": [[1.6314552E12, 52.21774095613306], [1.63145526E12, 120.03993910877382], [1.63145508E12, 20.052875381313093], [1.63145514E12, 50.771865136721665]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145526E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11.812499999999996, "minX": 1.0, "maxY": 2402.3333333333335, "series": [{"data": [[2.0, 24.2], [3.0, 18.6875], [4.0, 14.374999999999998], [5.0, 12.157894736842106], [6.0, 12.526315789473687], [7.0, 639.6176470588236], [8.0, 1897.0379746835442], [9.0, 12.948717948717949], [10.0, 11.812499999999996], [11.0, 12.277777777777777], [12.0, 12.256756756756753], [13.0, 13.057142857142859], [14.0, 12.563106796116505], [15.0, 243.55494505494497], [16.0, 13.336795252225507], [17.0, 24.616312614739027], [18.0, 14.11094339622646], [19.0, 24.753400968411327], [20.0, 15.556194039823598], [21.0, 26.96513179846517], [22.0, 25.836551724137923], [23.0, 17.868224019167386], [24.0, 18.15481727574753], [25.0, 129.95324675324684], [26.0, 17.333333333333336], [27.0, 120.70627062706278], [28.0, 16.056603773584907], [29.0, 16.05405405405405], [30.0, 14.861635220125786], [31.0, 19.47368421052631], [32.0, 14.47747747747748], [33.0, 17.45323741007194], [34.0, 24.698996655518368], [35.0, 70.79582366589337], [36.0, 211.14619883040956], [37.0, 147.46041055718476], [38.0, 47.814965986394554], [39.0, 19.422712933753928], [40.0, 15.911504424778762], [41.0, 42.91056338028175], [42.0, 36.192806822395156], [43.0, 66.25529661016947], [44.0, 100.30065359477123], [45.0, 25.636935391652386], [46.0, 57.04914411927109], [47.0, 31.68140317155218], [48.0, 40.177210765466704], [49.0, 38.194890811701676], [50.0, 39.654747948417345], [51.0, 44.771883289124695], [52.0, 137.0778443113773], [53.0, 68.37574671445641], [54.0, 61.04397270659589], [55.0, 33.14908100748812], [56.0, 57.22576760987347], [57.0, 47.953516090584024], [58.0, 40.6808035714286], [59.0, 43.730227518959886], [60.0, 19.728682170542648], [61.0, 73.51741293532342], [62.0, 86.20396600566575], [63.0, 16.85175879396984], [64.0, 72.87086092715231], [65.0, 51.503412969283296], [66.0, 15.648068669527891], [67.0, 220.093896713615], [68.0, 91.99408284023666], [69.0, 117.76623376623375], [70.0, 36.408602150537625], [71.0, 28.03455964325528], [72.0, 43.71859903381646], [73.0, 59.41803278688519], [74.0, 240.06687898089166], [75.0, 63.30434782608696], [76.0, 271.04481792717087], [77.0, 46.22602739726027], [78.0, 121.51587301587297], [79.0, 121.99333333333334], [80.0, 102.86162361623619], [81.0, 58.732189973614766], [82.0, 110.5892672858617], [83.0, 185.9171314741035], [84.0, 175.5815722738799], [85.0, 98.2943871706758], [86.0, 146.46487119437958], [87.0, 274.607655502392], [88.0, 26.876344086021515], [89.0, 305.8631578947366], [90.0, 125.35398230088497], [91.0, 72.09818181818189], [92.0, 84.51403249630731], [93.0, 127.35941320293391], [94.0, 25.12966601178782], [95.0, 89.13096862210087], [96.0, 171.44534883720942], [97.0, 144.41779189833184], [98.0, 165.44725274725278], [99.0, 37.376404494381994], [100.0, 34.07522123893805], [101.0, 52.58196721311474], [102.0, 55.24705882352942], [103.0, 133.7142857142857], [105.0, 80.75862068965517], [106.0, 328.82500000000005], [107.0, 37.74999999999999], [104.0, 17.77777777777778], [108.0, 48.3984962406015], [109.0, 32.66562499999998], [110.0, 210.75308641975315], [111.0, 79.13392857142858], [112.0, 192.2222222222222], [113.0, 216.94117647058826], [114.0, 51.925373134328396], [115.0, 19.078125000000004], [118.0, 330.8], [119.0, 21.313725490196077], [120.0, 169.3793103448276], [122.0, 126.10169491525424], [123.0, 17.2], [121.0, 19.91056910569106], [124.0, 310.4285714285714], [125.0, 273.9512195121951], [126.0, 157.65384615384616], [127.0, 455.3], [128.0, 654.0], [129.0, 1022.3333333333333], [130.0, 183.57142857142858], [131.0, 1532.6], [132.0, 91.33333333333334], [133.0, 1312.6], [135.0, 47.679347826086946], [134.0, 20.000000000000004], [136.0, 233.36842105263162], [138.0, 54.1891891891892], [139.0, 183.83333333333334], [143.0, 33.64583333333333], [142.0, 24.69230769230769], [141.0, 27.62222222222222], [140.0, 17.5625], [137.0, 57.0], [148.0, 378.5], [150.0, 922.1428571428571], [151.0, 139.57936507936512], [149.0, 22.0], [147.0, 26.891891891891888], [146.0, 25.506493506493502], [145.0, 21.29268292682927], [144.0, 24.645161290322577], [152.0, 85.22007722007716], [153.0, 83.04787234042556], [154.0, 1344.275862068966], [155.0, 1058.92], [156.0, 144.625], [157.0, 295.4666666666667], [158.0, 407.51515151515144], [159.0, 550.5294117647057], [160.0, 50.91909385113268], [161.0, 2402.3333333333335], [162.0, 270.2578616352199], [163.0, 601.939393939394], [164.0, 118.00000000000001], [165.0, 408.00000000000006], [167.0, 187.80392156862752], [166.0, 48.5], [168.0, 358.4500000000001], [169.0, 168.11971830985928], [170.0, 93.3589743589744], [171.0, 2284.9285714285706], [172.0, 134.34751773049638], [173.0, 452.8571428571429], [174.0, 440.6363636363636], [175.0, 418.6326530612246], [176.0, 67.84067796610167], [178.0, 705.0555555555555], [179.0, 432.95000000000016], [180.0, 37.65999999999999], [181.0, 494.1142857142857], [182.0, 68.44927536231882], [183.0, 29.72972972972973], [177.0, 118.76086956521742], [184.0, 41.95744680851063], [185.0, 59.08333333333335], [186.0, 150.73831775700938], [187.0, 46.75609756097563], [188.0, 181.84571428571428], [189.0, 154.0], [190.0, 86.08658008658011], [191.0, 93.30813953488375], [192.0, 70.77710843373494], [193.0, 86.63316582914571], [194.0, 47.32574031890657], [195.0, 51.67194570135747], [196.0, 39.51708074534159], [197.0, 24.3029315960912], [198.0, 21.610526315789475], [1.0, 34.1860465116279]], "isOverall": false, "label": "访问首页", "isController": false}, {"data": [[53.717041666666766, 57.2250083333331]], "isOverall": false, "label": "访问首页-Aggregated", "isController": false}, {"data": [[2.0, 15.083333333333332], [3.0, 18.909090909090907], [4.0, 16.444444444444446], [5.0, 16.9], [6.0, 14.999999999999998], [7.0, 26.46428571428571], [8.0, 60.58904109589039], [9.0, 13.581395348837207], [10.0, 13.636363636363635], [11.0, 13.78082191780822], [12.0, 13.342105263157897], [13.0, 13.738461538461536], [14.0, 13.644859813084112], [15.0, 13.417142857142858], [16.0, 14.509379509379505], [17.0, 14.55513918629551], [18.0, 15.164530180460456], [19.0, 15.856121851200905], [20.0, 16.52962962962964], [21.0, 17.069109772423037], [22.0, 17.44687716063607], [23.0, 18.992568370986874], [24.0, 19.267716535433042], [25.0, 21.288242730720594], [26.0, 18.089253187613835], [27.0, 16.846153846153836], [28.0, 17.646226415094333], [29.0, 17.268817204301072], [30.0, 15.65333333333334], [31.0, 17.404761904761884], [32.0, 15.93457943925234], [33.0, 18.17021276595745], [34.0, 24.510703363914384], [35.0, 73.65320665083131], [36.0, 27.459807073954963], [37.0, 31.153005464480884], [38.0, 19.91725105189342], [39.0, 20.62832800851968], [40.0, 27.662423625254593], [41.0, 22.92649098474337], [42.0, 20.892994611239462], [43.0, 23.611082340756052], [44.0, 27.564841498559062], [45.0, 27.340922358435538], [46.0, 35.559098405717336], [47.0, 33.23664479850048], [48.0, 32.882948986722496], [49.0, 47.58674546222041], [50.0, 29.904921700223678], [51.0, 32.265582655826535], [52.0, 33.24327233584495], [53.0, 34.45780346820808], [54.0, 30.99999999999999], [55.0, 33.464880521361245], [56.0, 33.44608131997643], [57.0, 61.41267021906456], [58.0, 26.297546012269894], [59.0, 23.598299681190223], [60.0, 21.299694189602427], [61.0, 24.155612244897952], [62.0, 36.026385224274414], [63.0, 18.920844327176795], [64.0, 28.076271186440685], [65.0, 18.23701298701296], [66.0, 15.42173913043478], [67.0, 22.043689320388356], [68.0, 25.292682926829254], [69.0, 35.98128342245989], [70.0, 81.30563798219582], [71.0, 24.152731326644364], [72.0, 18.717391304347824], [73.0, 17.56593406593408], [74.0, 40.54573170731707], [75.0, 24.773305084745758], [76.0, 105.83081570996973], [77.0, 59.69508196721314], [78.0, 56.46928746928743], [79.0, 75.79999999999991], [80.0, 26.132000000000016], [81.0, 31.810741687979522], [82.0, 24.8618951612903], [83.0, 19.464227642276462], [84.0, 32.98881239242683], [85.0, 27.55483870967739], [86.0, 26.336154776299875], [87.0, 22.904255319148906], [88.0, 30.333333333333332], [89.0, 87.69148936170212], [90.0, 32.09777777777779], [91.0, 22.733496332518342], [92.0, 21.75555555555554], [93.0, 28.117647058823536], [94.0, 28.90229885057472], [95.0, 31.337192474674367], [96.0, 24.997737556561066], [97.0, 30.679643146796412], [98.0, 28.458378378378352], [99.0, 36.624309392265204], [100.0, 36.630434782608674], [101.0, 51.20512820512821], [102.0, 51.853932584269685], [103.0, 108.29999999999998], [105.0, 57.72222222222222], [106.0, 284.0277777777777], [107.0, 80.73913043478255], [104.0, 25.0], [108.0, 87.83464566929132], [109.0, 38.4733542319749], [110.0, 57.60233918128652], [111.0, 59.04878048780489], [112.0, 195.54545454545456], [113.0, 190.3611111111111], [114.0, 76.22651933701664], [115.0, 21.711111111111105], [117.0, 577.0], [118.0, 184.77777777777783], [119.0, 26.891891891891895], [120.0, 127.33333333333333], [122.0, 151.90476190476187], [123.0, 20.5], [121.0, 26.09734513274337], [124.0, 212.9090909090909], [125.0, 77.79545454545456], [127.0, 591.6874999999999], [126.0, 26.90909090909091], [128.0, 639.4444444444445], [129.0, 1587.0], [130.0, 221.85714285714295], [131.0, 821.8461538461539], [132.0, 69.20338983050848], [134.0, 218.45833333333331], [133.0, 2072.0], [135.0, 39.89932885906038], [139.0, 397.87500000000006], [143.0, 46.27826086956521], [142.0, 29.931249999999995], [141.0, 45.62295081967215], [140.0, 23.482758620689655], [138.0, 46.81250000000001], [137.0, 63.45454545454546], [136.0, 51.92307692307692], [147.0, 123.59375], [148.0, 356.33333333333326], [150.0, 470.00000000000006], [151.0, 151.01041666666666], [149.0, 43.14999999999999], [146.0, 34.47619047619048], [145.0, 30.085714285714285], [144.0, 39.585365853658544], [152.0, 125.86507936507928], [153.0, 190.01304347826084], [154.0, 632.4081632653061], [155.0, 659.1250000000001], [156.0, 343.16216216216213], [157.0, 152.71111111111117], [158.0, 236.475], [159.0, 137.58695652173907], [160.0, 65.35365853658539], [161.0, 196.43333333333337], [162.0, 75.59055118110233], [163.0, 242.5555555555555], [164.0, 108.07843137254898], [165.0, 331.7368421052631], [167.0, 189.64634146341464], [166.0, 73.37142857142855], [168.0, 331.14285714285717], [169.0, 185.16949152542378], [170.0, 119.18181818181819], [171.0, 388.4117647058823], [172.0, 122.54014598540147], [174.0, 395.61538461538464], [175.0, 200.06521739130443], [173.0, 34.375], [176.0, 102.86821705426358], [178.0, 805.142857142857], [179.0, 358.8918918918918], [180.0, 347.44680851063833], [181.0, 386.7073170731707], [182.0, 82.65217391304347], [183.0, 65.86666666666666], [177.0, 82.8934010152284], [184.0, 71.38532110091745], [185.0, 51.47058823529414], [186.0, 148.80769230769232], [187.0, 62.81372549019611], [188.0, 126.93495934959348], [189.0, 122.98648648648657], [190.0, 106.0824175824175], [191.0, 87.8090185676392], [192.0, 102.85926928281464], [193.0, 88.90217391304347], [194.0, 63.309352517985594], [195.0, 54.10404624277454], [196.0, 45.01290322580644], [197.0, 49.569620253164565], [198.0, 35.91752577319587], [1.0, 22.744186046511626]], "isOverall": false, "label": "第二tab查询", "isController": false}, {"data": [[53.71455833333364, 31.665908333333586]], "isOverall": false, "label": "第二tab查询-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 198.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 146462.66666666666, "minX": 1.63145508E12, "maxY": 1085307.5666666667, "series": [{"data": [[1.6314552E12, 1085307.5666666667], [1.63145526E12, 529313.2666666667], [1.63145508E12, 905335.35], [1.63145514E12, 992438.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6314552E12, 300472.38333333336], [1.63145526E12, 146462.66666666666], [1.63145508E12, 251441.83333333334], [1.63145514E12, 274953.18333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145526E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 15.659996772631919, "minX": 1.63145508E12, "maxY": 130.20963721960706, "series": [{"data": [[1.6314552E12, 64.88911078127137], [1.63145526E12, 130.20963721960706], [1.63145508E12, 15.659996772631919], [1.63145514E12, 47.96858870373104]], "isOverall": false, "label": "访问首页", "isController": false}, {"data": [[1.6314552E12, 32.82218803972368], [1.63145526E12, 83.1095435684651], [1.63145508E12, 16.70896293426312], [1.63145514E12, 16.63672301383604]], "isOverall": false, "label": "第二tab查询", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145526E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 15.048216879135069, "minX": 1.63145508E12, "maxY": 79.2822130013835, "series": [{"data": [[1.6314552E12, 25.95115369045995], [1.63145526E12, 78.78665189698098], [1.63145508E12, 15.048216879135069], [1.63145514E12, 15.067069753723693]], "isOverall": false, "label": "访问首页", "isController": false}, {"data": [[1.6314552E12, 27.681266191709955], [1.63145526E12, 79.2822130013835], [1.63145508E12, 16.263108614232042], [1.63145514E12, 16.158834115113454]], "isOverall": false, "label": "第二tab查询", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145526E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.63145508E12, "maxY": 53.3983937967323, "series": [{"data": [[1.6314552E12, 38.33436783160167], [1.63145526E12, 53.3983937967323], [1.63145508E12, 0.5114087461674967], [1.63145514E12, 32.754549476478374]], "isOverall": false, "label": "访问首页", "isController": false}, {"data": [[1.6314552E12, 4.030737262521583], [1.63145526E12, 1.385228215767633], [1.63145508E12, 0.0], [1.63145514E12, 0.029235625571584583]], "isOverall": false, "label": "第二tab查询", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145526E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.63145508E12, "maxY": 10824.0, "series": [{"data": [[1.6314552E12, 314.0], [1.63145526E12, 10824.0], [1.63145508E12, 237.0], [1.63145514E12, 326.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6314552E12, 28.0], [1.63145526E12, 60.0], [1.63145508E12, 22.0], [1.63145514E12, 27.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6314552E12, 82.9900000000016], [1.63145526E12, 133.0], [1.63145508E12, 53.0], [1.63145514E12, 64.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6314552E12, 37.0], [1.63145526E12, 74.0], [1.63145508E12, 28.0], [1.63145514E12, 36.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6314552E12, 8.0], [1.63145526E12, 8.0], [1.63145508E12, 7.0], [1.63145514E12, 8.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6314552E12, 16.0], [1.63145526E12, 27.0], [1.63145508E12, 14.0], [1.63145514E12, 16.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145526E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11.5, "minX": 1.0, "maxY": 21063.0, "series": [{"data": [[2.0, 33.0], [10.0, 1752.0], [20.0, 21.5], [24.0, 11.5], [33.0, 17.0], [51.0, 2859.0], [53.0, 12.0], [57.0, 684.0], [67.0, 1318.0], [71.0, 51.0], [84.0, 13.0], [109.0, 12.0], [115.0, 734.0], [112.0, 14.0], [133.0, 18.0], [141.0, 913.0], [146.0, 13.0], [167.0, 13.0], [168.0, 13.0], [191.0, 13.0], [199.0, 13.0], [206.0, 845.5], [216.0, 636.0], [255.0, 12.0], [257.0, 194.0], [282.0, 91.0], [309.0, 340.0], [351.0, 13.0], [415.0, 136.0], [440.0, 13.0], [568.0, 55.0], [725.0, 38.0], [763.0, 13.0], [749.0, 30.0], [792.0, 46.0], [799.0, 63.0], [821.0, 94.0], [858.0, 13.0], [835.0, 61.0], [876.0, 13.0], [874.0, 19.0], [892.0, 19.0], [917.0, 18.0], [922.0, 15.0], [927.0, 16.0], [900.0, 13.0], [911.0, 13.0], [902.0, 14.0], [955.0, 14.0], [936.0, 13.0], [933.0, 85.0], [976.0, 14.0], [988.0, 16.0], [978.0, 14.0], [986.0, 13.0], [965.0, 16.0], [993.0, 16.0], [1014.0, 18.0], [1010.0, 14.0], [999.0, 13.0], [1005.0, 16.0], [1021.0, 28.0], [1000.0, 34.0], [1081.0, 14.0], [1068.0, 13.0], [1070.0, 34.0], [1065.0, 15.0], [1073.0, 15.0], [1053.0, 19.0], [1031.0, 33.0], [1056.0, 15.0], [1061.0, 15.0], [1047.0, 14.0], [1045.0, 15.0], [1043.0, 14.0], [1087.0, 13.0], [1136.0, 16.0], [1098.0, 14.0], [1103.0, 15.0], [1130.0, 15.0], [1133.0, 21.0], [1135.0, 30.0], [1111.0, 22.0], [1104.0, 23.0], [1105.0, 27.0], [1115.0, 14.0], [1116.0, 16.0], [1126.0, 19.0], [1147.0, 17.0], [1124.0, 34.0], [1140.0, 20.0], [1138.0, 16.0], [1143.0, 17.0], [1117.0, 14.0], [1119.0, 15.0], [1097.0, 19.0], [1185.0, 14.0], [1162.0, 14.0], [1215.0, 19.0], [1184.0, 15.0], [1212.0, 15.0], [1207.0, 13.0], [1209.0, 18.0], [1210.0, 13.0], [1183.0, 14.0], [1182.0, 16.0], [1177.0, 14.0], [1168.0, 15.0], [1176.0, 17.0], [1186.0, 14.0], [1187.0, 29.0], [1198.0, 14.0], [1195.0, 15.0], [1197.0, 14.0], [1155.0, 16.0], [1161.0, 13.0], [1156.0, 21.0], [1191.0, 16.0], [1204.0, 15.0], [1203.0, 15.0], [1202.0, 17.0], [1163.0, 15.0], [1201.0, 19.0], [1266.0, 15.0], [1246.0, 13.0], [1220.0, 13.0], [1244.0, 13.0], [1242.0, 14.0], [1235.0, 15.0], [1240.0, 15.0], [1245.0, 13.0], [1255.0, 16.0], [1256.0, 16.0], [1248.0, 18.0], [1269.0, 13.0], [1249.0, 14.0], [1253.0, 14.0], [1254.0, 14.0], [1247.0, 14.0], [1217.0, 17.0], [1223.0, 14.0], [1224.0, 14.0], [1230.0, 15.0], [1226.0, 15.0], [1228.0, 15.0], [1290.0, 15.0], [1284.0, 13.0], [1283.0, 16.0], [1312.0, 14.0], [1313.0, 28.0], [1291.0, 16.0], [1292.0, 32.0], [1303.0, 14.0], [1296.0, 14.0], [1304.0, 14.0], [1282.0, 33.0], [1335.0, 17.0], [1340.0, 19.0], [1342.0, 18.0], [1361.0, 18.0], [1383.0, 15.0], [1374.0, 14.0], [1399.0, 20.0], [1350.0, 17.0], [1423.0, 16.0], [1409.0, 24.0], [1509.0, 16.0], [1492.0, 22.0], [1500.0, 28.0], [1484.0, 15.0], [1493.0, 16.0], [1592.0, 19.0], [1584.0, 17.0], [1548.0, 24.0], [1632.0, 15.0], [1603.0, 21.0], [1611.0, 22.0], [1674.0, 20.0], [1693.0, 16.0], [1737.0, 19.0], [1822.0, 21.0], [1874.0, 21.0], [2754.0, 48.0], [2826.0, 40.0], [3229.0, 42.0], [3399.0, 21.0], [3793.0, 34.0], [3758.0, 27.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[792.0, 21039.0], [876.0, 21045.0], [892.0, 21037.0], [927.0, 21047.0], [900.0, 21047.0], [911.0, 21039.0], [902.0, 21046.0], [999.0, 21033.0], [1005.0, 21032.0], [1021.0, 21062.5], [1014.0, 21050.0], [1061.0, 21035.5], [1070.0, 21054.0], [1104.0, 21042.0], [1143.0, 21047.0], [1138.0, 21052.0], [1097.0, 21030.0], [1202.0, 21042.0], [1176.0, 21022.0], [1155.0, 21041.0], [1184.0, 21044.0], [1201.0, 21045.5], [1240.0, 21050.0], [1217.0, 21013.5], [1291.0, 21041.5], [1335.0, 21042.0], [1342.0, 21048.0], [1283.0, 21032.0], [1361.0, 21028.5], [1399.0, 21047.0], [1350.0, 21063.0], [1423.0, 21034.0], [1509.0, 21042.0], [1492.0, 21034.0], [1592.0, 21029.0], [1603.0, 21036.0], [1611.0, 21032.0], [1674.0, 21044.0], [1693.0, 21043.0], [1822.0, 21046.0], [1874.0, 21057.5], [10.0, 21036.0], [3399.0, 21027.0], [53.0, 21026.0], [71.0, 21040.5], [112.0, 21050.0], [133.0, 21047.0], [141.0, 21046.0], [146.0, 21046.5], [167.0, 21035.0], [191.0, 21030.0], [216.0, 21041.0], [255.0, 21028.0], [1.0, 21031.0], [351.0, 21041.5], [440.0, 21046.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3793.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 2835.0, "series": [{"data": [[2.0, 33.0], [10.0, 1752.0], [20.0, 21.0], [24.0, 11.0], [33.0, 17.0], [51.0, 2835.0], [53.0, 12.0], [57.0, 684.0], [67.0, 1301.0], [71.0, 51.0], [84.0, 13.0], [109.0, 12.0], [115.0, 707.0], [112.0, 14.0], [133.0, 17.5], [141.0, 913.0], [146.0, 13.0], [167.0, 13.0], [168.0, 13.0], [191.0, 13.0], [199.0, 13.0], [206.0, 842.5], [216.0, 630.0], [255.0, 12.0], [257.0, 185.0], [282.0, 87.5], [309.0, 335.0], [351.0, 13.0], [415.0, 133.0], [440.0, 13.0], [568.0, 53.0], [725.0, 36.0], [763.0, 12.0], [749.0, 29.0], [792.0, 43.0], [799.0, 57.0], [821.0, 92.0], [858.0, 13.0], [835.0, 57.0], [876.0, 13.0], [874.0, 18.0], [892.0, 18.0], [917.0, 17.0], [922.0, 15.0], [927.0, 15.0], [900.0, 13.0], [911.0, 13.0], [902.0, 14.0], [955.0, 13.0], [936.0, 13.0], [933.0, 81.0], [976.0, 13.0], [988.0, 15.0], [978.0, 14.0], [986.0, 13.0], [965.0, 15.0], [993.0, 15.0], [1014.0, 18.0], [1010.0, 14.0], [999.0, 13.0], [1005.0, 15.0], [1021.0, 27.0], [1000.0, 31.0], [1081.0, 14.0], [1068.0, 13.0], [1070.0, 32.0], [1065.0, 14.0], [1073.0, 15.0], [1053.0, 18.0], [1031.0, 32.0], [1056.0, 14.0], [1061.0, 14.0], [1047.0, 14.0], [1045.0, 14.0], [1043.0, 14.0], [1087.0, 13.0], [1136.0, 16.0], [1098.0, 14.0], [1103.0, 15.0], [1130.0, 15.0], [1133.0, 19.0], [1135.0, 29.0], [1111.0, 20.0], [1104.0, 22.0], [1105.0, 26.0], [1115.0, 14.0], [1116.0, 16.0], [1126.0, 18.0], [1147.0, 16.0], [1124.0, 33.0], [1140.0, 19.0], [1138.0, 15.0], [1143.0, 16.0], [1117.0, 13.0], [1119.0, 14.0], [1097.0, 18.0], [1185.0, 13.0], [1162.0, 13.0], [1215.0, 18.0], [1184.0, 14.0], [1212.0, 14.0], [1207.0, 13.0], [1209.0, 17.0], [1210.0, 13.0], [1183.0, 13.0], [1182.0, 15.0], [1177.0, 13.0], [1168.0, 14.0], [1176.0, 16.0], [1186.0, 13.0], [1187.0, 28.0], [1198.0, 13.0], [1195.0, 14.0], [1197.0, 13.0], [1155.0, 15.0], [1161.0, 13.0], [1156.0, 20.0], [1191.0, 15.0], [1204.0, 15.0], [1203.0, 14.0], [1202.0, 16.0], [1163.0, 14.0], [1201.0, 18.0], [1266.0, 15.0], [1246.0, 13.0], [1220.0, 13.0], [1244.0, 13.0], [1242.0, 13.0], [1235.0, 14.0], [1240.0, 15.0], [1245.0, 13.0], [1255.0, 15.0], [1256.0, 15.0], [1248.0, 17.0], [1269.0, 13.0], [1249.0, 14.0], [1253.0, 14.0], [1254.0, 14.0], [1247.0, 13.0], [1217.0, 16.0], [1223.0, 14.0], [1224.0, 14.0], [1230.0, 15.0], [1226.0, 14.0], [1228.0, 15.0], [1290.0, 15.0], [1284.0, 13.0], [1283.0, 15.0], [1312.0, 13.0], [1313.0, 27.0], [1291.0, 15.0], [1292.0, 30.0], [1303.0, 13.0], [1296.0, 13.0], [1304.0, 14.0], [1282.0, 31.0], [1335.0, 16.0], [1340.0, 18.0], [1342.0, 16.0], [1361.0, 17.0], [1383.0, 15.0], [1374.0, 14.0], [1399.0, 18.0], [1350.0, 16.0], [1423.0, 15.0], [1409.0, 23.0], [1509.0, 16.0], [1492.0, 20.0], [1500.0, 26.0], [1484.0, 14.0], [1493.0, 15.0], [1592.0, 18.0], [1584.0, 16.0], [1548.0, 22.0], [1632.0, 14.0], [1603.0, 20.0], [1611.0, 21.0], [1674.0, 19.0], [1693.0, 15.0], [1737.0, 17.0], [1822.0, 20.0], [1874.0, 19.0], [2754.0, 44.0], [2826.0, 36.0], [3229.0, 36.0], [3399.0, 18.0], [3793.0, 29.0], [3758.0, 23.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[792.0, 0.0], [876.0, 0.0], [892.0, 0.0], [927.0, 0.0], [900.0, 0.0], [911.0, 0.0], [902.0, 0.0], [999.0, 0.0], [1005.0, 0.0], [1021.0, 0.0], [1014.0, 0.0], [1061.0, 0.0], [1070.0, 0.0], [1104.0, 0.0], [1143.0, 0.0], [1138.0, 0.0], [1097.0, 0.0], [1202.0, 0.0], [1176.0, 0.0], [1155.0, 0.0], [1184.0, 0.0], [1201.0, 0.0], [1240.0, 0.0], [1217.0, 0.0], [1291.0, 0.0], [1335.0, 0.0], [1342.0, 0.0], [1283.0, 0.0], [1361.0, 0.0], [1399.0, 0.0], [1350.0, 0.0], [1423.0, 0.0], [1509.0, 0.0], [1492.0, 0.0], [1592.0, 0.0], [1603.0, 0.0], [1611.0, 0.0], [1674.0, 0.0], [1693.0, 0.0], [1822.0, 0.0], [1874.0, 0.0], [10.0, 0.0], [3399.0, 0.0], [53.0, 0.0], [71.0, 0.0], [112.0, 0.0], [133.0, 0.0], [141.0, 0.0], [146.0, 0.0], [167.0, 0.0], [191.0, 0.0], [216.0, 0.0], [255.0, 0.0], [1.0, 0.0], [351.0, 0.0], [440.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3793.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 601.4333333333333, "minX": 1.63145508E12, "maxY": 1234.6166666666666, "series": [{"data": [[1.6314552E12, 1234.6166666666666], [1.63145526E12, 601.4333333333333], [1.63145508E12, 1032.9333333333334], [1.63145514E12, 1131.0166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145526E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6833333333333333, "minX": 1.63145508E12, "maxY": 1233.9666666666667, "series": [{"data": [[1.6314552E12, 1233.9666666666667], [1.63145526E12, 601.4833333333333], [1.63145508E12, 1032.6166666666666], [1.63145514E12, 1129.1666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6314552E12, 1.2166666666666666], [1.63145526E12, 0.6833333333333333], [1.63145514E12, 0.8666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145526E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63145508E12, "maxY": 617.4833333333333, "series": [{"data": [[1.6314552E12, 0.11666666666666667], [1.63145526E12, 0.016666666666666666]], "isOverall": false, "label": "第二tab查询-failure", "isController": false}, {"data": [[1.6314552E12, 1.1], [1.63145526E12, 0.6666666666666666], [1.63145514E12, 0.8666666666666667]], "isOverall": false, "label": "访问首页-failure", "isController": false}, {"data": [[1.6314552E12, 616.4833333333333], [1.63145526E12, 300.25], [1.63145508E12, 516.4166666666666], [1.63145514E12, 564.2166666666667]], "isOverall": false, "label": "访问首页-success", "isController": false}, {"data": [[1.6314552E12, 617.4833333333333], [1.63145526E12, 301.23333333333335], [1.63145508E12, 516.2], [1.63145514E12, 564.95]], "isOverall": false, "label": "第二tab查询-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145526E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6833333333333333, "minX": 1.63145508E12, "maxY": 1233.9666666666667, "series": [{"data": [[1.6314552E12, 1233.9666666666667], [1.63145526E12, 601.4833333333333], [1.63145508E12, 1032.6166666666666], [1.63145514E12, 1129.1666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6314552E12, 1.2166666666666666], [1.63145526E12, 0.6833333333333333], [1.63145514E12, 0.8666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145526E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

