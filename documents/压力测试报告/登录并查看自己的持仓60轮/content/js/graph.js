/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 21027.0, "series": [{"data": [[0.0, 122.0], [0.1, 122.0], [0.2, 124.0], [0.3, 124.0], [0.4, 125.0], [0.5, 126.0], [0.6, 126.0], [0.7, 126.0], [0.8, 127.0], [0.9, 127.0], [1.0, 127.0], [1.1, 127.0], [1.2, 127.0], [1.3, 128.0], [1.4, 128.0], [1.5, 128.0], [1.6, 128.0], [1.7, 129.0], [1.8, 129.0], [1.9, 130.0], [2.0, 130.0], [2.1, 130.0], [2.2, 130.0], [2.3, 130.0], [2.4, 130.0], [2.5, 130.0], [2.6, 131.0], [2.7, 131.0], [2.8, 131.0], [2.9, 132.0], [3.0, 132.0], [3.1, 132.0], [3.2, 132.0], [3.3, 133.0], [3.4, 133.0], [3.5, 133.0], [3.6, 134.0], [3.7, 134.0], [3.8, 134.0], [3.9, 135.0], [4.0, 135.0], [4.1, 136.0], [4.2, 136.0], [4.3, 136.0], [4.4, 136.0], [4.5, 137.0], [4.6, 137.0], [4.7, 138.0], [4.8, 138.0], [4.9, 138.0], [5.0, 138.0], [5.1, 139.0], [5.2, 139.0], [5.3, 140.0], [5.4, 141.0], [5.5, 141.0], [5.6, 141.0], [5.7, 141.0], [5.8, 142.0], [5.9, 142.0], [6.0, 142.0], [6.1, 143.0], [6.2, 143.0], [6.3, 143.0], [6.4, 144.0], [6.5, 144.0], [6.6, 144.0], [6.7, 144.0], [6.8, 144.0], [6.9, 145.0], [7.0, 145.0], [7.1, 145.0], [7.2, 146.0], [7.3, 147.0], [7.4, 147.0], [7.5, 147.0], [7.6, 147.0], [7.7, 148.0], [7.8, 148.0], [7.9, 148.0], [8.0, 148.0], [8.1, 149.0], [8.2, 149.0], [8.3, 149.0], [8.4, 149.0], [8.5, 149.0], [8.6, 149.0], [8.7, 150.0], [8.8, 150.0], [8.9, 151.0], [9.0, 151.0], [9.1, 152.0], [9.2, 152.0], [9.3, 152.0], [9.4, 152.0], [9.5, 153.0], [9.6, 153.0], [9.7, 153.0], [9.8, 153.0], [9.9, 153.0], [10.0, 153.0], [10.1, 154.0], [10.2, 154.0], [10.3, 154.0], [10.4, 155.0], [10.5, 155.0], [10.6, 155.0], [10.7, 156.0], [10.8, 156.0], [10.9, 156.0], [11.0, 156.0], [11.1, 156.0], [11.2, 157.0], [11.3, 157.0], [11.4, 157.0], [11.5, 157.0], [11.6, 157.0], [11.7, 157.0], [11.8, 158.0], [11.9, 158.0], [12.0, 158.0], [12.1, 158.0], [12.2, 159.0], [12.3, 159.0], [12.4, 159.0], [12.5, 159.0], [12.6, 159.0], [12.7, 160.0], [12.8, 160.0], [12.9, 160.0], [13.0, 160.0], [13.1, 160.0], [13.2, 161.0], [13.3, 161.0], [13.4, 161.0], [13.5, 161.0], [13.6, 162.0], [13.7, 162.0], [13.8, 162.0], [13.9, 162.0], [14.0, 162.0], [14.1, 163.0], [14.2, 163.0], [14.3, 163.0], [14.4, 163.0], [14.5, 163.0], [14.6, 164.0], [14.7, 164.0], [14.8, 164.0], [14.9, 165.0], [15.0, 165.0], [15.1, 165.0], [15.2, 165.0], [15.3, 165.0], [15.4, 165.0], [15.5, 166.0], [15.6, 166.0], [15.7, 166.0], [15.8, 166.0], [15.9, 166.0], [16.0, 167.0], [16.1, 167.0], [16.2, 167.0], [16.3, 168.0], [16.4, 168.0], [16.5, 168.0], [16.6, 168.0], [16.7, 168.0], [16.8, 168.0], [16.9, 169.0], [17.0, 169.0], [17.1, 169.0], [17.2, 169.0], [17.3, 170.0], [17.4, 170.0], [17.5, 170.0], [17.6, 170.0], [17.7, 170.0], [17.8, 170.0], [17.9, 170.0], [18.0, 171.0], [18.1, 171.0], [18.2, 171.0], [18.3, 171.0], [18.4, 171.0], [18.5, 171.0], [18.6, 172.0], [18.7, 172.0], [18.8, 172.0], [18.9, 172.0], [19.0, 172.0], [19.1, 173.0], [19.2, 173.0], [19.3, 173.0], [19.4, 173.0], [19.5, 173.0], [19.6, 174.0], [19.7, 174.0], [19.8, 174.0], [19.9, 174.0], [20.0, 174.0], [20.1, 174.0], [20.2, 174.0], [20.3, 175.0], [20.4, 175.0], [20.5, 175.0], [20.6, 175.0], [20.7, 175.0], [20.8, 176.0], [20.9, 176.0], [21.0, 176.0], [21.1, 176.0], [21.2, 176.0], [21.3, 176.0], [21.4, 177.0], [21.5, 177.0], [21.6, 177.0], [21.7, 177.0], [21.8, 177.0], [21.9, 177.0], [22.0, 177.0], [22.1, 177.0], [22.2, 177.0], [22.3, 178.0], [22.4, 178.0], [22.5, 178.0], [22.6, 178.0], [22.7, 179.0], [22.8, 179.0], [22.9, 179.0], [23.0, 179.0], [23.1, 179.0], [23.2, 179.0], [23.3, 179.0], [23.4, 179.0], [23.5, 179.0], [23.6, 179.0], [23.7, 180.0], [23.8, 180.0], [23.9, 180.0], [24.0, 180.0], [24.1, 180.0], [24.2, 180.0], [24.3, 181.0], [24.4, 181.0], [24.5, 181.0], [24.6, 181.0], [24.7, 181.0], [24.8, 181.0], [24.9, 181.0], [25.0, 182.0], [25.1, 182.0], [25.2, 182.0], [25.3, 182.0], [25.4, 183.0], [25.5, 183.0], [25.6, 183.0], [25.7, 183.0], [25.8, 183.0], [25.9, 184.0], [26.0, 184.0], [26.1, 185.0], [26.2, 185.0], [26.3, 185.0], [26.4, 185.0], [26.5, 185.0], [26.6, 186.0], [26.7, 186.0], [26.8, 186.0], [26.9, 186.0], [27.0, 187.0], [27.1, 187.0], [27.2, 187.0], [27.3, 187.0], [27.4, 188.0], [27.5, 188.0], [27.6, 188.0], [27.7, 188.0], [27.8, 188.0], [27.9, 189.0], [28.0, 189.0], [28.1, 189.0], [28.2, 189.0], [28.3, 189.0], [28.4, 189.0], [28.5, 190.0], [28.6, 190.0], [28.7, 190.0], [28.8, 190.0], [28.9, 190.0], [29.0, 190.0], [29.1, 191.0], [29.2, 191.0], [29.3, 191.0], [29.4, 191.0], [29.5, 191.0], [29.6, 191.0], [29.7, 191.0], [29.8, 191.0], [29.9, 191.0], [30.0, 191.0], [30.1, 192.0], [30.2, 192.0], [30.3, 192.0], [30.4, 192.0], [30.5, 192.0], [30.6, 193.0], [30.7, 193.0], [30.8, 193.0], [30.9, 193.0], [31.0, 194.0], [31.1, 194.0], [31.2, 194.0], [31.3, 195.0], [31.4, 195.0], [31.5, 195.0], [31.6, 195.0], [31.7, 195.0], [31.8, 195.0], [31.9, 196.0], [32.0, 196.0], [32.1, 197.0], [32.2, 197.0], [32.3, 197.0], [32.4, 197.0], [32.5, 197.0], [32.6, 197.0], [32.7, 198.0], [32.8, 198.0], [32.9, 198.0], [33.0, 198.0], [33.1, 198.0], [33.2, 198.0], [33.3, 198.0], [33.4, 198.0], [33.5, 199.0], [33.6, 199.0], [33.7, 199.0], [33.8, 200.0], [33.9, 200.0], [34.0, 200.0], [34.1, 200.0], [34.2, 201.0], [34.3, 201.0], [34.4, 201.0], [34.5, 201.0], [34.6, 201.0], [34.7, 202.0], [34.8, 202.0], [34.9, 202.0], [35.0, 203.0], [35.1, 204.0], [35.2, 204.0], [35.3, 204.0], [35.4, 204.0], [35.5, 205.0], [35.6, 205.0], [35.7, 205.0], [35.8, 205.0], [35.9, 206.0], [36.0, 206.0], [36.1, 206.0], [36.2, 206.0], [36.3, 206.0], [36.4, 207.0], [36.5, 207.0], [36.6, 207.0], [36.7, 207.0], [36.8, 207.0], [36.9, 208.0], [37.0, 208.0], [37.1, 208.0], [37.2, 208.0], [37.3, 209.0], [37.4, 209.0], [37.5, 209.0], [37.6, 209.0], [37.7, 210.0], [37.8, 210.0], [37.9, 210.0], [38.0, 211.0], [38.1, 211.0], [38.2, 211.0], [38.3, 211.0], [38.4, 212.0], [38.5, 212.0], [38.6, 212.0], [38.7, 212.0], [38.8, 212.0], [38.9, 213.0], [39.0, 213.0], [39.1, 213.0], [39.2, 213.0], [39.3, 213.0], [39.4, 214.0], [39.5, 214.0], [39.6, 214.0], [39.7, 214.0], [39.8, 214.0], [39.9, 215.0], [40.0, 215.0], [40.1, 215.0], [40.2, 215.0], [40.3, 215.0], [40.4, 216.0], [40.5, 216.0], [40.6, 216.0], [40.7, 217.0], [40.8, 217.0], [40.9, 217.0], [41.0, 217.0], [41.1, 218.0], [41.2, 218.0], [41.3, 218.0], [41.4, 218.0], [41.5, 219.0], [41.6, 219.0], [41.7, 219.0], [41.8, 219.0], [41.9, 219.0], [42.0, 220.0], [42.1, 220.0], [42.2, 220.0], [42.3, 220.0], [42.4, 220.0], [42.5, 220.0], [42.6, 220.0], [42.7, 220.0], [42.8, 220.0], [42.9, 220.0], [43.0, 221.0], [43.1, 221.0], [43.2, 221.0], [43.3, 221.0], [43.4, 221.0], [43.5, 221.0], [43.6, 222.0], [43.7, 222.0], [43.8, 222.0], [43.9, 222.0], [44.0, 222.0], [44.1, 223.0], [44.2, 223.0], [44.3, 223.0], [44.4, 223.0], [44.5, 223.0], [44.6, 224.0], [44.7, 224.0], [44.8, 224.0], [44.9, 224.0], [45.0, 225.0], [45.1, 225.0], [45.2, 225.0], [45.3, 225.0], [45.4, 226.0], [45.5, 226.0], [45.6, 226.0], [45.7, 226.0], [45.8, 227.0], [45.9, 227.0], [46.0, 227.0], [46.1, 227.0], [46.2, 228.0], [46.3, 228.0], [46.4, 229.0], [46.5, 229.0], [46.6, 229.0], [46.7, 229.0], [46.8, 229.0], [46.9, 229.0], [47.0, 229.0], [47.1, 229.0], [47.2, 230.0], [47.3, 230.0], [47.4, 230.0], [47.5, 230.0], [47.6, 231.0], [47.7, 231.0], [47.8, 231.0], [47.9, 231.0], [48.0, 232.0], [48.1, 232.0], [48.2, 233.0], [48.3, 233.0], [48.4, 233.0], [48.5, 233.0], [48.6, 234.0], [48.7, 234.0], [48.8, 234.0], [48.9, 235.0], [49.0, 235.0], [49.1, 235.0], [49.2, 235.0], [49.3, 235.0], [49.4, 236.0], [49.5, 236.0], [49.6, 236.0], [49.7, 237.0], [49.8, 237.0], [49.9, 237.0], [50.0, 238.0], [50.1, 238.0], [50.2, 238.0], [50.3, 238.0], [50.4, 239.0], [50.5, 239.0], [50.6, 239.0], [50.7, 240.0], [50.8, 240.0], [50.9, 241.0], [51.0, 241.0], [51.1, 242.0], [51.2, 242.0], [51.3, 242.0], [51.4, 242.0], [51.5, 243.0], [51.6, 243.0], [51.7, 243.0], [51.8, 243.0], [51.9, 244.0], [52.0, 244.0], [52.1, 244.0], [52.2, 244.0], [52.3, 244.0], [52.4, 245.0], [52.5, 245.0], [52.6, 245.0], [52.7, 246.0], [52.8, 246.0], [52.9, 246.0], [53.0, 246.0], [53.1, 246.0], [53.2, 247.0], [53.3, 247.0], [53.4, 247.0], [53.5, 247.0], [53.6, 248.0], [53.7, 248.0], [53.8, 248.0], [53.9, 249.0], [54.0, 249.0], [54.1, 249.0], [54.2, 249.0], [54.3, 250.0], [54.4, 250.0], [54.5, 250.0], [54.6, 250.0], [54.7, 250.0], [54.8, 250.0], [54.9, 250.0], [55.0, 251.0], [55.1, 251.0], [55.2, 252.0], [55.3, 252.0], [55.4, 253.0], [55.5, 253.0], [55.6, 253.0], [55.7, 253.0], [55.8, 254.0], [55.9, 255.0], [56.0, 255.0], [56.1, 255.0], [56.2, 255.0], [56.3, 255.0], [56.4, 255.0], [56.5, 256.0], [56.6, 256.0], [56.7, 257.0], [56.8, 257.0], [56.9, 257.0], [57.0, 257.0], [57.1, 257.0], [57.2, 258.0], [57.3, 259.0], [57.4, 259.0], [57.5, 259.0], [57.6, 259.0], [57.7, 260.0], [57.8, 260.0], [57.9, 260.0], [58.0, 261.0], [58.1, 261.0], [58.2, 261.0], [58.3, 261.0], [58.4, 262.0], [58.5, 262.0], [58.6, 263.0], [58.7, 263.0], [58.8, 263.0], [58.9, 264.0], [59.0, 264.0], [59.1, 264.0], [59.2, 264.0], [59.3, 265.0], [59.4, 265.0], [59.5, 265.0], [59.6, 266.0], [59.7, 266.0], [59.8, 267.0], [59.9, 267.0], [60.0, 268.0], [60.1, 268.0], [60.2, 268.0], [60.3, 268.0], [60.4, 269.0], [60.5, 269.0], [60.6, 269.0], [60.7, 269.0], [60.8, 269.0], [60.9, 270.0], [61.0, 270.0], [61.1, 271.0], [61.2, 271.0], [61.3, 271.0], [61.4, 272.0], [61.5, 272.0], [61.6, 272.0], [61.7, 272.0], [61.8, 272.0], [61.9, 273.0], [62.0, 273.0], [62.1, 273.0], [62.2, 273.0], [62.3, 274.0], [62.4, 275.0], [62.5, 275.0], [62.6, 275.0], [62.7, 275.0], [62.8, 276.0], [62.9, 276.0], [63.0, 276.0], [63.1, 277.0], [63.2, 278.0], [63.3, 278.0], [63.4, 278.0], [63.5, 278.0], [63.6, 278.0], [63.7, 280.0], [63.8, 281.0], [63.9, 281.0], [64.0, 282.0], [64.1, 282.0], [64.2, 282.0], [64.3, 282.0], [64.4, 283.0], [64.5, 283.0], [64.6, 283.0], [64.7, 284.0], [64.8, 284.0], [64.9, 285.0], [65.0, 286.0], [65.1, 286.0], [65.2, 286.0], [65.3, 287.0], [65.4, 288.0], [65.5, 288.0], [65.6, 288.0], [65.7, 289.0], [65.8, 289.0], [65.9, 290.0], [66.0, 291.0], [66.1, 291.0], [66.2, 291.0], [66.3, 291.0], [66.4, 291.0], [66.5, 292.0], [66.6, 292.0], [66.7, 293.0], [66.8, 294.0], [66.9, 295.0], [67.0, 295.0], [67.1, 296.0], [67.2, 297.0], [67.3, 297.0], [67.4, 298.0], [67.5, 298.0], [67.6, 298.0], [67.7, 299.0], [67.8, 301.0], [67.9, 301.0], [68.0, 301.0], [68.1, 302.0], [68.2, 302.0], [68.3, 303.0], [68.4, 303.0], [68.5, 303.0], [68.6, 304.0], [68.7, 304.0], [68.8, 305.0], [68.9, 305.0], [69.0, 306.0], [69.1, 306.0], [69.2, 306.0], [69.3, 307.0], [69.4, 308.0], [69.5, 309.0], [69.6, 309.0], [69.7, 310.0], [69.8, 310.0], [69.9, 311.0], [70.0, 311.0], [70.1, 312.0], [70.2, 312.0], [70.3, 313.0], [70.4, 314.0], [70.5, 314.0], [70.6, 315.0], [70.7, 315.0], [70.8, 316.0], [70.9, 316.0], [71.0, 317.0], [71.1, 317.0], [71.2, 317.0], [71.3, 318.0], [71.4, 318.0], [71.5, 319.0], [71.6, 320.0], [71.7, 320.0], [71.8, 322.0], [71.9, 322.0], [72.0, 322.0], [72.1, 323.0], [72.2, 323.0], [72.3, 324.0], [72.4, 324.0], [72.5, 325.0], [72.6, 325.0], [72.7, 325.0], [72.8, 326.0], [72.9, 326.0], [73.0, 327.0], [73.1, 327.0], [73.2, 327.0], [73.3, 327.0], [73.4, 328.0], [73.5, 329.0], [73.6, 330.0], [73.7, 330.0], [73.8, 330.0], [73.9, 330.0], [74.0, 331.0], [74.1, 333.0], [74.2, 334.0], [74.3, 335.0], [74.4, 335.0], [74.5, 335.0], [74.6, 336.0], [74.7, 336.0], [74.8, 337.0], [74.9, 337.0], [75.0, 337.0], [75.1, 337.0], [75.2, 338.0], [75.3, 338.0], [75.4, 339.0], [75.5, 339.0], [75.6, 340.0], [75.7, 340.0], [75.8, 340.0], [75.9, 340.0], [76.0, 341.0], [76.1, 341.0], [76.2, 341.0], [76.3, 342.0], [76.4, 343.0], [76.5, 344.0], [76.6, 345.0], [76.7, 346.0], [76.8, 346.0], [76.9, 346.0], [77.0, 346.0], [77.1, 347.0], [77.2, 347.0], [77.3, 349.0], [77.4, 349.0], [77.5, 349.0], [77.6, 350.0], [77.7, 351.0], [77.8, 352.0], [77.9, 352.0], [78.0, 353.0], [78.1, 354.0], [78.2, 354.0], [78.3, 355.0], [78.4, 356.0], [78.5, 356.0], [78.6, 358.0], [78.7, 358.0], [78.8, 359.0], [78.9, 359.0], [79.0, 360.0], [79.1, 360.0], [79.2, 362.0], [79.3, 362.0], [79.4, 363.0], [79.5, 363.0], [79.6, 363.0], [79.7, 363.0], [79.8, 364.0], [79.9, 366.0], [80.0, 367.0], [80.1, 368.0], [80.2, 370.0], [80.3, 370.0], [80.4, 370.0], [80.5, 371.0], [80.6, 372.0], [80.7, 372.0], [80.8, 373.0], [80.9, 374.0], [81.0, 374.0], [81.1, 374.0], [81.2, 375.0], [81.3, 375.0], [81.4, 376.0], [81.5, 377.0], [81.6, 378.0], [81.7, 379.0], [81.8, 381.0], [81.9, 381.0], [82.0, 384.0], [82.1, 384.0], [82.2, 385.0], [82.3, 385.0], [82.4, 386.0], [82.5, 386.0], [82.6, 387.0], [82.7, 388.0], [82.8, 388.0], [82.9, 391.0], [83.0, 391.0], [83.1, 393.0], [83.2, 393.0], [83.3, 394.0], [83.4, 395.0], [83.5, 396.0], [83.6, 399.0], [83.7, 399.0], [83.8, 399.0], [83.9, 404.0], [84.0, 405.0], [84.1, 405.0], [84.2, 407.0], [84.3, 409.0], [84.4, 412.0], [84.5, 412.0], [84.6, 413.0], [84.7, 414.0], [84.8, 415.0], [84.9, 418.0], [85.0, 420.0], [85.1, 421.0], [85.2, 422.0], [85.3, 423.0], [85.4, 425.0], [85.5, 426.0], [85.6, 427.0], [85.7, 429.0], [85.8, 429.0], [85.9, 430.0], [86.0, 431.0], [86.1, 431.0], [86.2, 432.0], [86.3, 436.0], [86.4, 437.0], [86.5, 437.0], [86.6, 437.0], [86.7, 440.0], [86.8, 441.0], [86.9, 442.0], [87.0, 443.0], [87.1, 444.0], [87.2, 445.0], [87.3, 447.0], [87.4, 447.0], [87.5, 449.0], [87.6, 450.0], [87.7, 452.0], [87.8, 452.0], [87.9, 455.0], [88.0, 457.0], [88.1, 457.0], [88.2, 460.0], [88.3, 460.0], [88.4, 461.0], [88.5, 462.0], [88.6, 462.0], [88.7, 464.0], [88.8, 466.0], [88.9, 467.0], [89.0, 467.0], [89.1, 469.0], [89.2, 470.0], [89.3, 471.0], [89.4, 472.0], [89.5, 473.0], [89.6, 475.0], [89.7, 478.0], [89.8, 480.0], [89.9, 482.0], [90.0, 483.0], [90.1, 484.0], [90.2, 486.0], [90.3, 489.0], [90.4, 492.0], [90.5, 494.0], [90.6, 496.0], [90.7, 497.0], [90.8, 498.0], [90.9, 502.0], [91.0, 503.0], [91.1, 506.0], [91.2, 507.0], [91.3, 508.0], [91.4, 513.0], [91.5, 514.0], [91.6, 519.0], [91.7, 521.0], [91.8, 523.0], [91.9, 529.0], [92.0, 531.0], [92.1, 532.0], [92.2, 532.0], [92.3, 533.0], [92.4, 536.0], [92.5, 536.0], [92.6, 539.0], [92.7, 541.0], [92.8, 542.0], [92.9, 543.0], [93.0, 546.0], [93.1, 549.0], [93.2, 554.0], [93.3, 555.0], [93.4, 558.0], [93.5, 560.0], [93.6, 567.0], [93.7, 570.0], [93.8, 578.0], [93.9, 585.0], [94.0, 587.0], [94.1, 590.0], [94.2, 591.0], [94.3, 593.0], [94.4, 596.0], [94.5, 599.0], [94.6, 600.0], [94.7, 604.0], [94.8, 604.0], [94.9, 606.0], [95.0, 617.0], [95.1, 620.0], [95.2, 622.0], [95.3, 627.0], [95.4, 630.0], [95.5, 636.0], [95.6, 641.0], [95.7, 642.0], [95.8, 650.0], [95.9, 658.0], [96.0, 667.0], [96.1, 671.0], [96.2, 672.0], [96.3, 680.0], [96.4, 682.0], [96.5, 701.0], [96.6, 703.0], [96.7, 707.0], [96.8, 709.0], [96.9, 718.0], [97.0, 729.0], [97.1, 737.0], [97.2, 744.0], [97.3, 759.0], [97.4, 788.0], [97.5, 802.0], [97.6, 834.0], [97.7, 843.0], [97.8, 872.0], [97.9, 885.0], [98.0, 894.0], [98.1, 925.0], [98.2, 961.0], [98.3, 987.0], [98.4, 1033.0], [98.5, 1046.0], [98.6, 1139.0], [98.7, 1160.0], [98.8, 1184.0], [98.9, 1233.0], [99.0, 1260.0], [99.1, 1301.0], [99.2, 1355.0], [99.3, 1371.0], [99.4, 1409.0], [99.5, 1475.0], [99.6, 1554.0], [99.7, 1657.0], [99.8, 1713.0], [99.9, 2231.0]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[0.0, 8.0], [0.1, 9.0], [0.2, 10.0], [0.3, 10.0], [0.4, 10.0], [0.5, 10.0], [0.6, 11.0], [0.7, 11.0], [0.8, 11.0], [0.9, 11.0], [1.0, 11.0], [1.1, 11.0], [1.2, 12.0], [1.3, 12.0], [1.4, 12.0], [1.5, 12.0], [1.6, 12.0], [1.7, 12.0], [1.8, 12.0], [1.9, 12.0], [2.0, 12.0], [2.1, 13.0], [2.2, 13.0], [2.3, 13.0], [2.4, 13.0], [2.5, 13.0], [2.6, 13.0], [2.7, 13.0], [2.8, 13.0], [2.9, 13.0], [3.0, 14.0], [3.1, 14.0], [3.2, 14.0], [3.3, 14.0], [3.4, 14.0], [3.5, 14.0], [3.6, 14.0], [3.7, 14.0], [3.8, 14.0], [3.9, 14.0], [4.0, 15.0], [4.1, 15.0], [4.2, 15.0], [4.3, 15.0], [4.4, 15.0], [4.5, 15.0], [4.6, 15.0], [4.7, 15.0], [4.8, 16.0], [4.9, 16.0], [5.0, 16.0], [5.1, 16.0], [5.2, 16.0], [5.3, 16.0], [5.4, 16.0], [5.5, 16.0], [5.6, 16.0], [5.7, 17.0], [5.8, 17.0], [5.9, 17.0], [6.0, 17.0], [6.1, 17.0], [6.2, 17.0], [6.3, 17.0], [6.4, 17.0], [6.5, 18.0], [6.6, 18.0], [6.7, 18.0], [6.8, 18.0], [6.9, 18.0], [7.0, 18.0], [7.1, 18.0], [7.2, 18.0], [7.3, 19.0], [7.4, 19.0], [7.5, 19.0], [7.6, 19.0], [7.7, 19.0], [7.8, 19.0], [7.9, 19.0], [8.0, 19.0], [8.1, 19.0], [8.2, 20.0], [8.3, 20.0], [8.4, 20.0], [8.5, 20.0], [8.6, 20.0], [8.7, 20.0], [8.8, 20.0], [8.9, 20.0], [9.0, 21.0], [9.1, 21.0], [9.2, 21.0], [9.3, 21.0], [9.4, 21.0], [9.5, 21.0], [9.6, 21.0], [9.7, 21.0], [9.8, 21.0], [9.9, 22.0], [10.0, 22.0], [10.1, 22.0], [10.2, 22.0], [10.3, 22.0], [10.4, 22.0], [10.5, 22.0], [10.6, 22.0], [10.7, 22.0], [10.8, 23.0], [10.9, 23.0], [11.0, 23.0], [11.1, 23.0], [11.2, 23.0], [11.3, 23.0], [11.4, 23.0], [11.5, 23.0], [11.6, 23.0], [11.7, 23.0], [11.8, 24.0], [11.9, 24.0], [12.0, 24.0], [12.1, 24.0], [12.2, 24.0], [12.3, 24.0], [12.4, 24.0], [12.5, 24.0], [12.6, 24.0], [12.7, 25.0], [12.8, 25.0], [12.9, 25.0], [13.0, 25.0], [13.1, 25.0], [13.2, 25.0], [13.3, 25.0], [13.4, 25.0], [13.5, 25.0], [13.6, 25.0], [13.7, 26.0], [13.8, 26.0], [13.9, 26.0], [14.0, 26.0], [14.1, 26.0], [14.2, 26.0], [14.3, 26.0], [14.4, 26.0], [14.5, 26.0], [14.6, 26.0], [14.7, 27.0], [14.8, 27.0], [14.9, 27.0], [15.0, 27.0], [15.1, 27.0], [15.2, 27.0], [15.3, 27.0], [15.4, 27.0], [15.5, 27.0], [15.6, 27.0], [15.7, 27.0], [15.8, 28.0], [15.9, 28.0], [16.0, 28.0], [16.1, 28.0], [16.2, 28.0], [16.3, 28.0], [16.4, 28.0], [16.5, 28.0], [16.6, 28.0], [16.7, 28.0], [16.8, 28.0], [16.9, 29.0], [17.0, 29.0], [17.1, 29.0], [17.2, 29.0], [17.3, 29.0], [17.4, 29.0], [17.5, 29.0], [17.6, 29.0], [17.7, 29.0], [17.8, 29.0], [17.9, 29.0], [18.0, 29.0], [18.1, 30.0], [18.2, 30.0], [18.3, 30.0], [18.4, 30.0], [18.5, 30.0], [18.6, 30.0], [18.7, 30.0], [18.8, 30.0], [18.9, 30.0], [19.0, 30.0], [19.1, 30.0], [19.2, 30.0], [19.3, 30.0], [19.4, 31.0], [19.5, 31.0], [19.6, 31.0], [19.7, 31.0], [19.8, 31.0], [19.9, 31.0], [20.0, 31.0], [20.1, 31.0], [20.2, 31.0], [20.3, 31.0], [20.4, 31.0], [20.5, 31.0], [20.6, 31.0], [20.7, 31.0], [20.8, 32.0], [20.9, 32.0], [21.0, 32.0], [21.1, 32.0], [21.2, 32.0], [21.3, 32.0], [21.4, 32.0], [21.5, 32.0], [21.6, 32.0], [21.7, 32.0], [21.8, 32.0], [21.9, 32.0], [22.0, 33.0], [22.1, 33.0], [22.2, 33.0], [22.3, 33.0], [22.4, 33.0], [22.5, 33.0], [22.6, 33.0], [22.7, 33.0], [22.8, 33.0], [22.9, 33.0], [23.0, 33.0], [23.1, 33.0], [23.2, 33.0], [23.3, 34.0], [23.4, 34.0], [23.5, 34.0], [23.6, 34.0], [23.7, 34.0], [23.8, 34.0], [23.9, 34.0], [24.0, 34.0], [24.1, 34.0], [24.2, 34.0], [24.3, 34.0], [24.4, 35.0], [24.5, 35.0], [24.6, 35.0], [24.7, 35.0], [24.8, 35.0], [24.9, 35.0], [25.0, 35.0], [25.1, 35.0], [25.2, 35.0], [25.3, 35.0], [25.4, 35.0], [25.5, 35.0], [25.6, 36.0], [25.7, 36.0], [25.8, 36.0], [25.9, 36.0], [26.0, 36.0], [26.1, 36.0], [26.2, 36.0], [26.3, 36.0], [26.4, 36.0], [26.5, 36.0], [26.6, 36.0], [26.7, 37.0], [26.8, 37.0], [26.9, 37.0], [27.0, 37.0], [27.1, 37.0], [27.2, 37.0], [27.3, 37.0], [27.4, 37.0], [27.5, 37.0], [27.6, 37.0], [27.7, 37.0], [27.8, 37.0], [27.9, 38.0], [28.0, 38.0], [28.1, 38.0], [28.2, 38.0], [28.3, 38.0], [28.4, 38.0], [28.5, 38.0], [28.6, 38.0], [28.7, 38.0], [28.8, 38.0], [28.9, 38.0], [29.0, 38.0], [29.1, 39.0], [29.2, 39.0], [29.3, 39.0], [29.4, 39.0], [29.5, 39.0], [29.6, 39.0], [29.7, 39.0], [29.8, 39.0], [29.9, 39.0], [30.0, 39.0], [30.1, 39.0], [30.2, 40.0], [30.3, 40.0], [30.4, 40.0], [30.5, 40.0], [30.6, 40.0], [30.7, 40.0], [30.8, 40.0], [30.9, 40.0], [31.0, 40.0], [31.1, 40.0], [31.2, 40.0], [31.3, 40.0], [31.4, 41.0], [31.5, 41.0], [31.6, 41.0], [31.7, 41.0], [31.8, 41.0], [31.9, 41.0], [32.0, 41.0], [32.1, 41.0], [32.2, 41.0], [32.3, 41.0], [32.4, 41.0], [32.5, 41.0], [32.6, 42.0], [32.7, 42.0], [32.8, 42.0], [32.9, 42.0], [33.0, 42.0], [33.1, 42.0], [33.2, 42.0], [33.3, 42.0], [33.4, 42.0], [33.5, 42.0], [33.6, 42.0], [33.7, 43.0], [33.8, 43.0], [33.9, 43.0], [34.0, 43.0], [34.1, 43.0], [34.2, 43.0], [34.3, 43.0], [34.4, 43.0], [34.5, 43.0], [34.6, 43.0], [34.7, 43.0], [34.8, 43.0], [34.9, 44.0], [35.0, 44.0], [35.1, 44.0], [35.2, 44.0], [35.3, 44.0], [35.4, 44.0], [35.5, 44.0], [35.6, 44.0], [35.7, 44.0], [35.8, 44.0], [35.9, 44.0], [36.0, 45.0], [36.1, 45.0], [36.2, 45.0], [36.3, 45.0], [36.4, 45.0], [36.5, 45.0], [36.6, 45.0], [36.7, 45.0], [36.8, 45.0], [36.9, 45.0], [37.0, 45.0], [37.1, 45.0], [37.2, 46.0], [37.3, 46.0], [37.4, 46.0], [37.5, 46.0], [37.6, 46.0], [37.7, 46.0], [37.8, 46.0], [37.9, 46.0], [38.0, 46.0], [38.1, 46.0], [38.2, 47.0], [38.3, 47.0], [38.4, 47.0], [38.5, 47.0], [38.6, 47.0], [38.7, 47.0], [38.8, 47.0], [38.9, 47.0], [39.0, 47.0], [39.1, 47.0], [39.2, 48.0], [39.3, 48.0], [39.4, 48.0], [39.5, 48.0], [39.6, 48.0], [39.7, 48.0], [39.8, 48.0], [39.9, 48.0], [40.0, 48.0], [40.1, 48.0], [40.2, 49.0], [40.3, 49.0], [40.4, 49.0], [40.5, 49.0], [40.6, 49.0], [40.7, 49.0], [40.8, 49.0], [40.9, 49.0], [41.0, 49.0], [41.1, 49.0], [41.2, 49.0], [41.3, 50.0], [41.4, 50.0], [41.5, 50.0], [41.6, 50.0], [41.7, 50.0], [41.8, 50.0], [41.9, 50.0], [42.0, 50.0], [42.1, 50.0], [42.2, 50.0], [42.3, 51.0], [42.4, 51.0], [42.5, 51.0], [42.6, 51.0], [42.7, 51.0], [42.8, 51.0], [42.9, 51.0], [43.0, 51.0], [43.1, 51.0], [43.2, 51.0], [43.3, 52.0], [43.4, 52.0], [43.5, 52.0], [43.6, 52.0], [43.7, 52.0], [43.8, 52.0], [43.9, 52.0], [44.0, 52.0], [44.1, 52.0], [44.2, 52.0], [44.3, 53.0], [44.4, 53.0], [44.5, 53.0], [44.6, 53.0], [44.7, 53.0], [44.8, 53.0], [44.9, 53.0], [45.0, 53.0], [45.1, 53.0], [45.2, 53.0], [45.3, 54.0], [45.4, 54.0], [45.5, 54.0], [45.6, 54.0], [45.7, 54.0], [45.8, 54.0], [45.9, 54.0], [46.0, 54.0], [46.1, 54.0], [46.2, 54.0], [46.3, 55.0], [46.4, 55.0], [46.5, 55.0], [46.6, 55.0], [46.7, 55.0], [46.8, 55.0], [46.9, 55.0], [47.0, 55.0], [47.1, 55.0], [47.2, 56.0], [47.3, 56.0], [47.4, 56.0], [47.5, 56.0], [47.6, 56.0], [47.7, 56.0], [47.8, 56.0], [47.9, 56.0], [48.0, 56.0], [48.1, 56.0], [48.2, 57.0], [48.3, 57.0], [48.4, 57.0], [48.5, 57.0], [48.6, 57.0], [48.7, 57.0], [48.8, 57.0], [48.9, 57.0], [49.0, 57.0], [49.1, 58.0], [49.2, 58.0], [49.3, 58.0], [49.4, 58.0], [49.5, 58.0], [49.6, 58.0], [49.7, 58.0], [49.8, 58.0], [49.9, 58.0], [50.0, 58.0], [50.1, 59.0], [50.2, 59.0], [50.3, 59.0], [50.4, 59.0], [50.5, 59.0], [50.6, 59.0], [50.7, 59.0], [50.8, 59.0], [50.9, 59.0], [51.0, 60.0], [51.1, 60.0], [51.2, 60.0], [51.3, 60.0], [51.4, 60.0], [51.5, 60.0], [51.6, 60.0], [51.7, 60.0], [51.8, 61.0], [51.9, 61.0], [52.0, 61.0], [52.1, 61.0], [52.2, 61.0], [52.3, 61.0], [52.4, 61.0], [52.5, 61.0], [52.6, 61.0], [52.7, 62.0], [52.8, 62.0], [52.9, 62.0], [53.0, 62.0], [53.1, 62.0], [53.2, 62.0], [53.3, 62.0], [53.4, 62.0], [53.5, 62.0], [53.6, 63.0], [53.7, 63.0], [53.8, 63.0], [53.9, 63.0], [54.0, 63.0], [54.1, 63.0], [54.2, 63.0], [54.3, 63.0], [54.4, 63.0], [54.5, 64.0], [54.6, 64.0], [54.7, 64.0], [54.8, 64.0], [54.9, 64.0], [55.0, 64.0], [55.1, 64.0], [55.2, 64.0], [55.3, 65.0], [55.4, 65.0], [55.5, 65.0], [55.6, 65.0], [55.7, 65.0], [55.8, 65.0], [55.9, 65.0], [56.0, 65.0], [56.1, 65.0], [56.2, 66.0], [56.3, 66.0], [56.4, 66.0], [56.5, 66.0], [56.6, 66.0], [56.7, 66.0], [56.8, 66.0], [56.9, 66.0], [57.0, 67.0], [57.1, 67.0], [57.2, 67.0], [57.3, 67.0], [57.4, 67.0], [57.5, 67.0], [57.6, 67.0], [57.7, 68.0], [57.8, 68.0], [57.9, 68.0], [58.0, 68.0], [58.1, 68.0], [58.2, 68.0], [58.3, 68.0], [58.4, 68.0], [58.5, 69.0], [58.6, 69.0], [58.7, 69.0], [58.8, 69.0], [58.9, 69.0], [59.0, 69.0], [59.1, 69.0], [59.2, 69.0], [59.3, 70.0], [59.4, 70.0], [59.5, 70.0], [59.6, 70.0], [59.7, 70.0], [59.8, 70.0], [59.9, 70.0], [60.0, 70.0], [60.1, 71.0], [60.2, 71.0], [60.3, 71.0], [60.4, 71.0], [60.5, 71.0], [60.6, 71.0], [60.7, 71.0], [60.8, 72.0], [60.9, 72.0], [61.0, 72.0], [61.1, 72.0], [61.2, 72.0], [61.3, 72.0], [61.4, 72.0], [61.5, 72.0], [61.6, 73.0], [61.7, 73.0], [61.8, 73.0], [61.9, 73.0], [62.0, 73.0], [62.1, 73.0], [62.2, 73.0], [62.3, 73.0], [62.4, 74.0], [62.5, 74.0], [62.6, 74.0], [62.7, 74.0], [62.8, 74.0], [62.9, 74.0], [63.0, 74.0], [63.1, 75.0], [63.2, 75.0], [63.3, 75.0], [63.4, 75.0], [63.5, 75.0], [63.6, 75.0], [63.7, 75.0], [63.8, 76.0], [63.9, 76.0], [64.0, 76.0], [64.1, 76.0], [64.2, 76.0], [64.3, 76.0], [64.4, 76.0], [64.5, 77.0], [64.6, 77.0], [64.7, 77.0], [64.8, 77.0], [64.9, 77.0], [65.0, 77.0], [65.1, 78.0], [65.2, 78.0], [65.3, 78.0], [65.4, 78.0], [65.5, 78.0], [65.6, 78.0], [65.7, 78.0], [65.8, 79.0], [65.9, 79.0], [66.0, 79.0], [66.1, 79.0], [66.2, 79.0], [66.3, 79.0], [66.4, 79.0], [66.5, 80.0], [66.6, 80.0], [66.7, 80.0], [66.8, 80.0], [66.9, 80.0], [67.0, 80.0], [67.1, 81.0], [67.2, 81.0], [67.3, 81.0], [67.4, 81.0], [67.5, 81.0], [67.6, 81.0], [67.7, 82.0], [67.8, 82.0], [67.9, 82.0], [68.0, 82.0], [68.1, 82.0], [68.2, 82.0], [68.3, 83.0], [68.4, 83.0], [68.5, 83.0], [68.6, 83.0], [68.7, 83.0], [68.8, 84.0], [68.9, 84.0], [69.0, 84.0], [69.1, 84.0], [69.2, 84.0], [69.3, 85.0], [69.4, 85.0], [69.5, 85.0], [69.6, 85.0], [69.7, 85.0], [69.8, 86.0], [69.9, 86.0], [70.0, 86.0], [70.1, 86.0], [70.2, 86.0], [70.3, 86.0], [70.4, 87.0], [70.5, 87.0], [70.6, 87.0], [70.7, 87.0], [70.8, 87.0], [70.9, 87.0], [71.0, 88.0], [71.1, 88.0], [71.2, 88.0], [71.3, 88.0], [71.4, 88.0], [71.5, 88.0], [71.6, 89.0], [71.7, 89.0], [71.8, 89.0], [71.9, 89.0], [72.0, 89.0], [72.1, 90.0], [72.2, 90.0], [72.3, 90.0], [72.4, 90.0], [72.5, 90.0], [72.6, 91.0], [72.7, 91.0], [72.8, 91.0], [72.9, 91.0], [73.0, 92.0], [73.1, 92.0], [73.2, 92.0], [73.3, 92.0], [73.4, 92.0], [73.5, 93.0], [73.6, 93.0], [73.7, 93.0], [73.8, 93.0], [73.9, 93.0], [74.0, 93.0], [74.1, 94.0], [74.2, 94.0], [74.3, 94.0], [74.4, 94.0], [74.5, 94.0], [74.6, 95.0], [74.7, 95.0], [74.8, 95.0], [74.9, 95.0], [75.0, 95.0], [75.1, 96.0], [75.2, 96.0], [75.3, 96.0], [75.4, 96.0], [75.5, 97.0], [75.6, 97.0], [75.7, 97.0], [75.8, 97.0], [75.9, 97.0], [76.0, 98.0], [76.1, 98.0], [76.2, 98.0], [76.3, 98.0], [76.4, 99.0], [76.5, 99.0], [76.6, 99.0], [76.7, 99.0], [76.8, 100.0], [76.9, 100.0], [77.0, 100.0], [77.1, 100.0], [77.2, 101.0], [77.3, 101.0], [77.4, 101.0], [77.5, 101.0], [77.6, 102.0], [77.7, 102.0], [77.8, 102.0], [77.9, 102.0], [78.0, 103.0], [78.1, 103.0], [78.2, 103.0], [78.3, 104.0], [78.4, 104.0], [78.5, 104.0], [78.6, 104.0], [78.7, 105.0], [78.8, 105.0], [78.9, 105.0], [79.0, 106.0], [79.1, 106.0], [79.2, 106.0], [79.3, 106.0], [79.4, 107.0], [79.5, 107.0], [79.6, 107.0], [79.7, 108.0], [79.8, 108.0], [79.9, 108.0], [80.0, 109.0], [80.1, 109.0], [80.2, 109.0], [80.3, 110.0], [80.4, 110.0], [80.5, 110.0], [80.6, 110.0], [80.7, 111.0], [80.8, 111.0], [80.9, 111.0], [81.0, 112.0], [81.1, 112.0], [81.2, 112.0], [81.3, 113.0], [81.4, 113.0], [81.5, 113.0], [81.6, 114.0], [81.7, 114.0], [81.8, 114.0], [81.9, 115.0], [82.0, 115.0], [82.1, 115.0], [82.2, 116.0], [82.3, 116.0], [82.4, 116.0], [82.5, 117.0], [82.6, 117.0], [82.7, 117.0], [82.8, 118.0], [82.9, 118.0], [83.0, 118.0], [83.1, 119.0], [83.2, 119.0], [83.3, 119.0], [83.4, 120.0], [83.5, 120.0], [83.6, 120.0], [83.7, 121.0], [83.8, 121.0], [83.9, 121.0], [84.0, 122.0], [84.1, 122.0], [84.2, 122.0], [84.3, 123.0], [84.4, 123.0], [84.5, 124.0], [84.6, 124.0], [84.7, 124.0], [84.8, 125.0], [84.9, 125.0], [85.0, 126.0], [85.1, 126.0], [85.2, 126.0], [85.3, 127.0], [85.4, 127.0], [85.5, 127.0], [85.6, 128.0], [85.7, 128.0], [85.8, 129.0], [85.9, 129.0], [86.0, 130.0], [86.1, 130.0], [86.2, 131.0], [86.3, 132.0], [86.4, 132.0], [86.5, 133.0], [86.6, 133.0], [86.7, 134.0], [86.8, 135.0], [86.9, 135.0], [87.0, 136.0], [87.1, 137.0], [87.2, 137.0], [87.3, 138.0], [87.4, 138.0], [87.5, 139.0], [87.6, 139.0], [87.7, 140.0], [87.8, 140.0], [87.9, 141.0], [88.0, 142.0], [88.1, 142.0], [88.2, 143.0], [88.3, 143.0], [88.4, 144.0], [88.5, 144.0], [88.6, 145.0], [88.7, 146.0], [88.8, 146.0], [88.9, 147.0], [89.0, 148.0], [89.1, 149.0], [89.2, 149.0], [89.3, 150.0], [89.4, 150.0], [89.5, 151.0], [89.6, 152.0], [89.7, 152.0], [89.8, 153.0], [89.9, 154.0], [90.0, 154.0], [90.1, 155.0], [90.2, 156.0], [90.3, 157.0], [90.4, 157.0], [90.5, 158.0], [90.6, 159.0], [90.7, 160.0], [90.8, 160.0], [90.9, 161.0], [91.0, 162.0], [91.1, 162.0], [91.2, 163.0], [91.3, 164.0], [91.4, 165.0], [91.5, 166.0], [91.6, 166.0], [91.7, 167.0], [91.8, 168.0], [91.9, 169.0], [92.0, 170.0], [92.1, 171.0], [92.2, 172.0], [92.3, 172.0], [92.4, 173.0], [92.5, 174.0], [92.6, 174.0], [92.7, 175.0], [92.8, 176.0], [92.9, 177.0], [93.0, 178.0], [93.1, 179.0], [93.2, 180.0], [93.3, 181.0], [93.4, 182.0], [93.5, 183.0], [93.6, 184.0], [93.7, 185.0], [93.8, 186.0], [93.9, 187.0], [94.0, 188.0], [94.1, 189.0], [94.2, 191.0], [94.3, 192.0], [94.4, 193.0], [94.5, 194.0], [94.6, 195.0], [94.7, 197.0], [94.8, 198.0], [94.9, 199.0], [95.0, 201.0], [95.1, 202.0], [95.2, 203.0], [95.3, 204.0], [95.4, 206.0], [95.5, 208.0], [95.6, 209.0], [95.7, 210.0], [95.8, 211.0], [95.9, 213.0], [96.0, 215.0], [96.1, 217.0], [96.2, 219.0], [96.3, 221.0], [96.4, 223.0], [96.5, 225.0], [96.6, 228.0], [96.7, 230.0], [96.8, 233.0], [96.9, 235.0], [97.0, 238.0], [97.1, 240.0], [97.2, 243.0], [97.3, 246.0], [97.4, 249.0], [97.5, 252.0], [97.6, 255.0], [97.7, 258.0], [97.8, 262.0], [97.9, 267.0], [98.0, 271.0], [98.1, 277.0], [98.2, 283.0], [98.3, 288.0], [98.4, 292.0], [98.5, 303.0], [98.6, 307.0], [98.7, 315.0], [98.8, 324.0], [98.9, 334.0], [99.0, 348.0], [99.1, 357.0], [99.2, 368.0], [99.3, 383.0], [99.4, 404.0], [99.5, 433.0], [99.6, 457.0], [99.7, 527.0], [99.8, 574.0], [99.9, 645.0]], "isOverall": false, "label": "获取用户持仓信息", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 92097.0, "series": [{"data": [[2100.0, 1.0], [2200.0, 1.0], [600.0, 38.0], [700.0, 20.0], [200.0, 680.0], [800.0, 11.0], [900.0, 6.0], [1000.0, 5.0], [1100.0, 5.0], [300.0, 321.0], [1200.0, 5.0], [1300.0, 6.0], [21000.0, 1.0], [1400.0, 3.0], [1500.0, 3.0], [100.0, 675.0], [400.0, 142.0], [1600.0, 1.0], [1700.0, 2.0], [500.0, 74.0]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[0.0, 92097.0], [600.0, 79.0], [700.0, 40.0], [200.0, 4259.0], [800.0, 21.0], [900.0, 6.0], [1000.0, 12.0], [1100.0, 1.0], [300.0, 1086.0], [1200.0, 1.0], [1500.0, 2.0], [100.0, 21812.0], [1600.0, 2.0], [400.0, 336.0], [1800.0, 2.0], [1900.0, 1.0], [500.0, 242.0], [2000.0, 1.0]], "isOverall": false, "label": "获取用户持仓信息", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 121409.0, "series": [{"data": [[0.0, 121409.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 574.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 16.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.673076923076927, "minX": 1.63145784E12, "maxY": 84.13253592357741, "series": [{"data": [[1.63145808E12, 4.673076923076927], [1.63145796E12, 45.386413499823774], [1.63145784E12, 84.13253592357741], [1.63145802E12, 66.65816905497017], [1.6314579E12, 30.027492996794354]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145808E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 13.5, "minX": 1.0, "maxY": 887.6666666666666, "series": [{"data": [[5.0, 203.25], [6.0, 138.0], [7.0, 131.0], [8.0, 132.0], [9.0, 134.8], [10.0, 130.9090909090909], [11.0, 134.20689655172413], [12.0, 136.7307692307692], [13.0, 163.4375], [14.0, 173.73684210526318], [15.0, 154.54545454545456], [16.0, 146.45454545454544], [17.0, 161.5], [18.0, 215.0], [19.0, 162.72727272727272], [20.0, 220.16666666666663], [21.0, 234.08333333333334], [22.0, 174.13333333333333], [23.0, 174.87096774193546], [24.0, 191.56000000000003], [25.0, 171.86666666666667], [26.0, 174.52941176470586], [27.0, 181.6458333333334], [28.0, 253.53191489361706], [29.0, 209.2727272727272], [30.0, 195.60377358490567], [31.0, 218.35714285714292], [33.0, 310.41379310344826], [32.0, 211.86486486486493], [34.0, 229.17647058823536], [35.0, 216.43396226415098], [36.0, 237.14705882352936], [37.0, 256.3666666666667], [38.0, 231.5185185185185], [39.0, 240.88888888888886], [40.0, 204.63636363636363], [41.0, 202.35294117647058], [43.0, 308.2083333333333], [42.0, 227.23529411764707], [44.0, 347.5789473684211], [45.0, 395.0625], [47.0, 278.40624999999994], [46.0, 270.3333333333333], [48.0, 284.4358974358975], [49.0, 748.75], [51.0, 335.84999999999997], [50.0, 280.8461538461539], [53.0, 290.83333333333326], [52.0, 268.3], [54.0, 347.95], [55.0, 269.8], [57.0, 343.87096774193543], [56.0, 271.78571428571433], [58.0, 431.6666666666667], [59.0, 323.7777777777777], [60.0, 316.90476190476187], [61.0, 440.70833333333337], [63.0, 290.1428571428571], [62.0, 404.75], [64.0, 544.3793103448277], [66.0, 496.5], [67.0, 351.72727272727275], [65.0, 335.6666666666667], [68.0, 452.7142857142858], [69.0, 366.53846153846155], [71.0, 303.2352941176471], [70.0, 452.3684210526315], [74.0, 376.10526315789474], [73.0, 433.16666666666663], [72.0, 278.0], [75.0, 366.7777777777778], [78.0, 408.7241379310344], [79.0, 369.09375], [77.0, 321.0869565217391], [76.0, 336.00000000000006], [81.0, 343.8823529411764], [83.0, 407.7272727272727], [80.0, 362.99999999999994], [82.0, 383.49999999999994], [85.0, 384.85714285714283], [86.0, 409.2857142857143], [87.0, 273.8888888888889], [84.0, 359.79999999999995], [88.0, 356.9090909090909], [89.0, 421.6666666666667], [91.0, 370.76923076923083], [90.0, 465.5], [92.0, 507.81818181818187], [94.0, 430.41666666666663], [95.0, 376.8], [93.0, 417.8333333333333], [96.0, 379.2], [98.0, 497.4285714285714], [99.0, 479.42857142857144], [97.0, 296.3333333333333], [101.0, 672.0], [103.0, 711.3333333333334], [102.0, 199.0], [105.0, 464.0], [109.0, 857.0], [111.0, 887.6666666666666], [108.0, 189.0], [112.0, 593.6249999999999], [113.0, 471.0], [114.0, 417.0], [115.0, 378.5], [116.0, 416.0], [117.0, 276.0], [119.0, 352.0], [120.0, 309.0], [121.0, 436.5], [122.0, 414.5], [123.0, 337.5], [124.0, 257.0], [127.0, 367.5], [125.0, 250.0], [128.0, 436.1666666666667], [129.0, 317.0], [131.0, 357.57142857142856], [130.0, 330.0]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[50.26900000000002, 305.0680000000003]], "isOverall": false, "label": "登录请求-Aggregated", "isController": false}, {"data": [[2.0, 13.5], [3.0, 15.120000000000003], [4.0, 15.285714285714285], [5.0, 17.0], [6.0, 14.354838709677418], [7.0, 17.163636363636364], [8.0, 14.043103448275861], [9.0, 13.62413793103449], [10.0, 14.134897360703807], [11.0, 15.65812983919002], [12.0, 16.757615894039738], [13.0, 20.630410654827944], [14.0, 22.392316647264266], [15.0, 22.397574123989223], [16.0, 18.231231231231238], [17.0, 23.36311239193084], [18.0, 30.284090909090903], [19.0, 23.083815028901736], [20.0, 34.2828810020877], [21.0, 34.240253853127804], [22.0, 31.7343173431734], [23.0, 36.88246041412917], [24.0, 42.8173913043479], [25.0, 41.26440037771475], [26.0, 38.09989594172745], [27.0, 41.17474302496334], [28.0, 46.43374316939883], [29.0, 46.54673403103585], [30.0, 48.1258324570627], [31.0, 50.28943415122677], [32.0, 53.15763546798027], [33.0, 52.73528514791095], [34.0, 53.874355495250875], [35.0, 53.74802652352391], [36.0, 57.66601178781926], [37.0, 64.0450507614213], [38.0, 47.385775862068925], [39.0, 53.89794007490629], [40.0, 54.22366288492714], [41.0, 51.28130360205832], [43.0, 65.10706638115627], [42.0, 57.68849069607166], [44.0, 71.44817374136225], [45.0, 81.34530706836624], [46.0, 80.82903463522472], [47.0, 75.62646484374973], [48.0, 71.43163538873968], [49.0, 75.85668350941663], [51.0, 89.74932126696838], [50.0, 83.31382228490831], [52.0, 86.55054432348363], [53.0, 83.31388564760785], [54.0, 97.0172026925954], [55.0, 87.0554662379422], [57.0, 90.91154625253215], [56.0, 92.21813031161467], [58.0, 103.94719471947195], [59.0, 107.81888246628124], [60.0, 93.96420745069386], [61.0, 74.87743076016507], [63.0, 91.30535279805352], [62.0, 88.87037037037022], [64.0, 78.19569347688423], [66.0, 133.54172015404382], [67.0, 109.84587813620072], [65.0, 97.3576826196474], [68.0, 99.28661087866121], [69.0, 108.31378299120232], [70.0, 109.91527313266445], [71.0, 106.10043668122262], [73.0, 142.58834244080165], [72.0, 125.75510204081635], [74.0, 105.96897374701682], [75.0, 106.29768467475202], [76.0, 122.22871883061036], [77.0, 103.88495575221225], [78.0, 116.31670281995662], [79.0, 125.70621791215063], [80.0, 124.17516110134737], [81.0, 112.40547945205473], [82.0, 128.16177577125657], [83.0, 125.62040332147076], [84.0, 130.75438596491225], [85.0, 110.29853479853486], [86.0, 113.65500000000003], [87.0, 109.10578279266576], [88.0, 118.1486486486486], [89.0, 157.5306666666666], [90.0, 164.52272727272722], [91.0, 124.05891980360063], [92.0, 145.0790960451977], [93.0, 133.06948228882837], [94.0, 149.29930069930063], [95.0, 151.48021108179427], [96.0, 119.26829268292686], [98.0, 134.08722109533485], [99.0, 133.6523929471033], [97.0, 181.83673469387756], [100.0, 125.74172185430454], [101.0, 88.12328767123289], [102.0, 129.5072463768116], [103.0, 121.78155339805825], [105.0, 267.8181818181819], [107.0, 236.79411764705873], [106.0, 84.14285714285714], [104.0, 66.88636363636363], [108.0, 308.6241134751771], [109.0, 222.609756097561], [110.0, 210.41904761904746], [111.0, 152.56818181818196], [112.0, 103.80606060606063], [113.0, 115.71428571428574], [114.0, 138.0], [115.0, 98.18115942028987], [116.0, 104.42148760330585], [117.0, 110.84269662921344], [118.0, 159.26760563380276], [119.0, 119.03571428571426], [120.0, 246.25925925925927], [121.0, 194.02453987730067], [122.0, 135.04054054054052], [123.0, 114.53333333333332], [124.0, 124.24731182795698], [125.0, 191.92156862745097], [126.0, 169.59999999999997], [127.0, 133.15853658536588], [128.0, 144.55555555555551], [129.0, 149.99999999999994], [130.0, 142.88847583643113], [131.0, 116.39705882352943], [132.0, 105.48148148148147], [1.0, 14.708333333333334]], "isOverall": false, "label": "获取用户持仓信息", "isController": false}, {"data": [[51.57683333333337, 77.53151666666737]], "isOverall": false, "label": "获取用户持仓信息-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 132.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 473.2, "minX": 1.63145784E12, "maxY": 329122.65, "series": [{"data": [[1.63145808E12, 901.3333333333334], [1.63145796E12, 320731.31666666665], [1.63145784E12, 108219.81666666667], [1.63145802E12, 329122.65], [1.6314579E12, 300828.23333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63145808E12, 473.2], [1.63145796E12, 167896.9], [1.63145784E12, 56650.95], [1.63145802E12, 172333.86666666667], [1.6314579E12, 157473.11666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145808E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16.701923076923077, "minX": 1.63145784E12, "maxY": 497.3615023474181, "series": [{"data": [[1.63145796E12, 290.5790349417642], [1.63145784E12, 497.3615023474181], [1.63145802E12, 329.0799319727894], [1.6314579E12, 227.52675585284288]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[1.63145808E12, 16.701923076923077], [1.63145796E12, 67.80012665895669], [1.63145784E12, 115.06133616465236], [1.63145802E12, 101.10810883259613], [1.6314579E12, 48.75344559052578]], "isOverall": false, "label": "获取用户持仓信息", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145808E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16.144230769230774, "minX": 1.63145784E12, "maxY": 492.9154929577461, "series": [{"data": [[1.63145796E12, 254.98336106489174], [1.63145784E12, 492.9154929577461], [1.63145802E12, 328.6921768707485], [1.6314579E12, 224.72909698996656]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[1.63145808E12, 16.144230769230774], [1.63145796E12, 67.47458560493416], [1.63145784E12, 114.56917673962643], [1.63145802E12, 100.80361881785203], [1.6314579E12, 48.3841723236066]], "isOverall": false, "label": "获取用户持仓信息", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145808E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.63145784E12, "maxY": 200.699530516432, "series": [{"data": [[1.63145796E12, 112.47420965058231], [1.63145784E12, 200.699530516432], [1.63145802E12, 118.36904761904759], [1.6314579E12, 61.491638795986596]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[1.63145808E12, 0.0], [1.63145796E12, 0.002780990142629002], [1.63145784E12, 0.0], [1.63145802E12, 0.0], [1.6314579E12, 0.0]], "isOverall": false, "label": "获取用户持仓信息", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145808E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.63145784E12, "maxY": 2231.0, "series": [{"data": [[1.63145808E12, 32.0], [1.63145796E12, 1363.0], [1.63145784E12, 2231.0], [1.63145802E12, 1519.0], [1.6314579E12, 2094.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63145808E12, 25.0], [1.63145796E12, 128.0], [1.63145784E12, 238.0], [1.63145802E12, 173.0], [1.6314579E12, 151.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63145808E12, 32.0], [1.63145796E12, 288.9900000000016], [1.63145784E12, 698.0], [1.63145802E12, 363.0], [1.6314579E12, 310.9800000000032]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63145808E12, 30.75], [1.63145796E12, 186.0], [1.63145784E12, 366.09999999999854], [1.63145802E12, 235.0], [1.6314579E12, 188.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63145808E12, 10.0], [1.63145796E12, 10.0], [1.63145784E12, 8.0], [1.63145802E12, 12.0], [1.6314579E12, 8.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63145808E12, 16.0], [1.63145796E12, 59.0], [1.63145784E12, 80.0], [1.63145802E12, 89.0], [1.6314579E12, 46.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145808E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 7.0, "maxY": 21027.0, "series": [{"data": [[7.0, 128.0], [56.0, 101.5], [74.0, 364.0], [87.0, 582.0], [104.0, 16.0], [115.0, 557.0], [148.0, 186.5], [161.0, 130.0], [239.0, 251.0], [272.0, 27.5], [288.0, 137.5], [289.0, 147.0], [305.0, 113.0], [327.0, 126.0], [347.0, 214.0], [343.0, 126.0], [348.0, 158.5], [362.0, 181.0], [378.0, 41.0], [374.0, 45.0], [368.0, 175.5], [369.0, 170.0], [393.0, 15.0], [394.0, 170.0], [410.0, 16.5], [405.0, 171.0], [402.0, 159.0], [414.0, 64.0], [406.0, 181.0], [412.0, 172.0], [424.0, 95.5], [416.0, 64.0], [420.0, 73.0], [430.0, 74.0], [426.0, 87.0], [431.0, 172.0], [439.0, 56.0], [442.0, 51.0], [441.0, 78.0], [435.0, 110.0], [445.0, 75.0], [452.0, 155.0], [449.0, 79.0], [453.0, 167.0], [455.0, 119.0], [479.0, 18.0], [476.0, 32.0], [465.0, 31.0], [466.0, 136.5], [475.0, 131.0], [470.0, 145.0], [474.0, 172.0], [493.0, 38.0], [494.0, 72.0], [480.0, 89.5], [496.0, 119.0], [504.0, 22.0], [506.0, 45.0], [505.0, 61.0], [497.0, 87.0], [502.0, 154.0], [543.0, 82.0], [537.0, 15.0], [517.0, 57.0], [531.0, 23.0], [530.0, 132.0], [529.0, 51.0], [528.0, 75.0], [533.0, 38.0], [532.0, 66.0], [523.0, 51.0], [512.0, 138.0], [513.0, 48.0], [539.0, 78.0], [574.0, 64.0], [554.0, 50.0], [563.0, 46.0], [555.0, 101.0], [564.0, 43.0], [575.0, 75.0], [571.0, 43.0], [569.0, 43.0], [546.0, 85.5], [556.0, 59.5], [544.0, 52.0], [580.0, 29.0], [595.0, 15.0], [596.0, 29.0], [584.0, 15.0], [604.0, 19.0], [583.0, 13.0], [576.0, 41.0], [591.0, 67.0], [579.0, 100.0], [577.0, 75.0], [586.0, 82.0], [594.0, 50.0], [632.0, 32.0], [614.0, 13.0], [615.0, 124.0], [638.0, 32.0], [611.0, 30.0], [625.0, 53.0], [631.0, 40.0], [628.0, 103.0], [630.0, 134.0], [617.0, 42.0], [620.0, 77.0], [608.0, 103.0], [613.0, 41.0], [647.0, 31.0], [663.0, 14.0], [651.0, 22.0], [659.0, 38.0], [652.0, 48.0], [655.0, 42.0], [658.0, 72.0], [669.0, 45.0], [666.0, 119.0], [696.0, 34.0], [675.0, 26.0], [681.0, 42.0], [697.0, 50.0], [677.0, 40.0], [695.0, 40.0], [698.0, 52.0], [678.0, 100.5], [679.0, 118.0], [694.0, 63.0], [730.0, 63.0], [719.0, 25.0], [708.0, 42.0], [728.0, 42.0], [706.0, 48.0], [724.0, 39.0], [718.0, 32.0], [723.0, 44.0], [725.0, 38.0], [731.0, 54.0], [744.0, 143.0], [745.0, 26.5], [740.0, 41.0], [739.0, 66.0], [746.0, 78.0], [736.0, 117.0], [750.0, 85.0], [792.0, 44.5], [790.0, 42.0], [774.0, 44.0], [789.0, 88.0], [778.0, 61.5], [779.0, 66.0], [799.0, 78.0], [787.0, 91.0], [773.0, 117.0], [815.0, 45.0], [859.0, 68.0], [833.0, 68.0], [852.0, 96.0], [880.0, 123.0], [885.0, 52.0], [866.0, 76.0], [906.0, 121.0], [923.0, 80.0], [925.0, 57.0], [935.0, 17.0], [958.0, 38.0], [967.0, 41.0], [979.0, 71.0], [1010.0, 81.5], [1087.0, 80.0], [1072.0, 50.0], [1085.0, 54.0], [1026.0, 62.0], [1137.0, 30.0], [1195.0, 46.0], [1177.0, 61.0], [1295.0, 66.0], [1463.0, 24.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[539.0, 21027.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1463.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 7.0, "maxY": 582.0, "series": [{"data": [[7.0, 128.0], [56.0, 101.0], [74.0, 364.0], [87.0, 582.0], [104.0, 15.0], [115.0, 554.0], [148.0, 186.0], [161.0, 129.0], [239.0, 250.0], [272.0, 26.5], [288.0, 137.0], [289.0, 146.0], [305.0, 113.0], [327.0, 126.0], [347.0, 214.0], [343.0, 126.0], [348.0, 158.5], [362.0, 181.0], [378.0, 41.0], [374.0, 45.0], [368.0, 175.0], [369.0, 170.0], [393.0, 15.0], [394.0, 170.0], [410.0, 16.0], [405.0, 171.0], [402.0, 159.0], [414.0, 63.0], [406.0, 180.0], [412.0, 172.0], [424.0, 95.5], [416.0, 64.0], [420.0, 73.0], [430.0, 74.0], [426.0, 87.0], [431.0, 172.0], [439.0, 56.0], [442.0, 50.0], [441.0, 78.0], [435.0, 110.0], [445.0, 75.0], [452.0, 155.0], [449.0, 79.0], [453.0, 166.0], [455.0, 119.0], [479.0, 18.0], [476.0, 32.0], [465.0, 31.0], [466.0, 136.0], [475.0, 131.0], [470.0, 145.0], [474.0, 172.0], [493.0, 38.0], [494.0, 72.0], [480.0, 89.0], [496.0, 119.0], [504.0, 22.0], [506.0, 45.0], [505.0, 60.0], [497.0, 86.0], [502.0, 154.0], [543.0, 82.0], [537.0, 15.0], [517.0, 57.0], [531.0, 23.0], [530.0, 132.0], [529.0, 51.0], [528.0, 74.5], [533.0, 38.0], [532.0, 66.0], [523.0, 50.0], [512.0, 138.0], [513.0, 47.0], [539.0, 78.0], [574.0, 64.0], [554.0, 49.0], [563.0, 46.0], [555.0, 101.0], [564.0, 43.0], [575.0, 75.0], [571.0, 43.0], [569.0, 43.0], [546.0, 85.0], [556.0, 59.0], [544.0, 52.0], [580.0, 29.0], [595.0, 15.0], [596.0, 28.0], [584.0, 15.0], [604.0, 19.0], [583.0, 12.0], [576.0, 41.0], [591.0, 67.0], [579.0, 100.0], [577.0, 75.0], [586.0, 81.0], [594.0, 50.0], [632.0, 32.0], [614.0, 13.0], [615.0, 124.0], [638.0, 32.0], [611.0, 30.0], [625.0, 52.5], [631.0, 40.0], [628.0, 103.0], [630.0, 134.0], [617.0, 42.0], [620.0, 77.0], [608.0, 103.0], [613.0, 41.0], [647.0, 30.0], [663.0, 14.0], [651.0, 21.5], [659.0, 37.0], [652.0, 48.0], [655.0, 42.0], [658.0, 72.0], [669.0, 45.0], [666.0, 119.0], [696.0, 34.0], [675.0, 26.0], [681.0, 42.0], [697.0, 50.0], [677.0, 40.0], [695.0, 40.0], [698.0, 52.0], [678.0, 100.0], [679.0, 118.0], [694.0, 63.0], [730.0, 63.0], [719.0, 25.0], [708.0, 41.5], [728.0, 42.0], [706.0, 48.0], [724.0, 39.0], [718.0, 32.0], [723.0, 44.0], [725.0, 38.0], [731.0, 53.0], [744.0, 143.0], [745.0, 26.5], [740.0, 41.0], [739.0, 66.0], [746.0, 78.0], [736.0, 116.5], [750.0, 84.5], [792.0, 44.5], [790.0, 42.0], [774.0, 44.0], [789.0, 88.0], [778.0, 61.0], [779.0, 66.0], [799.0, 78.0], [787.0, 91.0], [773.0, 117.0], [815.0, 45.0], [859.0, 68.0], [833.0, 68.0], [852.0, 96.0], [880.0, 123.0], [885.0, 51.0], [866.0, 76.0], [906.0, 121.0], [923.0, 79.0], [925.0, 57.0], [935.0, 17.0], [958.0, 37.0], [967.0, 41.0], [979.0, 71.0], [1010.0, 81.0], [1087.0, 79.0], [1072.0, 50.0], [1085.0, 54.0], [1026.0, 62.0], [1137.0, 30.0], [1195.0, 45.0], [1177.0, 61.0], [1295.0, 66.0], [1463.0, 24.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[539.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1463.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.5666666666666667, "minX": 1.63145784E12, "maxY": 630.6333333333333, "series": [{"data": [[1.63145808E12, 1.5666666666666667], [1.63145796E12, 615.1333333333333], [1.63145784E12, 207.95], [1.63145802E12, 630.6333333333333], [1.6314579E12, 578.05]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145808E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63145784E12, "maxY": 631.55, "series": [{"data": [[1.63145808E12, 1.7333333333333334], [1.63145796E12, 615.3], [1.63145784E12, 207.61666666666667], [1.63145802E12, 631.55], [1.6314579E12, 577.1166666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63145796E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145808E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63145784E12, "maxY": 621.75, "series": [{"data": [[1.63145808E12, 1.7333333333333334], [1.63145796E12, 605.3], [1.63145784E12, 204.06666666666666], [1.63145802E12, 621.75], [1.6314579E12, 567.15]], "isOverall": false, "label": "获取用户持仓信息-success", "isController": false}, {"data": [[1.63145796E12, 0.016666666666666666]], "isOverall": false, "label": "登录请求-failure", "isController": false}, {"data": [[1.63145796E12, 10.0], [1.63145784E12, 3.55], [1.63145802E12, 9.8], [1.6314579E12, 9.966666666666667]], "isOverall": false, "label": "登录请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145808E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63145784E12, "maxY": 631.55, "series": [{"data": [[1.63145808E12, 1.7333333333333334], [1.63145796E12, 615.3], [1.63145784E12, 207.61666666666667], [1.63145802E12, 631.55], [1.6314579E12, 577.1166666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63145796E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145808E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

