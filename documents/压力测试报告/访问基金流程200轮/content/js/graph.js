/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 21055.0, "series": [{"data": [[0.0, 9.0], [0.1, 13.0], [0.2, 14.0], [0.3, 15.0], [0.4, 15.0], [0.5, 16.0], [0.6, 16.0], [0.7, 16.0], [0.8, 17.0], [0.9, 17.0], [1.0, 17.0], [1.1, 17.0], [1.2, 17.0], [1.3, 17.0], [1.4, 18.0], [1.5, 18.0], [1.6, 18.0], [1.7, 18.0], [1.8, 18.0], [1.9, 18.0], [2.0, 18.0], [2.1, 18.0], [2.2, 18.0], [2.3, 19.0], [2.4, 19.0], [2.5, 19.0], [2.6, 19.0], [2.7, 19.0], [2.8, 19.0], [2.9, 19.0], [3.0, 19.0], [3.1, 19.0], [3.2, 19.0], [3.3, 19.0], [3.4, 20.0], [3.5, 20.0], [3.6, 20.0], [3.7, 20.0], [3.8, 20.0], [3.9, 20.0], [4.0, 20.0], [4.1, 20.0], [4.2, 20.0], [4.3, 20.0], [4.4, 20.0], [4.5, 20.0], [4.6, 20.0], [4.7, 20.0], [4.8, 21.0], [4.9, 21.0], [5.0, 21.0], [5.1, 21.0], [5.2, 21.0], [5.3, 21.0], [5.4, 21.0], [5.5, 21.0], [5.6, 21.0], [5.7, 21.0], [5.8, 21.0], [5.9, 21.0], [6.0, 21.0], [6.1, 21.0], [6.2, 21.0], [6.3, 21.0], [6.4, 22.0], [6.5, 22.0], [6.6, 22.0], [6.7, 22.0], [6.8, 22.0], [6.9, 22.0], [7.0, 22.0], [7.1, 22.0], [7.2, 22.0], [7.3, 22.0], [7.4, 22.0], [7.5, 22.0], [7.6, 22.0], [7.7, 22.0], [7.8, 22.0], [7.9, 22.0], [8.0, 22.0], [8.1, 22.0], [8.2, 22.0], [8.3, 22.0], [8.4, 22.0], [8.5, 23.0], [8.6, 23.0], [8.7, 23.0], [8.8, 23.0], [8.9, 23.0], [9.0, 23.0], [9.1, 23.0], [9.2, 23.0], [9.3, 23.0], [9.4, 23.0], [9.5, 23.0], [9.6, 23.0], [9.7, 23.0], [9.8, 23.0], [9.9, 23.0], [10.0, 23.0], [10.1, 23.0], [10.2, 23.0], [10.3, 23.0], [10.4, 23.0], [10.5, 23.0], [10.6, 23.0], [10.7, 24.0], [10.8, 24.0], [10.9, 24.0], [11.0, 24.0], [11.1, 24.0], [11.2, 24.0], [11.3, 24.0], [11.4, 24.0], [11.5, 24.0], [11.6, 24.0], [11.7, 24.0], [11.8, 24.0], [11.9, 24.0], [12.0, 24.0], [12.1, 24.0], [12.2, 24.0], [12.3, 24.0], [12.4, 24.0], [12.5, 24.0], [12.6, 24.0], [12.7, 24.0], [12.8, 24.0], [12.9, 24.0], [13.0, 24.0], [13.1, 24.0], [13.2, 25.0], [13.3, 25.0], [13.4, 25.0], [13.5, 25.0], [13.6, 25.0], [13.7, 25.0], [13.8, 25.0], [13.9, 25.0], [14.0, 25.0], [14.1, 25.0], [14.2, 25.0], [14.3, 25.0], [14.4, 25.0], [14.5, 25.0], [14.6, 25.0], [14.7, 25.0], [14.8, 25.0], [14.9, 25.0], [15.0, 25.0], [15.1, 25.0], [15.2, 25.0], [15.3, 25.0], [15.4, 25.0], [15.5, 25.0], [15.6, 25.0], [15.7, 26.0], [15.8, 26.0], [15.9, 26.0], [16.0, 26.0], [16.1, 26.0], [16.2, 26.0], [16.3, 26.0], [16.4, 26.0], [16.5, 26.0], [16.6, 26.0], [16.7, 26.0], [16.8, 26.0], [16.9, 26.0], [17.0, 26.0], [17.1, 26.0], [17.2, 26.0], [17.3, 26.0], [17.4, 26.0], [17.5, 26.0], [17.6, 26.0], [17.7, 26.0], [17.8, 26.0], [17.9, 26.0], [18.0, 26.0], [18.1, 26.0], [18.2, 26.0], [18.3, 27.0], [18.4, 27.0], [18.5, 27.0], [18.6, 27.0], [18.7, 27.0], [18.8, 27.0], [18.9, 27.0], [19.0, 27.0], [19.1, 27.0], [19.2, 27.0], [19.3, 27.0], [19.4, 27.0], [19.5, 27.0], [19.6, 27.0], [19.7, 27.0], [19.8, 27.0], [19.9, 27.0], [20.0, 27.0], [20.1, 27.0], [20.2, 27.0], [20.3, 27.0], [20.4, 27.0], [20.5, 27.0], [20.6, 27.0], [20.7, 27.0], [20.8, 27.0], [20.9, 28.0], [21.0, 28.0], [21.1, 28.0], [21.2, 28.0], [21.3, 28.0], [21.4, 28.0], [21.5, 28.0], [21.6, 28.0], [21.7, 28.0], [21.8, 28.0], [21.9, 28.0], [22.0, 28.0], [22.1, 28.0], [22.2, 28.0], [22.3, 28.0], [22.4, 28.0], [22.5, 28.0], [22.6, 28.0], [22.7, 28.0], [22.8, 28.0], [22.9, 28.0], [23.0, 28.0], [23.1, 28.0], [23.2, 28.0], [23.3, 28.0], [23.4, 28.0], [23.5, 29.0], [23.6, 29.0], [23.7, 29.0], [23.8, 29.0], [23.9, 29.0], [24.0, 29.0], [24.1, 29.0], [24.2, 29.0], [24.3, 29.0], [24.4, 29.0], [24.5, 29.0], [24.6, 29.0], [24.7, 29.0], [24.8, 29.0], [24.9, 29.0], [25.0, 29.0], [25.1, 29.0], [25.2, 29.0], [25.3, 29.0], [25.4, 29.0], [25.5, 29.0], [25.6, 29.0], [25.7, 29.0], [25.8, 29.0], [25.9, 29.0], [26.0, 30.0], [26.1, 30.0], [26.2, 30.0], [26.3, 30.0], [26.4, 30.0], [26.5, 30.0], [26.6, 30.0], [26.7, 30.0], [26.8, 30.0], [26.9, 30.0], [27.0, 30.0], [27.1, 30.0], [27.2, 30.0], [27.3, 30.0], [27.4, 30.0], [27.5, 30.0], [27.6, 30.0], [27.7, 30.0], [27.8, 30.0], [27.9, 30.0], [28.0, 30.0], [28.1, 30.0], [28.2, 30.0], [28.3, 30.0], [28.4, 30.0], [28.5, 31.0], [28.6, 31.0], [28.7, 31.0], [28.8, 31.0], [28.9, 31.0], [29.0, 31.0], [29.1, 31.0], [29.2, 31.0], [29.3, 31.0], [29.4, 31.0], [29.5, 31.0], [29.6, 31.0], [29.7, 31.0], [29.8, 31.0], [29.9, 31.0], [30.0, 31.0], [30.1, 31.0], [30.2, 31.0], [30.3, 31.0], [30.4, 31.0], [30.5, 31.0], [30.6, 31.0], [30.7, 31.0], [30.8, 31.0], [30.9, 32.0], [31.0, 32.0], [31.1, 32.0], [31.2, 32.0], [31.3, 32.0], [31.4, 32.0], [31.5, 32.0], [31.6, 32.0], [31.7, 32.0], [31.8, 32.0], [31.9, 32.0], [32.0, 32.0], [32.1, 32.0], [32.2, 32.0], [32.3, 32.0], [32.4, 32.0], [32.5, 32.0], [32.6, 32.0], [32.7, 32.0], [32.8, 32.0], [32.9, 32.0], [33.0, 32.0], [33.1, 32.0], [33.2, 33.0], [33.3, 33.0], [33.4, 33.0], [33.5, 33.0], [33.6, 33.0], [33.7, 33.0], [33.8, 33.0], [33.9, 33.0], [34.0, 33.0], [34.1, 33.0], [34.2, 33.0], [34.3, 33.0], [34.4, 33.0], [34.5, 33.0], [34.6, 33.0], [34.7, 33.0], [34.8, 33.0], [34.9, 33.0], [35.0, 33.0], [35.1, 33.0], [35.2, 33.0], [35.3, 33.0], [35.4, 34.0], [35.5, 34.0], [35.6, 34.0], [35.7, 34.0], [35.8, 34.0], [35.9, 34.0], [36.0, 34.0], [36.1, 34.0], [36.2, 34.0], [36.3, 34.0], [36.4, 34.0], [36.5, 34.0], [36.6, 34.0], [36.7, 34.0], [36.8, 34.0], [36.9, 34.0], [37.0, 34.0], [37.1, 34.0], [37.2, 34.0], [37.3, 34.0], [37.4, 34.0], [37.5, 35.0], [37.6, 35.0], [37.7, 35.0], [37.8, 35.0], [37.9, 35.0], [38.0, 35.0], [38.1, 35.0], [38.2, 35.0], [38.3, 35.0], [38.4, 35.0], [38.5, 35.0], [38.6, 35.0], [38.7, 35.0], [38.8, 35.0], [38.9, 35.0], [39.0, 35.0], [39.1, 35.0], [39.2, 35.0], [39.3, 35.0], [39.4, 36.0], [39.5, 36.0], [39.6, 36.0], [39.7, 36.0], [39.8, 36.0], [39.9, 36.0], [40.0, 36.0], [40.1, 36.0], [40.2, 36.0], [40.3, 36.0], [40.4, 36.0], [40.5, 36.0], [40.6, 36.0], [40.7, 36.0], [40.8, 36.0], [40.9, 36.0], [41.0, 36.0], [41.1, 36.0], [41.2, 36.0], [41.3, 37.0], [41.4, 37.0], [41.5, 37.0], [41.6, 37.0], [41.7, 37.0], [41.8, 37.0], [41.9, 37.0], [42.0, 37.0], [42.1, 37.0], [42.2, 37.0], [42.3, 37.0], [42.4, 37.0], [42.5, 37.0], [42.6, 37.0], [42.7, 37.0], [42.8, 37.0], [42.9, 37.0], [43.0, 38.0], [43.1, 38.0], [43.2, 38.0], [43.3, 38.0], [43.4, 38.0], [43.5, 38.0], [43.6, 38.0], [43.7, 38.0], [43.8, 38.0], [43.9, 38.0], [44.0, 38.0], [44.1, 38.0], [44.2, 38.0], [44.3, 38.0], [44.4, 38.0], [44.5, 38.0], [44.6, 39.0], [44.7, 39.0], [44.8, 39.0], [44.9, 39.0], [45.0, 39.0], [45.1, 39.0], [45.2, 39.0], [45.3, 39.0], [45.4, 39.0], [45.5, 39.0], [45.6, 39.0], [45.7, 39.0], [45.8, 39.0], [45.9, 39.0], [46.0, 39.0], [46.1, 39.0], [46.2, 40.0], [46.3, 40.0], [46.4, 40.0], [46.5, 40.0], [46.6, 40.0], [46.7, 40.0], [46.8, 40.0], [46.9, 40.0], [47.0, 40.0], [47.1, 40.0], [47.2, 40.0], [47.3, 40.0], [47.4, 40.0], [47.5, 40.0], [47.6, 40.0], [47.7, 40.0], [47.8, 41.0], [47.9, 41.0], [48.0, 41.0], [48.1, 41.0], [48.2, 41.0], [48.3, 41.0], [48.4, 41.0], [48.5, 41.0], [48.6, 41.0], [48.7, 41.0], [48.8, 41.0], [48.9, 41.0], [49.0, 41.0], [49.1, 41.0], [49.2, 41.0], [49.3, 42.0], [49.4, 42.0], [49.5, 42.0], [49.6, 42.0], [49.7, 42.0], [49.8, 42.0], [49.9, 42.0], [50.0, 42.0], [50.1, 42.0], [50.2, 42.0], [50.3, 42.0], [50.4, 42.0], [50.5, 42.0], [50.6, 42.0], [50.7, 43.0], [50.8, 43.0], [50.9, 43.0], [51.0, 43.0], [51.1, 43.0], [51.2, 43.0], [51.3, 43.0], [51.4, 43.0], [51.5, 43.0], [51.6, 43.0], [51.7, 43.0], [51.8, 43.0], [51.9, 43.0], [52.0, 44.0], [52.1, 44.0], [52.2, 44.0], [52.3, 44.0], [52.4, 44.0], [52.5, 44.0], [52.6, 44.0], [52.7, 44.0], [52.8, 44.0], [52.9, 44.0], [53.0, 44.0], [53.1, 44.0], [53.2, 44.0], [53.3, 45.0], [53.4, 45.0], [53.5, 45.0], [53.6, 45.0], [53.7, 45.0], [53.8, 45.0], [53.9, 45.0], [54.0, 45.0], [54.1, 45.0], [54.2, 45.0], [54.3, 45.0], [54.4, 45.0], [54.5, 46.0], [54.6, 46.0], [54.7, 46.0], [54.8, 46.0], [54.9, 46.0], [55.0, 46.0], [55.1, 46.0], [55.2, 46.0], [55.3, 46.0], [55.4, 46.0], [55.5, 46.0], [55.6, 46.0], [55.7, 47.0], [55.8, 47.0], [55.9, 47.0], [56.0, 47.0], [56.1, 47.0], [56.2, 47.0], [56.3, 47.0], [56.4, 47.0], [56.5, 47.0], [56.6, 47.0], [56.7, 47.0], [56.8, 48.0], [56.9, 48.0], [57.0, 48.0], [57.1, 48.0], [57.2, 48.0], [57.3, 48.0], [57.4, 48.0], [57.5, 48.0], [57.6, 48.0], [57.7, 48.0], [57.8, 48.0], [57.9, 48.0], [58.0, 49.0], [58.1, 49.0], [58.2, 49.0], [58.3, 49.0], [58.4, 49.0], [58.5, 49.0], [58.6, 49.0], [58.7, 49.0], [58.8, 49.0], [58.9, 49.0], [59.0, 49.0], [59.1, 50.0], [59.2, 50.0], [59.3, 50.0], [59.4, 50.0], [59.5, 50.0], [59.6, 50.0], [59.7, 50.0], [59.8, 50.0], [59.9, 50.0], [60.0, 50.0], [60.1, 51.0], [60.2, 51.0], [60.3, 51.0], [60.4, 51.0], [60.5, 51.0], [60.6, 51.0], [60.7, 51.0], [60.8, 51.0], [60.9, 51.0], [61.0, 52.0], [61.1, 52.0], [61.2, 52.0], [61.3, 52.0], [61.4, 52.0], [61.5, 52.0], [61.6, 52.0], [61.7, 52.0], [61.8, 52.0], [61.9, 52.0], [62.0, 53.0], [62.1, 53.0], [62.2, 53.0], [62.3, 53.0], [62.4, 53.0], [62.5, 53.0], [62.6, 53.0], [62.7, 53.0], [62.8, 54.0], [62.9, 54.0], [63.0, 54.0], [63.1, 54.0], [63.2, 54.0], [63.3, 54.0], [63.4, 54.0], [63.5, 54.0], [63.6, 54.0], [63.7, 55.0], [63.8, 55.0], [63.9, 55.0], [64.0, 55.0], [64.1, 55.0], [64.2, 55.0], [64.3, 55.0], [64.4, 55.0], [64.5, 55.0], [64.6, 56.0], [64.7, 56.0], [64.8, 56.0], [64.9, 56.0], [65.0, 56.0], [65.1, 56.0], [65.2, 56.0], [65.3, 56.0], [65.4, 57.0], [65.5, 57.0], [65.6, 57.0], [65.7, 57.0], [65.8, 57.0], [65.9, 57.0], [66.0, 57.0], [66.1, 57.0], [66.2, 58.0], [66.3, 58.0], [66.4, 58.0], [66.5, 58.0], [66.6, 58.0], [66.7, 58.0], [66.8, 58.0], [66.9, 59.0], [67.0, 59.0], [67.1, 59.0], [67.2, 59.0], [67.3, 59.0], [67.4, 59.0], [67.5, 59.0], [67.6, 59.0], [67.7, 60.0], [67.8, 60.0], [67.9, 60.0], [68.0, 60.0], [68.1, 60.0], [68.2, 60.0], [68.3, 60.0], [68.4, 61.0], [68.5, 61.0], [68.6, 61.0], [68.7, 61.0], [68.8, 61.0], [68.9, 61.0], [69.0, 62.0], [69.1, 62.0], [69.2, 62.0], [69.3, 62.0], [69.4, 62.0], [69.5, 62.0], [69.6, 62.0], [69.7, 63.0], [69.8, 63.0], [69.9, 63.0], [70.0, 63.0], [70.1, 63.0], [70.2, 63.0], [70.3, 64.0], [70.4, 64.0], [70.5, 64.0], [70.6, 64.0], [70.7, 64.0], [70.8, 64.0], [70.9, 65.0], [71.0, 65.0], [71.1, 65.0], [71.2, 65.0], [71.3, 65.0], [71.4, 65.0], [71.5, 65.0], [71.6, 66.0], [71.7, 66.0], [71.8, 66.0], [71.9, 66.0], [72.0, 66.0], [72.1, 67.0], [72.2, 67.0], [72.3, 67.0], [72.4, 67.0], [72.5, 67.0], [72.6, 67.0], [72.7, 68.0], [72.8, 68.0], [72.9, 68.0], [73.0, 68.0], [73.1, 68.0], [73.2, 69.0], [73.3, 69.0], [73.4, 69.0], [73.5, 69.0], [73.6, 69.0], [73.7, 69.0], [73.8, 70.0], [73.9, 70.0], [74.0, 70.0], [74.1, 70.0], [74.2, 70.0], [74.3, 71.0], [74.4, 71.0], [74.5, 71.0], [74.6, 71.0], [74.7, 71.0], [74.8, 71.0], [74.9, 72.0], [75.0, 72.0], [75.1, 72.0], [75.2, 72.0], [75.3, 72.0], [75.4, 73.0], [75.5, 73.0], [75.6, 73.0], [75.7, 73.0], [75.8, 73.0], [75.9, 74.0], [76.0, 74.0], [76.1, 74.0], [76.2, 74.0], [76.3, 75.0], [76.4, 75.0], [76.5, 75.0], [76.6, 75.0], [76.7, 75.0], [76.8, 76.0], [76.9, 76.0], [77.0, 76.0], [77.1, 76.0], [77.2, 77.0], [77.3, 77.0], [77.4, 77.0], [77.5, 77.0], [77.6, 77.0], [77.7, 78.0], [77.8, 78.0], [77.9, 78.0], [78.0, 78.0], [78.1, 79.0], [78.2, 79.0], [78.3, 79.0], [78.4, 79.0], [78.5, 79.0], [78.6, 80.0], [78.7, 80.0], [78.8, 80.0], [78.9, 80.0], [79.0, 81.0], [79.1, 81.0], [79.2, 81.0], [79.3, 81.0], [79.4, 82.0], [79.5, 82.0], [79.6, 82.0], [79.7, 82.0], [79.8, 83.0], [79.9, 83.0], [80.0, 83.0], [80.1, 83.0], [80.2, 84.0], [80.3, 84.0], [80.4, 84.0], [80.5, 84.0], [80.6, 85.0], [80.7, 85.0], [80.8, 85.0], [80.9, 85.0], [81.0, 86.0], [81.1, 86.0], [81.2, 86.0], [81.3, 86.0], [81.4, 87.0], [81.5, 87.0], [81.6, 87.0], [81.7, 87.0], [81.8, 88.0], [81.9, 88.0], [82.0, 88.0], [82.1, 88.0], [82.2, 89.0], [82.3, 89.0], [82.4, 89.0], [82.5, 90.0], [82.6, 90.0], [82.7, 90.0], [82.8, 91.0], [82.9, 91.0], [83.0, 91.0], [83.1, 91.0], [83.2, 92.0], [83.3, 92.0], [83.4, 92.0], [83.5, 93.0], [83.6, 93.0], [83.7, 93.0], [83.8, 94.0], [83.9, 94.0], [84.0, 94.0], [84.1, 95.0], [84.2, 95.0], [84.3, 95.0], [84.4, 96.0], [84.5, 96.0], [84.6, 96.0], [84.7, 97.0], [84.8, 97.0], [84.9, 97.0], [85.0, 98.0], [85.1, 98.0], [85.2, 98.0], [85.3, 99.0], [85.4, 99.0], [85.5, 99.0], [85.6, 100.0], [85.7, 100.0], [85.8, 100.0], [85.9, 101.0], [86.0, 101.0], [86.1, 101.0], [86.2, 102.0], [86.3, 102.0], [86.4, 102.0], [86.5, 103.0], [86.6, 103.0], [86.7, 104.0], [86.8, 104.0], [86.9, 104.0], [87.0, 105.0], [87.1, 105.0], [87.2, 106.0], [87.3, 106.0], [87.4, 106.0], [87.5, 107.0], [87.6, 107.0], [87.7, 108.0], [87.8, 108.0], [87.9, 109.0], [88.0, 109.0], [88.1, 109.0], [88.2, 110.0], [88.3, 110.0], [88.4, 111.0], [88.5, 111.0], [88.6, 112.0], [88.7, 112.0], [88.8, 113.0], [88.9, 113.0], [89.0, 114.0], [89.1, 114.0], [89.2, 114.0], [89.3, 115.0], [89.4, 116.0], [89.5, 116.0], [89.6, 117.0], [89.7, 117.0], [89.8, 118.0], [89.9, 118.0], [90.0, 119.0], [90.1, 120.0], [90.2, 120.0], [90.3, 121.0], [90.4, 121.0], [90.5, 122.0], [90.6, 123.0], [90.7, 123.0], [90.8, 124.0], [90.9, 125.0], [91.0, 125.0], [91.1, 126.0], [91.2, 127.0], [91.3, 127.0], [91.4, 128.0], [91.5, 129.0], [91.6, 130.0], [91.7, 130.0], [91.8, 131.0], [91.9, 132.0], [92.0, 132.0], [92.1, 133.0], [92.2, 134.0], [92.3, 135.0], [92.4, 136.0], [92.5, 136.0], [92.6, 137.0], [92.7, 138.0], [92.8, 139.0], [92.9, 140.0], [93.0, 140.0], [93.1, 141.0], [93.2, 142.0], [93.3, 143.0], [93.4, 144.0], [93.5, 145.0], [93.6, 146.0], [93.7, 147.0], [93.8, 148.0], [93.9, 149.0], [94.0, 150.0], [94.1, 151.0], [94.2, 152.0], [94.3, 152.0], [94.4, 154.0], [94.5, 155.0], [94.6, 156.0], [94.7, 157.0], [94.8, 158.0], [94.9, 159.0], [95.0, 160.0], [95.1, 161.0], [95.2, 162.0], [95.3, 164.0], [95.4, 165.0], [95.5, 167.0], [95.6, 168.0], [95.7, 170.0], [95.8, 171.0], [95.9, 172.0], [96.0, 174.0], [96.1, 176.0], [96.2, 178.0], [96.3, 179.0], [96.4, 181.0], [96.5, 183.0], [96.6, 185.0], [96.7, 187.0], [96.8, 189.0], [96.9, 191.0], [97.0, 193.0], [97.1, 195.0], [97.2, 197.0], [97.3, 199.0], [97.4, 201.0], [97.5, 203.0], [97.6, 205.0], [97.7, 208.0], [97.8, 212.0], [97.9, 215.0], [98.0, 219.0], [98.1, 222.0], [98.2, 226.0], [98.3, 229.0], [98.4, 234.0], [98.5, 239.0], [98.6, 243.0], [98.7, 247.0], [98.8, 251.0], [98.9, 257.0], [99.0, 262.0], [99.1, 269.0], [99.2, 278.0], [99.3, 286.0], [99.4, 302.0], [99.5, 316.0], [99.6, 335.0], [99.7, 356.0], [99.8, 383.0], [99.9, 418.0]], "isOverall": false, "label": "访问首页", "isController": false}, {"data": [[0.0, 11.0], [0.1, 17.0], [0.2, 18.0], [0.3, 19.0], [0.4, 20.0], [0.5, 20.0], [0.6, 21.0], [0.7, 21.0], [0.8, 22.0], [0.9, 22.0], [1.0, 22.0], [1.1, 23.0], [1.2, 23.0], [1.3, 23.0], [1.4, 23.0], [1.5, 24.0], [1.6, 24.0], [1.7, 24.0], [1.8, 24.0], [1.9, 24.0], [2.0, 25.0], [2.1, 25.0], [2.2, 25.0], [2.3, 25.0], [2.4, 25.0], [2.5, 26.0], [2.6, 26.0], [2.7, 26.0], [2.8, 26.0], [2.9, 26.0], [3.0, 26.0], [3.1, 27.0], [3.2, 27.0], [3.3, 27.0], [3.4, 27.0], [3.5, 27.0], [3.6, 27.0], [3.7, 28.0], [3.8, 28.0], [3.9, 28.0], [4.0, 28.0], [4.1, 28.0], [4.2, 28.0], [4.3, 29.0], [4.4, 29.0], [4.5, 29.0], [4.6, 29.0], [4.7, 29.0], [4.8, 29.0], [4.9, 30.0], [5.0, 30.0], [5.1, 30.0], [5.2, 30.0], [5.3, 30.0], [5.4, 30.0], [5.5, 30.0], [5.6, 31.0], [5.7, 31.0], [5.8, 31.0], [5.9, 31.0], [6.0, 31.0], [6.1, 31.0], [6.2, 31.0], [6.3, 32.0], [6.4, 32.0], [6.5, 32.0], [6.6, 32.0], [6.7, 32.0], [6.8, 32.0], [6.9, 32.0], [7.0, 33.0], [7.1, 33.0], [7.2, 33.0], [7.3, 33.0], [7.4, 33.0], [7.5, 33.0], [7.6, 34.0], [7.7, 34.0], [7.8, 34.0], [7.9, 34.0], [8.0, 34.0], [8.1, 34.0], [8.2, 35.0], [8.3, 35.0], [8.4, 35.0], [8.5, 35.0], [8.6, 35.0], [8.7, 36.0], [8.8, 36.0], [8.9, 36.0], [9.0, 36.0], [9.1, 36.0], [9.2, 36.0], [9.3, 37.0], [9.4, 37.0], [9.5, 37.0], [9.6, 37.0], [9.7, 37.0], [9.8, 38.0], [9.9, 38.0], [10.0, 38.0], [10.1, 38.0], [10.2, 38.0], [10.3, 38.0], [10.4, 39.0], [10.5, 39.0], [10.6, 39.0], [10.7, 39.0], [10.8, 39.0], [10.9, 40.0], [11.0, 40.0], [11.1, 40.0], [11.2, 40.0], [11.3, 41.0], [11.4, 41.0], [11.5, 41.0], [11.6, 41.0], [11.7, 41.0], [11.8, 42.0], [11.9, 42.0], [12.0, 42.0], [12.1, 42.0], [12.2, 42.0], [12.3, 43.0], [12.4, 43.0], [12.5, 43.0], [12.6, 43.0], [12.7, 44.0], [12.8, 44.0], [12.9, 44.0], [13.0, 44.0], [13.1, 45.0], [13.2, 45.0], [13.3, 45.0], [13.4, 45.0], [13.5, 45.0], [13.6, 46.0], [13.7, 46.0], [13.8, 46.0], [13.9, 46.0], [14.0, 47.0], [14.1, 47.0], [14.2, 47.0], [14.3, 47.0], [14.4, 48.0], [14.5, 48.0], [14.6, 48.0], [14.7, 48.0], [14.8, 49.0], [14.9, 49.0], [15.0, 49.0], [15.1, 49.0], [15.2, 50.0], [15.3, 50.0], [15.4, 50.0], [15.5, 50.0], [15.6, 51.0], [15.7, 51.0], [15.8, 51.0], [15.9, 51.0], [16.0, 51.0], [16.1, 52.0], [16.2, 52.0], [16.3, 52.0], [16.4, 52.0], [16.5, 53.0], [16.6, 53.0], [16.7, 53.0], [16.8, 53.0], [16.9, 54.0], [17.0, 54.0], [17.1, 54.0], [17.2, 54.0], [17.3, 55.0], [17.4, 55.0], [17.5, 55.0], [17.6, 55.0], [17.7, 55.0], [17.8, 56.0], [17.9, 56.0], [18.0, 56.0], [18.1, 56.0], [18.2, 57.0], [18.3, 57.0], [18.4, 57.0], [18.5, 57.0], [18.6, 58.0], [18.7, 58.0], [18.8, 58.0], [18.9, 58.0], [19.0, 58.0], [19.1, 59.0], [19.2, 59.0], [19.3, 59.0], [19.4, 59.0], [19.5, 60.0], [19.6, 60.0], [19.7, 60.0], [19.8, 60.0], [19.9, 60.0], [20.0, 61.0], [20.1, 61.0], [20.2, 61.0], [20.3, 61.0], [20.4, 61.0], [20.5, 62.0], [20.6, 62.0], [20.7, 62.0], [20.8, 62.0], [20.9, 62.0], [21.0, 63.0], [21.1, 63.0], [21.2, 63.0], [21.3, 63.0], [21.4, 64.0], [21.5, 64.0], [21.6, 64.0], [21.7, 64.0], [21.8, 64.0], [21.9, 65.0], [22.0, 65.0], [22.1, 65.0], [22.2, 65.0], [22.3, 65.0], [22.4, 66.0], [22.5, 66.0], [22.6, 66.0], [22.7, 66.0], [22.8, 66.0], [22.9, 67.0], [23.0, 67.0], [23.1, 67.0], [23.2, 67.0], [23.3, 67.0], [23.4, 68.0], [23.5, 68.0], [23.6, 68.0], [23.7, 68.0], [23.8, 68.0], [23.9, 69.0], [24.0, 69.0], [24.1, 69.0], [24.2, 69.0], [24.3, 69.0], [24.4, 69.0], [24.5, 70.0], [24.6, 70.0], [24.7, 70.0], [24.8, 70.0], [24.9, 70.0], [25.0, 71.0], [25.1, 71.0], [25.2, 71.0], [25.3, 71.0], [25.4, 71.0], [25.5, 71.0], [25.6, 72.0], [25.7, 72.0], [25.8, 72.0], [25.9, 72.0], [26.0, 72.0], [26.1, 72.0], [26.2, 73.0], [26.3, 73.0], [26.4, 73.0], [26.5, 73.0], [26.6, 73.0], [26.7, 73.0], [26.8, 74.0], [26.9, 74.0], [27.0, 74.0], [27.1, 74.0], [27.2, 74.0], [27.3, 74.0], [27.4, 75.0], [27.5, 75.0], [27.6, 75.0], [27.7, 75.0], [27.8, 75.0], [27.9, 76.0], [28.0, 76.0], [28.1, 76.0], [28.2, 76.0], [28.3, 76.0], [28.4, 76.0], [28.5, 77.0], [28.6, 77.0], [28.7, 77.0], [28.8, 77.0], [28.9, 77.0], [29.0, 77.0], [29.1, 78.0], [29.2, 78.0], [29.3, 78.0], [29.4, 78.0], [29.5, 78.0], [29.6, 78.0], [29.7, 78.0], [29.8, 79.0], [29.9, 79.0], [30.0, 79.0], [30.1, 79.0], [30.2, 79.0], [30.3, 79.0], [30.4, 80.0], [30.5, 80.0], [30.6, 80.0], [30.7, 80.0], [30.8, 80.0], [30.9, 80.0], [31.0, 81.0], [31.1, 81.0], [31.2, 81.0], [31.3, 81.0], [31.4, 81.0], [31.5, 81.0], [31.6, 81.0], [31.7, 82.0], [31.8, 82.0], [31.9, 82.0], [32.0, 82.0], [32.1, 82.0], [32.2, 82.0], [32.3, 83.0], [32.4, 83.0], [32.5, 83.0], [32.6, 83.0], [32.7, 83.0], [32.8, 83.0], [32.9, 84.0], [33.0, 84.0], [33.1, 84.0], [33.2, 84.0], [33.3, 84.0], [33.4, 84.0], [33.5, 84.0], [33.6, 85.0], [33.7, 85.0], [33.8, 85.0], [33.9, 85.0], [34.0, 85.0], [34.1, 85.0], [34.2, 86.0], [34.3, 86.0], [34.4, 86.0], [34.5, 86.0], [34.6, 86.0], [34.7, 86.0], [34.8, 86.0], [34.9, 87.0], [35.0, 87.0], [35.1, 87.0], [35.2, 87.0], [35.3, 87.0], [35.4, 87.0], [35.5, 87.0], [35.6, 88.0], [35.7, 88.0], [35.8, 88.0], [35.9, 88.0], [36.0, 88.0], [36.1, 88.0], [36.2, 89.0], [36.3, 89.0], [36.4, 89.0], [36.5, 89.0], [36.6, 89.0], [36.7, 89.0], [36.8, 89.0], [36.9, 90.0], [37.0, 90.0], [37.1, 90.0], [37.2, 90.0], [37.3, 90.0], [37.4, 90.0], [37.5, 91.0], [37.6, 91.0], [37.7, 91.0], [37.8, 91.0], [37.9, 91.0], [38.0, 91.0], [38.1, 91.0], [38.2, 92.0], [38.3, 92.0], [38.4, 92.0], [38.5, 92.0], [38.6, 92.0], [38.7, 92.0], [38.8, 93.0], [38.9, 93.0], [39.0, 93.0], [39.1, 93.0], [39.2, 93.0], [39.3, 93.0], [39.4, 93.0], [39.5, 94.0], [39.6, 94.0], [39.7, 94.0], [39.8, 94.0], [39.9, 94.0], [40.0, 94.0], [40.1, 95.0], [40.2, 95.0], [40.3, 95.0], [40.4, 95.0], [40.5, 95.0], [40.6, 95.0], [40.7, 95.0], [40.8, 96.0], [40.9, 96.0], [41.0, 96.0], [41.1, 96.0], [41.2, 96.0], [41.3, 96.0], [41.4, 97.0], [41.5, 97.0], [41.6, 97.0], [41.7, 97.0], [41.8, 97.0], [41.9, 97.0], [42.0, 98.0], [42.1, 98.0], [42.2, 98.0], [42.3, 98.0], [42.4, 98.0], [42.5, 98.0], [42.6, 98.0], [42.7, 99.0], [42.8, 99.0], [42.9, 99.0], [43.0, 99.0], [43.1, 99.0], [43.2, 99.0], [43.3, 99.0], [43.4, 100.0], [43.5, 100.0], [43.6, 100.0], [43.7, 100.0], [43.8, 100.0], [43.9, 100.0], [44.0, 100.0], [44.1, 101.0], [44.2, 101.0], [44.3, 101.0], [44.4, 101.0], [44.5, 101.0], [44.6, 101.0], [44.7, 102.0], [44.8, 102.0], [44.9, 102.0], [45.0, 102.0], [45.1, 102.0], [45.2, 102.0], [45.3, 102.0], [45.4, 103.0], [45.5, 103.0], [45.6, 103.0], [45.7, 103.0], [45.8, 103.0], [45.9, 103.0], [46.0, 103.0], [46.1, 104.0], [46.2, 104.0], [46.3, 104.0], [46.4, 104.0], [46.5, 104.0], [46.6, 104.0], [46.7, 105.0], [46.8, 105.0], [46.9, 105.0], [47.0, 105.0], [47.1, 105.0], [47.2, 105.0], [47.3, 105.0], [47.4, 106.0], [47.5, 106.0], [47.6, 106.0], [47.7, 106.0], [47.8, 106.0], [47.9, 106.0], [48.0, 107.0], [48.1, 107.0], [48.2, 107.0], [48.3, 107.0], [48.4, 107.0], [48.5, 107.0], [48.6, 107.0], [48.7, 108.0], [48.8, 108.0], [48.9, 108.0], [49.0, 108.0], [49.1, 108.0], [49.2, 108.0], [49.3, 108.0], [49.4, 109.0], [49.5, 109.0], [49.6, 109.0], [49.7, 109.0], [49.8, 109.0], [49.9, 109.0], [50.0, 109.0], [50.1, 110.0], [50.2, 110.0], [50.3, 110.0], [50.4, 110.0], [50.5, 110.0], [50.6, 110.0], [50.7, 111.0], [50.8, 111.0], [50.9, 111.0], [51.0, 111.0], [51.1, 111.0], [51.2, 111.0], [51.3, 111.0], [51.4, 112.0], [51.5, 112.0], [51.6, 112.0], [51.7, 112.0], [51.8, 112.0], [51.9, 112.0], [52.0, 113.0], [52.1, 113.0], [52.2, 113.0], [52.3, 113.0], [52.4, 113.0], [52.5, 113.0], [52.6, 113.0], [52.7, 114.0], [52.8, 114.0], [52.9, 114.0], [53.0, 114.0], [53.1, 114.0], [53.2, 114.0], [53.3, 115.0], [53.4, 115.0], [53.5, 115.0], [53.6, 115.0], [53.7, 115.0], [53.8, 115.0], [53.9, 115.0], [54.0, 116.0], [54.1, 116.0], [54.2, 116.0], [54.3, 116.0], [54.4, 116.0], [54.5, 116.0], [54.6, 117.0], [54.7, 117.0], [54.8, 117.0], [54.9, 117.0], [55.0, 117.0], [55.1, 117.0], [55.2, 118.0], [55.3, 118.0], [55.4, 118.0], [55.5, 118.0], [55.6, 118.0], [55.7, 118.0], [55.8, 119.0], [55.9, 119.0], [56.0, 119.0], [56.1, 119.0], [56.2, 119.0], [56.3, 120.0], [56.4, 120.0], [56.5, 120.0], [56.6, 120.0], [56.7, 120.0], [56.8, 120.0], [56.9, 121.0], [57.0, 121.0], [57.1, 121.0], [57.2, 121.0], [57.3, 121.0], [57.4, 122.0], [57.5, 122.0], [57.6, 122.0], [57.7, 122.0], [57.8, 122.0], [57.9, 122.0], [58.0, 123.0], [58.1, 123.0], [58.2, 123.0], [58.3, 123.0], [58.4, 123.0], [58.5, 124.0], [58.6, 124.0], [58.7, 124.0], [58.8, 124.0], [58.9, 124.0], [59.0, 125.0], [59.1, 125.0], [59.2, 125.0], [59.3, 125.0], [59.4, 125.0], [59.5, 126.0], [59.6, 126.0], [59.7, 126.0], [59.8, 126.0], [59.9, 126.0], [60.0, 127.0], [60.1, 127.0], [60.2, 127.0], [60.3, 127.0], [60.4, 127.0], [60.5, 128.0], [60.6, 128.0], [60.7, 128.0], [60.8, 128.0], [60.9, 128.0], [61.0, 129.0], [61.1, 129.0], [61.2, 129.0], [61.3, 129.0], [61.4, 129.0], [61.5, 130.0], [61.6, 130.0], [61.7, 130.0], [61.8, 130.0], [61.9, 131.0], [62.0, 131.0], [62.1, 131.0], [62.2, 131.0], [62.3, 131.0], [62.4, 132.0], [62.5, 132.0], [62.6, 132.0], [62.7, 132.0], [62.8, 133.0], [62.9, 133.0], [63.0, 133.0], [63.1, 133.0], [63.2, 133.0], [63.3, 134.0], [63.4, 134.0], [63.5, 134.0], [63.6, 134.0], [63.7, 134.0], [63.8, 135.0], [63.9, 135.0], [64.0, 135.0], [64.1, 135.0], [64.2, 136.0], [64.3, 136.0], [64.4, 136.0], [64.5, 136.0], [64.6, 136.0], [64.7, 137.0], [64.8, 137.0], [64.9, 137.0], [65.0, 137.0], [65.1, 137.0], [65.2, 138.0], [65.3, 138.0], [65.4, 138.0], [65.5, 138.0], [65.6, 138.0], [65.7, 139.0], [65.8, 139.0], [65.9, 139.0], [66.0, 139.0], [66.1, 139.0], [66.2, 140.0], [66.3, 140.0], [66.4, 140.0], [66.5, 140.0], [66.6, 140.0], [66.7, 141.0], [66.8, 141.0], [66.9, 141.0], [67.0, 141.0], [67.1, 142.0], [67.2, 142.0], [67.3, 142.0], [67.4, 142.0], [67.5, 142.0], [67.6, 143.0], [67.7, 143.0], [67.8, 143.0], [67.9, 143.0], [68.0, 143.0], [68.1, 144.0], [68.2, 144.0], [68.3, 144.0], [68.4, 144.0], [68.5, 144.0], [68.6, 145.0], [68.7, 145.0], [68.8, 145.0], [68.9, 145.0], [69.0, 145.0], [69.1, 146.0], [69.2, 146.0], [69.3, 146.0], [69.4, 146.0], [69.5, 146.0], [69.6, 147.0], [69.7, 147.0], [69.8, 147.0], [69.9, 147.0], [70.0, 147.0], [70.1, 148.0], [70.2, 148.0], [70.3, 148.0], [70.4, 148.0], [70.5, 148.0], [70.6, 149.0], [70.7, 149.0], [70.8, 149.0], [70.9, 149.0], [71.0, 149.0], [71.1, 150.0], [71.2, 150.0], [71.3, 150.0], [71.4, 150.0], [71.5, 150.0], [71.6, 151.0], [71.7, 151.0], [71.8, 151.0], [71.9, 151.0], [72.0, 151.0], [72.1, 152.0], [72.2, 152.0], [72.3, 152.0], [72.4, 152.0], [72.5, 152.0], [72.6, 153.0], [72.7, 153.0], [72.8, 153.0], [72.9, 153.0], [73.0, 153.0], [73.1, 154.0], [73.2, 154.0], [73.3, 154.0], [73.4, 154.0], [73.5, 154.0], [73.6, 155.0], [73.7, 155.0], [73.8, 155.0], [73.9, 155.0], [74.0, 155.0], [74.1, 156.0], [74.2, 156.0], [74.3, 156.0], [74.4, 156.0], [74.5, 156.0], [74.6, 157.0], [74.7, 157.0], [74.8, 157.0], [74.9, 157.0], [75.0, 158.0], [75.1, 158.0], [75.2, 158.0], [75.3, 158.0], [75.4, 158.0], [75.5, 159.0], [75.6, 159.0], [75.7, 159.0], [75.8, 159.0], [75.9, 159.0], [76.0, 160.0], [76.1, 160.0], [76.2, 160.0], [76.3, 160.0], [76.4, 160.0], [76.5, 161.0], [76.6, 161.0], [76.7, 161.0], [76.8, 161.0], [76.9, 162.0], [77.0, 162.0], [77.1, 162.0], [77.2, 162.0], [77.3, 162.0], [77.4, 163.0], [77.5, 163.0], [77.6, 163.0], [77.7, 163.0], [77.8, 163.0], [77.9, 164.0], [78.0, 164.0], [78.1, 164.0], [78.2, 164.0], [78.3, 165.0], [78.4, 165.0], [78.5, 165.0], [78.6, 165.0], [78.7, 165.0], [78.8, 166.0], [78.9, 166.0], [79.0, 166.0], [79.1, 166.0], [79.2, 167.0], [79.3, 167.0], [79.4, 167.0], [79.5, 167.0], [79.6, 168.0], [79.7, 168.0], [79.8, 168.0], [79.9, 168.0], [80.0, 169.0], [80.1, 169.0], [80.2, 169.0], [80.3, 169.0], [80.4, 170.0], [80.5, 170.0], [80.6, 170.0], [80.7, 170.0], [80.8, 171.0], [80.9, 171.0], [81.0, 171.0], [81.1, 171.0], [81.2, 172.0], [81.3, 172.0], [81.4, 172.0], [81.5, 173.0], [81.6, 173.0], [81.7, 173.0], [81.8, 173.0], [81.9, 174.0], [82.0, 174.0], [82.1, 174.0], [82.2, 175.0], [82.3, 175.0], [82.4, 175.0], [82.5, 175.0], [82.6, 176.0], [82.7, 176.0], [82.8, 176.0], [82.9, 177.0], [83.0, 177.0], [83.1, 177.0], [83.2, 178.0], [83.3, 178.0], [83.4, 178.0], [83.5, 179.0], [83.6, 179.0], [83.7, 179.0], [83.8, 180.0], [83.9, 180.0], [84.0, 181.0], [84.1, 181.0], [84.2, 181.0], [84.3, 182.0], [84.4, 182.0], [84.5, 183.0], [84.6, 183.0], [84.7, 183.0], [84.8, 184.0], [84.9, 184.0], [85.0, 185.0], [85.1, 185.0], [85.2, 185.0], [85.3, 186.0], [85.4, 186.0], [85.5, 187.0], [85.6, 187.0], [85.7, 188.0], [85.8, 188.0], [85.9, 189.0], [86.0, 189.0], [86.1, 190.0], [86.2, 190.0], [86.3, 191.0], [86.4, 191.0], [86.5, 192.0], [86.6, 192.0], [86.7, 193.0], [86.8, 193.0], [86.9, 194.0], [87.0, 194.0], [87.1, 195.0], [87.2, 196.0], [87.3, 196.0], [87.4, 197.0], [87.5, 197.0], [87.6, 198.0], [87.7, 198.0], [87.8, 199.0], [87.9, 200.0], [88.0, 200.0], [88.1, 201.0], [88.2, 202.0], [88.3, 202.0], [88.4, 203.0], [88.5, 203.0], [88.6, 204.0], [88.7, 205.0], [88.8, 206.0], [88.9, 206.0], [89.0, 207.0], [89.1, 208.0], [89.2, 208.0], [89.3, 209.0], [89.4, 210.0], [89.5, 211.0], [89.6, 212.0], [89.7, 212.0], [89.8, 213.0], [89.9, 214.0], [90.0, 215.0], [90.1, 215.0], [90.2, 216.0], [90.3, 217.0], [90.4, 218.0], [90.5, 219.0], [90.6, 220.0], [90.7, 221.0], [90.8, 222.0], [90.9, 223.0], [91.0, 224.0], [91.1, 225.0], [91.2, 226.0], [91.3, 227.0], [91.4, 228.0], [91.5, 228.0], [91.6, 229.0], [91.7, 230.0], [91.8, 231.0], [91.9, 232.0], [92.0, 234.0], [92.1, 235.0], [92.2, 236.0], [92.3, 237.0], [92.4, 238.0], [92.5, 239.0], [92.6, 241.0], [92.7, 242.0], [92.8, 243.0], [92.9, 244.0], [93.0, 245.0], [93.1, 246.0], [93.2, 248.0], [93.3, 249.0], [93.4, 250.0], [93.5, 251.0], [93.6, 253.0], [93.7, 254.0], [93.8, 255.0], [93.9, 257.0], [94.0, 258.0], [94.1, 259.0], [94.2, 261.0], [94.3, 262.0], [94.4, 264.0], [94.5, 265.0], [94.6, 266.0], [94.7, 268.0], [94.8, 269.0], [94.9, 270.0], [95.0, 272.0], [95.1, 273.0], [95.2, 275.0], [95.3, 276.0], [95.4, 277.0], [95.5, 279.0], [95.6, 280.0], [95.7, 282.0], [95.8, 283.0], [95.9, 285.0], [96.0, 286.0], [96.1, 288.0], [96.2, 290.0], [96.3, 292.0], [96.4, 294.0], [96.5, 296.0], [96.6, 298.0], [96.7, 299.0], [96.8, 301.0], [96.9, 303.0], [97.0, 306.0], [97.1, 308.0], [97.2, 310.0], [97.3, 312.0], [97.4, 315.0], [97.5, 318.0], [97.6, 320.0], [97.7, 323.0], [97.8, 326.0], [97.9, 329.0], [98.0, 332.0], [98.1, 337.0], [98.2, 342.0], [98.3, 347.0], [98.4, 352.0], [98.5, 358.0], [98.6, 363.0], [98.7, 369.0], [98.8, 377.0], [98.9, 384.0], [99.0, 391.0], [99.1, 399.0], [99.2, 406.0], [99.3, 416.0], [99.4, 429.0], [99.5, 442.0], [99.6, 459.0], [99.7, 479.0], [99.8, 509.0], [99.9, 560.0]], "isOverall": false, "label": "FundView_Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 342233.0, "series": [{"data": [[0.0, 342233.0], [1100.0, 1.0], [300.0, 1797.0], [600.0, 14.0], [21000.0, 23.0], [700.0, 11.0], [100.0, 47122.0], [200.0, 8201.0], [400.0, 553.0], [800.0, 5.0], [500.0, 40.0]], "isOverall": false, "label": "访问首页", "isController": false}, {"data": [[0.0, 173380.0], [300.0, 9586.0], [600.0, 174.0], [1200.0, 1.0], [700.0, 50.0], [200.0, 35287.0], [400.0, 2664.0], [100.0, 178167.0], [800.0, 12.0], [900.0, 3.0], [500.0, 675.0], [1000.0, 1.0]], "isOverall": false, "label": "FundView_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 23.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 799011.0, "series": [{"data": [[0.0, 799011.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 966.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 23.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 55.648316151202614, "minX": 1.6314234E12, "maxY": 294.8726789771812, "series": [{"data": [[1.63142352E12, 201.83011337688353], [1.6314237E12, 288.1233990609108], [1.6314234E12, 55.648316151202614], [1.63142358E12, 250.32444447428543], [1.63142376E12, 139.19344553283702], [1.63142346E12, 151.1556265629341], [1.63142364E12, 294.8726789771812]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63142376E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11.499999999999996, "minX": 1.0, "maxY": 281.4, "series": [{"data": [[2.0, 11.499999999999996], [3.0, 11.733333333333334], [4.0, 26.302083333333318], [5.0, 40.00000000000001], [6.0, 17.25], [7.0, 28.312499999999993], [8.0, 23.375000000000004], [9.0, 25.628571428571416], [10.0, 25.787878787878785], [11.0, 25.314285714285717], [12.0, 30.46666666666667], [13.0, 82.44444444444443], [14.0, 27.02380952380952], [15.0, 33.078947368421055], [16.0, 23.571428571428573], [17.0, 34.44117647058824], [18.0, 22.625], [19.0, 26.355932203389827], [20.0, 34.41975308641975], [21.0, 45.35915492957746], [22.0, 27.520000000000003], [23.0, 31.288461538461537], [24.0, 28.974025974025967], [25.0, 27.799999999999997], [26.0, 102.22916666666664], [27.0, 53.37499999999999], [28.0, 30.600000000000005], [29.0, 33.77142857142858], [30.0, 25.305882352941172], [31.0, 132.92857142857144], [32.0, 45.06153846153847], [33.0, 32.240310077519375], [34.0, 25.808510638297868], [35.0, 31.836363636363632], [36.0, 26.82905982905982], [37.0, 26.80314960629921], [38.0, 28.794642857142847], [39.0, 39.626506024096386], [40.0, 37.34558823529414], [41.0, 30.86868686868685], [42.0, 34.87], [43.0, 25.062937062937056], [44.0, 28.79838709677418], [45.0, 22.89743589743591], [46.0, 30.15425531914893], [47.0, 30.46715328467153], [48.0, 27.20325203252033], [49.0, 26.34848484848485], [50.0, 27.719424460431654], [51.0, 29.7007874015748], [52.0, 32.541284403669714], [53.0, 27.037878787878796], [54.0, 36.42465753424658], [55.0, 46.59999999999996], [56.0, 30.171232876712338], [57.0, 26.617647058823525], [58.0, 25.39545454545454], [59.0, 39.62637362637361], [60.0, 32.762845849802325], [61.0, 48.3850574712644], [62.0, 34.61600000000001], [63.0, 33.93650793650794], [64.0, 45.91891891891892], [65.0, 33.340000000000025], [66.0, 35.68181818181819], [67.0, 28.01621621621622], [68.0, 31.173333333333332], [69.0, 23.618421052631565], [70.0, 28.381215469613263], [71.0, 32.35714285714284], [72.0, 27.958015267175576], [73.0, 27.648484848484852], [74.0, 27.034883720930235], [75.0, 28.67721518987342], [76.0, 25.101063829787236], [77.0, 24.964646464646453], [78.0, 26.372937293729372], [79.0, 33.85833333333333], [80.0, 47.512605042016816], [81.0, 27.264604810996573], [82.0, 38.08805031446539], [83.0, 40.59116022099447], [84.0, 76.67039106145252], [85.0, 32.05913978494623], [86.0, 51.68846153846153], [87.0, 31.817567567567593], [88.0, 43.92384105960266], [89.0, 27.855999999999998], [90.0, 34.270833333333314], [91.0, 41.96442687747033], [92.0, 28.766917293233078], [93.0, 32.721854304635784], [94.0, 42.078787878787864], [95.0, 30.897196261682257], [96.0, 39.26470588235295], [97.0, 36.187500000000014], [98.0, 106.15789473684215], [99.0, 72.78625954198476], [100.0, 50.64676616915423], [101.0, 39.83333333333335], [102.0, 48.134782608695645], [103.0, 36.25903614457834], [104.0, 44.61000000000001], [105.0, 40.633333333333354], [106.0, 38.19072164948456], [107.0, 45.155210643015515], [108.0, 42.38227146814403], [109.0, 43.330464716006894], [110.0, 38.3006993006993], [111.0, 49.52356020942407], [112.0, 70.96428571428575], [113.0, 35.21399176954734], [114.0, 53.022222222222226], [115.0, 163.3354037267081], [116.0, 53.44049459041731], [117.0, 39.45047169811323], [118.0, 54.61392405063292], [119.0, 61.855721393034834], [120.0, 57.22381930184807], [121.0, 50.52834008097169], [122.0, 35.46611570247935], [123.0, 32.14016736401673], [124.0, 46.30514285714289], [125.0, 39.73449131513646], [126.0, 57.80777537796976], [127.0, 104.91101694915257], [128.0, 59.16203703703702], [129.0, 69.7160493827161], [130.0, 62.34074074074078], [131.0, 43.89087301587301], [132.0, 143.83534136546183], [133.0, 43.577557755775544], [134.0, 104.12188365650967], [135.0, 41.29315068493146], [136.0, 54.0702515177797], [137.0, 65.96190476190475], [138.0, 44.58468677494203], [139.0, 54.287439613526566], [140.0, 53.36363636363638], [141.0, 39.12598425196851], [142.0, 41.47598870056504], [143.0, 50.75797373358349], [144.0, 84.39195979899499], [145.0, 79.00000000000001], [146.0, 35.447876447876446], [147.0, 61.39138240574507], [148.0, 59.9279661016949], [149.0, 51.39569536423841], [150.0, 54.703933747411995], [151.0, 44.58974358974357], [152.0, 47.959367945823956], [153.0, 37.282105263157916], [154.0, 49.454128440367], [155.0, 47.28148148148153], [156.0, 54.677276091783924], [157.0, 51.68918918918917], [158.0, 51.88673621460516], [159.0, 45.067226890756295], [160.0, 39.335031847133806], [161.0, 39.13933895009721], [162.0, 39.34831714479335], [163.0, 45.39826526924453], [164.0, 49.70177073625338], [165.0, 40.75647058823525], [166.0, 45.2703941338221], [167.0, 70.43824802648328], [168.0, 50.29153295482582], [169.0, 45.658471166741094], [170.0, 54.064257028112486], [171.0, 45.027292576419185], [172.0, 44.50534759358288], [173.0, 104.69158878504668], [174.0, 116.0901287553648], [175.0, 31.82110912343474], [176.0, 35.96608892238126], [177.0, 64.1883802816902], [178.0, 65.54770575382378], [179.0, 67.42451923076918], [180.0, 85.86565752128665], [181.0, 57.673740053050416], [182.0, 93.71491228070175], [183.0, 120.2294117647059], [184.0, 122.99629629629631], [185.0, 112.79282868525904], [186.0, 132.18994413407816], [187.0, 156.83809523809515], [188.0, 97.30715935334867], [189.0, 122.8284023668639], [190.0, 104.97679814385147], [191.0, 68.1878172588832], [192.0, 52.6607142857143], [193.0, 68.14357053682893], [194.0, 52.98204264870923], [195.0, 49.856475716064764], [196.0, 41.630100921456744], [197.0, 42.95234078447925], [198.0, 38.02515723270438], [199.0, 47.5359010936757], [200.0, 39.21713238662395], [201.0, 46.6716190476191], [202.0, 48.86578449905484], [203.0, 66.07342657342657], [204.0, 39.70569620253166], [205.0, 45.968265682656835], [206.0, 49.617999999999974], [207.0, 45.66241134751771], [208.0, 49.26793013749528], [209.0, 67.66794921123514], [210.0, 70.25310015898266], [211.0, 60.755298651252396], [212.0, 61.44325955734415], [213.0, 73.72271671826637], [214.0, 67.72963169642853], [215.0, 80.5972461273667], [216.0, 58.672972972973], [217.0, 57.326518859775454], [218.0, 48.47251888512634], [219.0, 49.70619834710743], [220.0, 51.81892835146799], [221.0, 57.66814159292041], [222.0, 59.423015107682374], [223.0, 45.89032815198623], [224.0, 103.29806714140392], [225.0, 102.43421052631578], [226.0, 174.90441176470586], [227.0, 178.86075949367097], [228.0, 155.98169717138114], [229.0, 136.92943201376937], [230.0, 139.70798319327739], [231.0, 206.19999999999996], [232.0, 120.97945205479448], [233.0, 249.5532994923859], [234.0, 160.16110304789518], [235.0, 119.3268482490272], [236.0, 135.24271844660203], [237.0, 138.0188356164386], [238.0, 125.88], [239.0, 254.37894736842108], [240.0, 87.48795180722887], [241.0, 217.21804511278194], [242.0, 119.35238095238101], [243.0, 65.41558441558445], [244.0, 76.51116625310179], [245.0, 94.61267605633806], [246.0, 125.85217391304353], [247.0, 118.88607594936704], [248.0, 61.3908918406073], [249.0, 64.49927849927853], [250.0, 146.85227272727263], [251.0, 73.01597051597068], [252.0, 75.51843317972353], [253.0, 81.97171717171719], [254.0, 120.73691860465125], [255.0, 44.393741851369], [257.0, 60.793893129771014], [256.0, 42.824074074074026], [258.0, 57.34938271604938], [259.0, 35.75609756097559], [260.0, 49.761180679785305], [261.0, 45.445658424381875], [262.0, 43.429721815519684], [263.0, 35.580676802354105], [264.0, 41.613722998729315], [270.0, 36.782442748091604], [271.0, 70.44270015698584], [268.0, 76.83900643974248], [269.0, 53.43600562587901], [265.0, 56.75359576078735], [266.0, 59.69288645690828], [267.0, 43.22891566265058], [273.0, 33.73878627968332], [272.0, 57.94835164835153], [274.0, 40.546268656716435], [275.0, 41.750591016548476], [276.0, 77.51754385964921], [277.0, 89.76605944391174], [278.0, 65.00254022015238], [279.0, 37.8214862681745], [280.0, 46.030756442227776], [286.0, 65.67287352897358], [287.0, 80.39570506082], [284.0, 63.86194368755689], [285.0, 54.39693356047694], [281.0, 43.6869627507164], [282.0, 50.989064398542084], [283.0, 63.838904550946445], [289.0, 65.53744218027238], [288.0, 85.5929900828692], [290.0, 63.52017991733558], [291.0, 65.77826878086825], [292.0, 60.22966335210263], [293.0, 66.91732909379967], [294.0, 62.472882388787376], [295.0, 52.9719101123595], [296.0, 68.03482733284346], [302.0, 81.54146701068946], [303.0, 72.05529871977235], [300.0, 94.1692119731218], [301.0, 97.37341547209994], [297.0, 70.42946137627004], [298.0, 69.2051100787721], [299.0, 62.316144874155725], [304.0, 60.51996285979576], [305.0, 36.98715203426123], [306.0, 30.865301724137936], [307.0, 34.18395303326814], [308.0, 50.67811158798281], [309.0, 83.62359550561796], [1.0, 12.428571428571429]], "isOverall": false, "label": "访问首页", "isController": false}, {"data": [[231.56563749999927, 61.31743249999976]], "isOverall": false, "label": "访问首页-Aggregated", "isController": false}, {"data": [[2.0, 15.435483870967742], [3.0, 13.935483870967744], [4.0, 21.25263157894737], [5.0, 27.666666666666668], [6.0, 17.5], [7.0, 92.45454545454545], [8.0, 108.3888888888889], [9.0, 29.59259259259259], [10.0, 29.38235294117647], [11.0, 26.829268292682926], [12.0, 29.92857142857143], [13.0, 79.4666666666667], [14.0, 34.51162790697674], [15.0, 48.6904761904762], [16.0, 33.92000000000001], [17.0, 39.69444444444446], [18.0, 30.750000000000004], [19.0, 29.475409836065573], [20.0, 39.12048192771083], [21.0, 53.05839416058397], [22.0, 32.37254901960785], [23.0, 42.960784313725505], [24.0, 34.24675324675324], [25.0, 40.34285714285714], [26.0, 66.27083333333333], [27.0, 53.37681159420289], [28.0, 33.186440677966104], [29.0, 37.51388888888889], [30.0, 29.025], [31.0, 134.43749999999997], [32.0, 44.71874999999999], [33.0, 34.05223880597016], [34.0, 30.750000000000004], [35.0, 35.67619047619047], [36.0, 28.962962962962965], [37.0, 29.398496240601496], [38.0, 33.87037037037035], [39.0, 41.86585365853657], [40.0, 40.2666666666667], [41.0, 34.7070707070707], [42.0, 35.230769230769226], [43.0, 30.858108108108116], [44.0, 36.376068376068396], [45.0, 28.29230769230769], [46.0, 32.19774011299433], [47.0, 37.55], [48.0, 32.63025210084035], [49.0, 33.52671755725191], [50.0, 33.761194029850756], [51.0, 36.28461538461538], [52.0, 33.3135593220339], [53.0, 32.59398496240603], [54.0, 47.11688311688311], [55.0, 61.88888888888888], [56.0, 36.24050632911393], [57.0, 34.79999999999998], [58.0, 31.878504672897193], [59.0, 41.51327433628319], [60.0, 36.181434599156105], [61.0, 52.2513661202186], [62.0, 42.604477611940304], [63.0, 40.0493827160494], [64.0, 50.03947368421052], [65.0, 43.59440559440562], [66.0, 52.5891472868217], [67.0, 36.874999999999986], [68.0, 45.4031007751938], [69.0, 36.358823529411765], [70.0, 39.50847457627116], [71.0, 40.14563106796115], [72.0, 33.80165289256196], [73.0, 40.263440860215034], [74.0, 35.27543424317618], [75.0, 49.40243902439024], [76.0, 37.65680473372778], [77.0, 39.88888888888889], [78.0, 36.51265822784808], [79.0, 45.38281249999999], [80.0, 83.5526315789474], [81.0, 39.66425992779784], [82.0, 44.232432432432425], [83.0, 56.375757575757554], [84.0, 86.00613496932517], [85.0, 42.46354166666667], [86.0, 60.995670995671], [87.0, 53.844720496894425], [88.0, 61.095846645367395], [89.0, 68.76470588235296], [90.0, 57.514450867052005], [91.0, 68.75836431226766], [92.0, 68.50714285714281], [93.0, 66.02898550724642], [94.0, 72.23626373626372], [95.0, 46.39790575916231], [96.0, 50.13706563706562], [97.0, 73.84444444444442], [98.0, 160.64285714285722], [99.0, 85.60846560846561], [100.0, 72.91324200913238], [101.0, 61.74999999999999], [102.0, 74.14141414141417], [103.0, 61.79925650557621], [104.0, 75.76530612244895], [105.0, 71.98337950138499], [106.0, 80.25806451612908], [107.0, 93.99377593360995], [108.0, 66.64814814814815], [109.0, 77.60547504025769], [110.0, 70.16666666666666], [111.0, 97.46961325966852], [112.0, 103.72727272727275], [113.0, 71.62004950495063], [114.0, 77.61386138613851], [115.0, 81.80359820089951], [116.0, 82.31228668941974], [117.0, 73.96721311475406], [118.0, 97.14899713467045], [119.0, 73.66153846153848], [120.0, 92.6549019607843], [121.0, 64.97446808510635], [122.0, 65.61574074074076], [123.0, 71.4081196581196], [124.0, 73.44533029612755], [125.0, 81.15777262180978], [126.0, 86.14168937329697], [127.0, 128.6768060836502], [128.0, 60.039548022598844], [129.0, 92.1967213114754], [130.0, 94.1633333333333], [131.0, 67.2578616352201], [132.0, 74.33333333333336], [133.0, 69.3564668769716], [134.0, 108.75851393188853], [135.0, 106.19377990430624], [136.0, 86.23529411764704], [137.0, 103.21791767554487], [138.0, 97.44135188866801], [139.0, 82.12643678160906], [140.0, 71.69580419580426], [141.0, 72.61691542288557], [142.0, 92.69973890339432], [143.0, 88.90859232175505], [144.0, 107.85892857142852], [145.0, 103.22325581395349], [146.0, 114.18245614035092], [147.0, 112.65098039215687], [148.0, 120.71026156941652], [149.0, 102.62403697996919], [150.0, 88.99342105263156], [151.0, 98.25221238938052], [152.0, 76.92325581395349], [153.0, 79.05311355311345], [154.0, 68.66436781609205], [155.0, 68.75862068965522], [156.0, 72.06635071090062], [157.0, 82.87733887733897], [158.0, 65.82547993019197], [159.0, 82.3489180834621], [160.0, 79.06829865361065], [161.0, 81.77061631944451], [162.0, 84.46526987018925], [163.0, 81.05229852968544], [164.0, 80.32440611287633], [165.0, 80.77301640441928], [166.0, 77.18356961105064], [167.0, 80.29815440603048], [168.0, 85.78165724120996], [169.0, 94.32111368909527], [170.0, 98.2665474060823], [171.0, 83.28475336322869], [172.0, 75.42999999999994], [173.0, 136.84571428571425], [174.0, 83.47392290249432], [175.0, 79.58802502234141], [176.0, 92.70986745213563], [177.0, 102.9908592321755], [178.0, 89.89755351681956], [179.0, 83.86690105474621], [180.0, 102.6273062730627], [181.0, 93.93522727272725], [182.0, 119.82051282051283], [183.0, 128.23544973544972], [184.0, 145.10593220338984], [185.0, 140.08355795148253], [186.0, 150.81007751937994], [187.0, 152.83495145631073], [188.0, 98.13086419753085], [189.0, 135.5914489311164], [190.0, 147.63829787234047], [191.0, 100.65706806282716], [192.0, 114.2626262626263], [193.0, 112.77398720682297], [194.0, 103.51832731027369], [195.0, 98.33149361848912], [196.0, 93.42343960484955], [197.0, 97.60728117738202], [198.0, 94.68298507462681], [199.0, 96.19539170506924], [200.0, 101.08536045997353], [201.0, 96.45479559748415], [202.0, 95.20179104477609], [203.0, 116.95879396984911], [204.0, 116.96410767696915], [205.0, 98.62148521989903], [206.0, 109.05702647657863], [207.0, 102.25595935912476], [208.0, 112.89121202221506], [209.0, 113.49071082390968], [210.0, 110.91012658227855], [211.0, 114.5638344226578], [212.0, 108.7481781376516], [213.0, 118.65906115578854], [214.0, 109.18089725036177], [215.0, 134.31682577565644], [216.0, 111.58368957579752], [217.0, 111.26678445229672], [218.0, 114.4565275192768], [219.0, 110.8330358913346], [220.0, 114.8562593303478], [221.0, 118.6657280106011], [222.0, 109.6011310711911], [223.0, 113.54501607717037], [224.0, 126.60501193317421], [225.0, 134.99821428571443], [226.0, 189.16247139588103], [227.0, 159.63861386138623], [228.0, 162.5812807881775], [229.0, 167.4571948998178], [230.0, 160.82083333333352], [231.0, 249.58241758241743], [232.0, 145.02236421725232], [233.0, 251.6300000000002], [234.0, 190.63620981387487], [235.0, 156.72473867595826], [236.0, 168.77922077922082], [237.0, 137.23582766439907], [238.0, 218.20118343195267], [239.0, 281.4], [240.0, 129.03829787234048], [241.0, 193.13793103448282], [242.0, 135.28846153846143], [243.0, 120.27999999999994], [244.0, 130.16704805492003], [245.0, 139.3073770491803], [246.0, 154.22500000000008], [247.0, 138.28217821782184], [248.0, 106.80896860986546], [249.0, 118.52021089630925], [250.0, 210.34482758620686], [251.0, 179.45145145145136], [252.0, 120.81086519114695], [253.0, 114.98543381887278], [254.0, 149.6796973518284], [255.0, 112.34192037470721], [257.0, 135.6112054329373], [256.0, 116.3915492957747], [258.0, 114.055462184874], [259.0, 119.71375464684009], [260.0, 125.13746856663883], [261.0, 132.4701795020265], [262.0, 149.88271604938294], [263.0, 154.0736733642451], [264.0, 144.29535170711668], [270.0, 171.90570719602968], [271.0, 134.3908523908524], [268.0, 137.93082311733795], [269.0, 158.3345428156745], [265.0, 128.6874493927126], [266.0, 126.51775147929021], [267.0, 131.12964311726154], [273.0, 147.84918478260866], [272.0, 132.81465517241386], [274.0, 135.79898477157377], [275.0, 170.12646370023435], [276.0, 160.88412698412722], [277.0, 171.45993756503637], [278.0, 158.4684512428295], [279.0, 150.87187039764353], [280.0, 142.60223048327134], [286.0, 164.41364882412392], [287.0, 158.7558672009161], [284.0, 152.1576253838283], [285.0, 141.3442447582374], [281.0, 147.1331444759207], [282.0, 167.56940063091483], [283.0, 159.35669041963547], [289.0, 135.0706129413302], [288.0, 156.60533525594798], [290.0, 144.8932139166382], [291.0, 154.49968219377095], [292.0, 157.72011267605654], [293.0, 164.14933245426064], [294.0, 161.31306572215658], [295.0, 162.45805224009723], [296.0, 164.12600178094357], [302.0, 140.50612508059336], [303.0, 140.3861228813564], [300.0, 149.20296231118883], [301.0, 142.2284841075792], [297.0, 146.2713463065934], [298.0, 156.46040679304886], [299.0, 164.85423650445026], [304.0, 145.67551713491846], [305.0, 138.4357344632769], [306.0, 157.32477678571433], [307.0, 155.84173387096777], [308.0, 203.64531435349937], [309.0, 78.83505154639178], [1.0, 13.142857142857144]], "isOverall": false, "label": "FundView_Request", "isController": false}, {"data": [[231.57264999999876, 122.85617250000068]], "isOverall": false, "label": "FundView_Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 309.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 56630.833333333336, "minX": 1.6314234E12, "maxY": 4175830.6666666665, "series": [{"data": [[1.63142352E12, 4038286.1], [1.6314237E12, 4140482.9], [1.6314234E12, 388223.63333333336], [1.63142358E12, 3979941.316666667], [1.63142376E12, 813967.5666666667], [1.63142346E12, 3846825.6666666665], [1.63142364E12, 4175830.6666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63142352E12, 587941.1166666667], [1.6314237E12, 602529.25], [1.6314234E12, 56630.833333333336], [1.63142358E12, 579504.2666666667], [1.63142376E12, 118364.75], [1.63142346E12, 560254.8166666667], [1.63142364E12, 608015.5333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63142376E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 31.80109589041105, "minX": 1.6314234E12, "maxY": 151.82117162096367, "series": [{"data": [[1.63142352E12, 56.51994335927163], [1.6314237E12, 70.96533488492321], [1.6314234E12, 31.80109589041105], [1.63142358E12, 61.47892524807594], [1.63142376E12, 86.80460981231492], [1.63142346E12, 40.208145299026654], [1.63142364E12, 73.51640403988822]], "isOverall": false, "label": "访问首页", "isController": false}, {"data": [[1.63142352E12, 105.37154584574648], [1.6314237E12, 149.75706856280172], [1.6314234E12, 40.913655172413705], [1.63142358E12, 138.36196937130535], [1.63142376E12, 92.57406313578748], [1.63142346E12, 79.4136886145982], [1.63142364E12, 151.82117162096367]], "isOverall": false, "label": "FundView_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63142376E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 25.91054794520549, "minX": 1.6314234E12, "maxY": 148.32438487338794, "series": [{"data": [[1.63142352E12, 47.412617119263224], [1.6314237E12, 66.23335919317344], [1.6314234E12, 25.91054794520549], [1.63142358E12, 54.56131752447155], [1.63142376E12, 74.58287783997352], [1.63142346E12, 34.229237541135774], [1.63142364E12, 68.55571485260087]], "isOverall": false, "label": "访问首页", "isController": false}, {"data": [[1.63142352E12, 101.74992386626957], [1.6314237E12, 146.19044792298413], [1.6314234E12, 36.29558620689667], [1.63142358E12, 134.64219505642194], [1.63142376E12, 89.11465511583604], [1.63142346E12, 75.28574009980022], [1.63142364E12, 148.32438487338794]], "isOverall": false, "label": "FundView_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63142376E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6314234E12, "maxY": 7.851893315772142, "series": [{"data": [[1.63142352E12, 4.491583293631944], [1.6314237E12, 1.2053529868114938], [1.6314234E12, 0.49219178082191994], [1.63142358E12, 2.489989660682426], [1.63142376E12, 7.851893315772142], [1.63142346E12, 0.5987891747781671], [1.63142364E12, 1.3982923925704998]], "isOverall": false, "label": "访问首页", "isController": false}, {"data": [[1.63142352E12, 0.01629923866269462], [1.6314237E12, 0.0], [1.6314234E12, 0.0], [1.63142358E12, 0.004755507791509997], [1.63142376E12, 0.04633458029795901], [1.63142346E12, 0.0], [1.63142364E12, 0.0]], "isOverall": false, "label": "FundView_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63142376E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.6314234E12, "maxY": 1207.0, "series": [{"data": [[1.63142352E12, 592.0], [1.6314237E12, 1026.0], [1.6314234E12, 587.0], [1.63142358E12, 872.0], [1.63142376E12, 408.0], [1.63142346E12, 507.0], [1.63142364E12, 1207.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63142352E12, 142.0], [1.6314237E12, 197.0], [1.6314234E12, 53.0], [1.63142358E12, 193.0], [1.63142376E12, 152.0], [1.63142346E12, 118.0], [1.63142364E12, 210.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63142352E12, 282.0], [1.6314237E12, 286.0], [1.6314234E12, 134.0], [1.63142358E12, 383.9900000000016], [1.63142376E12, 268.9900000000016], [1.63142346E12, 199.9900000000016], [1.63142364E12, 367.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63142352E12, 189.0], [1.6314237E12, 231.0], [1.6314234E12, 63.0], [1.63142358E12, 273.0], [1.63142376E12, 205.0], [1.63142346E12, 148.0], [1.63142364E12, 263.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63142352E12, 12.0], [1.6314237E12, 11.0], [1.6314234E12, 10.0], [1.63142358E12, 11.0], [1.63142376E12, 9.0], [1.63142346E12, 11.0], [1.63142364E12, 12.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63142352E12, 61.0], [1.6314237E12, 90.0], [1.6314234E12, 32.0], [1.63142358E12, 81.0], [1.63142376E12, 65.0], [1.63142346E12, 51.0], [1.63142364E12, 107.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63142376E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 3.0, "maxY": 21048.0, "series": [{"data": [[3.0, 305.0], [10.0, 12.0], [149.0, 13.0], [192.0, 26.5], [208.0, 16.0], [238.0, 26.5], [401.0, 29.0], [426.0, 36.0], [557.0, 32.0], [641.0, 408.0], [696.0, 28.0], [785.0, 361.0], [857.0, 261.0], [909.0, 114.0], [971.0, 234.0], [1037.0, 163.0], [1075.0, 116.0], [1120.0, 29.0], [1150.0, 253.0], [1131.0, 166.0], [1105.0, 81.0], [1207.0, 31.0], [1175.0, 182.0], [1177.0, 140.0], [1183.0, 105.0], [1214.0, 96.0], [1248.0, 194.0], [1263.0, 206.0], [1236.0, 186.0], [1234.0, 60.0], [1320.0, 100.0], [1330.0, 114.0], [1306.0, 109.0], [1290.0, 140.0], [1376.0, 125.0], [1363.0, 158.0], [1388.0, 200.0], [1377.0, 96.0], [1438.0, 31.0], [1444.0, 166.5], [1433.0, 172.0], [1525.0, 30.0], [1535.0, 37.0], [1499.0, 127.0], [1534.0, 185.5], [1523.0, 131.0], [1513.0, 25.0], [1553.0, 149.0], [1555.0, 112.0], [1584.0, 97.0], [1554.0, 88.0], [1572.0, 39.0], [1643.0, 41.0], [1650.0, 113.0], [1624.0, 97.0], [1613.0, 47.0], [1682.0, 120.0], [1690.0, 119.0], [1715.0, 108.0], [1706.0, 89.0], [1704.0, 151.5], [1688.0, 114.0], [1775.0, 39.0], [1753.0, 73.0], [1739.0, 111.0], [1786.0, 130.0], [1755.0, 172.0], [1790.0, 137.0], [1752.0, 144.0], [1765.0, 31.0], [1822.0, 90.0], [1795.0, 129.0], [1809.0, 141.0], [1854.0, 153.0], [1837.0, 66.0], [1907.0, 45.0], [1893.0, 46.0], [1902.0, 52.0], [1908.0, 61.0], [1911.0, 95.0], [1878.0, 89.0], [1966.0, 37.0], [1957.0, 44.0], [1922.0, 57.0], [1930.0, 108.0], [1951.0, 154.0], [1986.0, 32.0], [1985.0, 43.0], [2028.0, 161.0], [1990.0, 112.0], [2027.0, 137.0], [2039.0, 140.0], [2170.0, 52.0], [2115.0, 32.0], [2090.0, 47.0], [2063.0, 79.0], [2156.0, 63.0], [2106.0, 79.0], [2160.0, 77.0], [2175.0, 119.0], [2127.0, 66.0], [2285.0, 42.0], [2220.0, 67.0], [2218.0, 70.0], [2208.0, 118.0], [2190.0, 41.0], [2267.0, 48.0], [2200.0, 56.0], [2202.0, 97.0], [2278.0, 132.0], [2277.0, 44.0], [2246.0, 60.0], [2250.0, 103.0], [2265.0, 52.0], [2299.0, 63.0], [2187.0, 79.0], [2226.0, 88.0], [2179.0, 112.0], [2180.0, 119.0], [2185.0, 118.0], [2358.0, 81.0], [2400.0, 42.0], [2408.0, 60.0], [2341.0, 56.0], [2339.0, 118.0], [2417.0, 56.0], [2398.0, 101.0], [2409.0, 119.0], [2360.0, 55.0], [2318.0, 84.0], [2308.0, 91.0], [2350.0, 42.0], [2355.0, 70.0], [2356.0, 67.0], [2529.0, 59.0], [2484.0, 48.0], [2480.0, 42.0], [2478.0, 51.0], [2482.0, 70.0], [2518.0, 54.0], [2526.0, 37.0], [2511.0, 96.0], [2550.0, 50.0], [2547.0, 50.0], [2543.0, 33.0], [2538.0, 106.0], [2539.0, 74.0], [2549.0, 66.0], [2503.0, 78.0], [2551.0, 101.0], [2552.0, 105.0], [2508.0, 68.0], [2450.0, 77.0], [2455.0, 123.0], [2463.0, 91.0], [2448.0, 84.0], [2491.0, 92.0], [2486.0, 96.0], [2569.0, 43.0], [2604.0, 47.5], [2600.0, 45.0], [2594.0, 83.0], [2684.0, 44.0], [2647.0, 47.0], [2650.0, 90.0], [2644.0, 67.0], [2645.0, 91.0], [2641.0, 57.0], [2567.0, 63.0], [2623.0, 80.0], [2614.0, 75.0], [2615.0, 72.0], [2638.0, 60.0], [2635.0, 67.0], [2625.0, 73.0], [2631.0, 102.0], [2585.0, 69.0], [2573.0, 99.0], [2670.0, 96.0], [2662.0, 104.5], [2672.0, 85.0], [2683.0, 89.0], [2718.0, 46.0], [2704.0, 38.0], [2728.0, 33.0], [2723.0, 38.0], [2727.0, 86.0], [2743.0, 66.0], [2732.0, 97.0], [2740.0, 99.0], [2802.0, 71.0], [2804.0, 38.0], [2803.0, 70.0], [2796.0, 44.0], [2785.0, 82.0], [2800.0, 50.0], [2716.0, 42.0], [2710.0, 66.0], [2715.0, 61.0], [2713.0, 87.0], [2711.0, 69.0], [2717.0, 59.0], [2811.0, 45.0], [2761.0, 80.0], [2768.0, 104.0], [2758.0, 92.0], [2772.0, 68.0], [2783.0, 67.0], [2747.0, 46.0], [2693.0, 58.0], [2692.0, 99.0], [2703.0, 44.0], [2923.0, 59.0], [2829.0, 75.0], [2889.0, 35.0], [2890.0, 41.0], [2858.0, 32.0], [2891.0, 44.0], [2893.0, 41.0], [2909.0, 79.0], [2848.0, 48.0], [2849.0, 56.0], [2854.0, 68.5], [2826.0, 62.0], [2868.0, 57.0], [2864.0, 34.0], [2872.0, 80.0], [2876.0, 37.0], [2875.0, 70.0], [2820.0, 104.0], [2823.0, 54.0], [2884.0, 54.0], [2846.0, 76.0], [2933.0, 35.0], [2931.0, 100.0], [2941.0, 48.0], [2939.0, 73.5], [2943.0, 53.0], [2880.0, 61.0], [2883.0, 68.0], [2913.0, 70.0], [2919.0, 45.0], [2916.0, 88.0], [2920.0, 89.0], [2912.0, 84.5], [2847.0, 99.0], [2837.0, 54.0], [2831.0, 70.0], [2833.0, 61.0], [2839.0, 57.0], [2845.0, 96.0], [3008.0, 46.0], [3051.0, 62.0], [3050.0, 33.0], [3043.0, 42.0], [2971.0, 47.0], [3057.0, 39.0], [3066.0, 61.0], [3056.0, 86.0], [3030.0, 55.0], [3031.0, 54.0], [3039.0, 47.0], [3037.0, 89.0], [2994.0, 36.0], [2993.0, 52.0], [2997.0, 36.0], [2980.0, 51.0], [2979.0, 87.0], [2982.0, 45.5], [2951.0, 34.0], [2954.0, 49.0], [2966.0, 91.0], [3001.0, 51.0], [2949.0, 39.0], [3004.0, 31.0], [2968.0, 59.0], [2987.0, 52.0], [3018.0, 48.0], [3026.0, 55.0], [3024.0, 71.0], [3019.0, 65.0], [3092.0, 49.0], [3085.0, 41.0], [3147.0, 36.0], [3164.0, 46.5], [3132.0, 41.0], [3128.0, 41.0], [3075.0, 47.0], [3143.0, 53.0], [3100.0, 39.0], [3095.0, 50.0], [3179.0, 78.0], [3197.0, 42.0], [3195.0, 80.0], [3188.0, 62.0], [3171.0, 57.0], [3117.0, 40.0], [3123.0, 89.0], [3126.0, 81.0], [3223.0, 74.0], [3214.0, 78.0], [3205.0, 47.0], [3217.0, 72.0], [3322.0, 64.0], [3302.0, 55.0], [3230.0, 72.0], [3251.0, 70.0], [3305.0, 52.0], [3384.0, 52.0], [3334.0, 48.0], [3332.0, 71.0], [3408.0, 79.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2299.0, 21048.0], [1183.0, 21037.0], [2529.0, 21029.0], [1234.0, 21045.0], [2684.0, 21034.0], [2703.0, 21043.0], [1499.0, 21044.0], [3050.0, 21027.0], [1624.0, 21018.0], [909.0, 21045.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3408.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 403.0, "series": [{"data": [[3.0, 301.0], [10.0, 12.0], [149.0, 13.0], [192.0, 23.0], [208.0, 16.0], [238.0, 26.0], [401.0, 25.0], [426.0, 35.0], [557.0, 28.0], [641.0, 403.0], [696.0, 23.5], [785.0, 348.0], [857.0, 247.0], [909.0, 107.0], [971.0, 224.0], [1037.0, 161.0], [1075.0, 111.0], [1120.0, 26.0], [1150.0, 242.0], [1131.0, 162.0], [1105.0, 75.0], [1207.0, 26.0], [1175.0, 166.0], [1177.0, 132.0], [1183.0, 92.0], [1214.0, 94.0], [1248.0, 190.0], [1263.0, 196.0], [1236.0, 179.0], [1234.0, 57.0], [1320.0, 97.0], [1330.0, 107.0], [1306.0, 105.0], [1290.0, 138.0], [1376.0, 115.0], [1363.0, 155.0], [1388.0, 198.0], [1377.0, 93.0], [1438.0, 28.0], [1444.0, 151.0], [1433.0, 171.0], [1525.0, 24.0], [1535.0, 30.0], [1499.0, 117.0], [1534.0, 177.0], [1523.0, 129.0], [1513.0, 23.0], [1553.0, 138.0], [1555.0, 109.0], [1584.0, 95.0], [1554.0, 85.0], [1572.0, 35.0], [1643.0, 33.0], [1650.0, 107.0], [1624.0, 92.0], [1613.0, 45.0], [1682.0, 110.5], [1690.0, 112.0], [1715.0, 102.0], [1706.0, 84.0], [1704.0, 147.0], [1688.0, 111.0], [1775.0, 32.0], [1753.0, 67.0], [1739.0, 103.0], [1786.0, 128.0], [1755.0, 166.0], [1790.0, 134.0], [1752.0, 142.0], [1765.0, 29.0], [1822.0, 81.0], [1795.0, 125.0], [1809.0, 139.0], [1854.0, 151.0], [1837.0, 64.0], [1907.0, 35.0], [1893.0, 38.0], [1902.0, 39.0], [1908.0, 58.0], [1911.0, 88.0], [1878.0, 84.0], [1966.0, 29.0], [1957.0, 36.0], [1922.0, 52.0], [1930.0, 107.0], [1951.0, 150.0], [1986.0, 26.0], [1985.0, 33.0], [2028.0, 158.0], [1990.0, 109.0], [2027.0, 133.0], [2039.0, 135.0], [2170.0, 43.0], [2115.0, 26.0], [2090.0, 37.0], [2063.0, 73.0], [2156.0, 58.0], [2106.0, 75.0], [2160.0, 70.0], [2175.0, 115.0], [2127.0, 63.0], [2285.0, 36.0], [2220.0, 63.0], [2218.0, 63.5], [2208.0, 116.0], [2190.0, 34.0], [2267.0, 40.0], [2200.0, 49.0], [2202.0, 89.0], [2278.0, 126.0], [2277.0, 35.0], [2246.0, 50.0], [2250.0, 101.0], [2265.0, 47.0], [2299.0, 59.0], [2187.0, 74.0], [2226.0, 85.0], [2179.0, 109.0], [2180.0, 115.0], [2185.0, 115.0], [2358.0, 77.0], [2400.0, 35.0], [2408.0, 54.0], [2341.0, 51.0], [2339.0, 115.0], [2417.0, 53.0], [2398.0, 98.0], [2409.0, 116.0], [2360.0, 54.0], [2318.0, 77.0], [2308.0, 86.0], [2350.0, 34.0], [2355.0, 67.0], [2356.0, 61.0], [2529.0, 53.0], [2484.0, 44.0], [2480.0, 35.0], [2478.0, 46.0], [2482.0, 66.0], [2518.0, 48.0], [2526.0, 27.0], [2511.0, 89.0], [2550.0, 45.0], [2547.0, 42.0], [2543.0, 25.0], [2538.0, 103.0], [2539.0, 72.0], [2549.0, 62.0], [2503.0, 74.0], [2551.0, 97.0], [2552.0, 101.0], [2508.0, 63.0], [2450.0, 74.0], [2455.0, 121.0], [2463.0, 88.0], [2448.0, 70.0], [2491.0, 87.0], [2486.0, 91.0], [2569.0, 36.0], [2604.0, 43.0], [2600.0, 37.0], [2594.0, 80.0], [2684.0, 38.0], [2647.0, 40.0], [2650.0, 87.0], [2644.0, 63.0], [2645.0, 83.0], [2641.0, 54.0], [2567.0, 58.0], [2623.0, 77.0], [2614.0, 66.0], [2615.0, 70.0], [2638.0, 53.0], [2635.0, 63.0], [2625.0, 67.0], [2631.0, 98.0], [2585.0, 62.0], [2573.0, 95.0], [2670.0, 92.0], [2662.0, 101.0], [2672.0, 79.0], [2683.0, 86.0], [2718.0, 42.0], [2704.0, 32.0], [2728.0, 26.0], [2723.0, 33.0], [2727.0, 84.0], [2743.0, 62.0], [2732.0, 94.0], [2740.0, 96.0], [2802.0, 68.0], [2804.0, 31.0], [2803.0, 67.0], [2796.0, 40.0], [2785.0, 76.0], [2800.0, 45.0], [2716.0, 38.0], [2710.0, 60.0], [2715.0, 56.0], [2713.0, 83.0], [2711.0, 62.0], [2717.0, 54.0], [2811.0, 42.0], [2761.0, 75.0], [2768.0, 101.0], [2758.0, 90.0], [2772.0, 64.0], [2783.0, 60.0], [2747.0, 39.0], [2693.0, 54.0], [2692.0, 95.0], [2703.0, 40.0], [2923.0, 53.0], [2829.0, 70.0], [2889.0, 30.0], [2890.0, 34.0], [2858.0, 26.0], [2891.0, 39.0], [2893.0, 36.0], [2909.0, 73.0], [2848.0, 42.0], [2849.0, 50.0], [2854.0, 61.5], [2826.0, 57.0], [2868.0, 50.0], [2864.0, 28.0], [2872.0, 73.0], [2876.0, 32.0], [2875.0, 66.0], [2820.0, 100.0], [2823.0, 48.0], [2884.0, 50.0], [2846.0, 73.0], [2933.0, 30.0], [2931.0, 98.0], [2941.0, 39.0], [2939.0, 69.0], [2943.0, 47.0], [2880.0, 57.0], [2883.0, 61.0], [2913.0, 64.0], [2919.0, 42.0], [2916.0, 85.0], [2920.0, 84.0], [2912.0, 81.0], [2847.0, 96.0], [2837.0, 49.0], [2831.0, 68.0], [2833.0, 56.0], [2839.0, 52.0], [2845.0, 94.0], [3008.0, 42.0], [3051.0, 58.0], [3050.0, 27.0], [3043.0, 37.0], [2971.0, 41.0], [3057.0, 34.0], [3066.0, 56.0], [3056.0, 82.0], [3030.0, 49.0], [3031.0, 48.0], [3039.0, 42.0], [3037.0, 84.0], [2994.0, 31.0], [2993.0, 45.0], [2997.0, 30.0], [2980.0, 45.0], [2979.0, 82.0], [2982.0, 39.0], [2951.0, 30.0], [2954.0, 45.0], [2966.0, 88.0], [3001.0, 45.0], [2949.0, 32.0], [3004.0, 27.0], [2968.0, 55.0], [2987.0, 45.0], [3018.0, 44.0], [3026.0, 51.0], [3024.0, 65.0], [3019.0, 61.0], [3092.0, 43.0], [3085.0, 37.0], [3147.0, 31.0], [3164.0, 38.0], [3132.0, 35.0], [3128.0, 35.0], [3075.0, 42.0], [3143.0, 49.0], [3100.0, 34.0], [3095.0, 48.0], [3179.0, 74.0], [3197.0, 37.0], [3195.0, 75.0], [3188.0, 59.0], [3171.0, 52.0], [3117.0, 36.0], [3123.0, 87.0], [3126.0, 79.0], [3223.0, 70.0], [3214.0, 73.0], [3205.0, 41.0], [3217.0, 70.0], [3322.0, 61.0], [3302.0, 51.0], [3230.0, 60.0], [3251.0, 68.0], [3305.0, 51.0], [3384.0, 48.0], [3334.0, 43.0], [3332.0, 67.0], [3408.0, 77.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2299.0, 0.0], [1183.0, 0.0], [2529.0, 0.0], [1234.0, 0.0], [2684.0, 0.0], [2703.0, 0.0], [1499.0, 0.0], [3050.0, 0.0], [1624.0, 0.0], [909.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3408.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 243.91666666666666, "minX": 1.6314234E12, "maxY": 2603.95, "series": [{"data": [[1.63142352E12, 2519.1666666666665], [1.6314237E12, 2579.3], [1.6314234E12, 243.91666666666666], [1.63142358E12, 2482.983333333333], [1.63142376E12, 503.4166666666667], [1.63142346E12, 2400.6], [1.63142364E12, 2603.95]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63142376E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.6314234E12, "maxY": 2603.9166666666665, "series": [{"data": [[1.63142352E12, 2517.9333333333334], [1.6314237E12, 2580.516666666667], [1.6314234E12, 242.5], [1.63142358E12, 2481.8], [1.63142376E12, 506.95], [1.63142346E12, 2399.3333333333335], [1.63142364E12, 2603.9166666666665]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63142352E12, 0.21666666666666667], [1.63142358E12, 0.08333333333333333], [1.63142376E12, 0.08333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63142376E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.6314234E12, "maxY": 1302.0166666666667, "series": [{"data": [[1.63142352E12, 1258.75], [1.6314237E12, 1291.5166666666667], [1.6314234E12, 120.83333333333333], [1.63142358E12, 1240.6666666666667], [1.63142376E12, 253.95], [1.63142346E12, 1199.05], [1.63142364E12, 1301.9]], "isOverall": false, "label": "FundView_Request-success", "isController": false}, {"data": [[1.63142352E12, 0.21666666666666667], [1.63142358E12, 0.08333333333333333], [1.63142376E12, 0.08333333333333333]], "isOverall": false, "label": "访问首页-failure", "isController": false}, {"data": [[1.63142352E12, 1259.1833333333334], [1.6314237E12, 1289.0], [1.6314234E12, 121.66666666666667], [1.63142358E12, 1241.1333333333334], [1.63142376E12, 253.0], [1.63142346E12, 1200.2833333333333], [1.63142364E12, 1302.0166666666667]], "isOverall": false, "label": "访问首页-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63142376E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.6314234E12, "maxY": 2603.9166666666665, "series": [{"data": [[1.63142352E12, 2517.9333333333334], [1.6314237E12, 2580.516666666667], [1.6314234E12, 242.5], [1.63142358E12, 2481.8], [1.63142376E12, 506.95], [1.63142346E12, 2399.3333333333335], [1.63142364E12, 2603.9166666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63142352E12, 0.21666666666666667], [1.63142358E12, 0.08333333333333333], [1.63142376E12, 0.08333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63142376E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

