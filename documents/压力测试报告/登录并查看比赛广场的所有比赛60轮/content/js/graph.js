/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 21059.0, "series": [{"data": [[0.0, 7.0], [0.1, 9.0], [0.2, 9.0], [0.3, 9.0], [0.4, 9.0], [0.5, 9.0], [0.6, 9.0], [0.7, 10.0], [0.8, 10.0], [0.9, 10.0], [1.0, 10.0], [1.1, 10.0], [1.2, 10.0], [1.3, 10.0], [1.4, 10.0], [1.5, 10.0], [1.6, 10.0], [1.7, 10.0], [1.8, 10.0], [1.9, 10.0], [2.0, 10.0], [2.1, 11.0], [2.2, 11.0], [2.3, 11.0], [2.4, 11.0], [2.5, 11.0], [2.6, 11.0], [2.7, 11.0], [2.8, 11.0], [2.9, 11.0], [3.0, 11.0], [3.1, 11.0], [3.2, 11.0], [3.3, 11.0], [3.4, 11.0], [3.5, 11.0], [3.6, 11.0], [3.7, 11.0], [3.8, 11.0], [3.9, 11.0], [4.0, 12.0], [4.1, 12.0], [4.2, 12.0], [4.3, 12.0], [4.4, 12.0], [4.5, 12.0], [4.6, 12.0], [4.7, 12.0], [4.8, 12.0], [4.9, 12.0], [5.0, 12.0], [5.1, 12.0], [5.2, 12.0], [5.3, 12.0], [5.4, 12.0], [5.5, 12.0], [5.6, 12.0], [5.7, 12.0], [5.8, 12.0], [5.9, 12.0], [6.0, 12.0], [6.1, 12.0], [6.2, 12.0], [6.3, 12.0], [6.4, 13.0], [6.5, 13.0], [6.6, 13.0], [6.7, 13.0], [6.8, 13.0], [6.9, 13.0], [7.0, 13.0], [7.1, 13.0], [7.2, 13.0], [7.3, 13.0], [7.4, 13.0], [7.5, 13.0], [7.6, 13.0], [7.7, 13.0], [7.8, 13.0], [7.9, 13.0], [8.0, 13.0], [8.1, 13.0], [8.2, 13.0], [8.3, 13.0], [8.4, 13.0], [8.5, 13.0], [8.6, 13.0], [8.7, 13.0], [8.8, 14.0], [8.9, 14.0], [9.0, 14.0], [9.1, 14.0], [9.2, 14.0], [9.3, 14.0], [9.4, 14.0], [9.5, 14.0], [9.6, 14.0], [9.7, 14.0], [9.8, 14.0], [9.9, 14.0], [10.0, 14.0], [10.1, 14.0], [10.2, 14.0], [10.3, 14.0], [10.4, 14.0], [10.5, 14.0], [10.6, 14.0], [10.7, 14.0], [10.8, 14.0], [10.9, 14.0], [11.0, 14.0], [11.1, 14.0], [11.2, 15.0], [11.3, 15.0], [11.4, 15.0], [11.5, 15.0], [11.6, 15.0], [11.7, 15.0], [11.8, 15.0], [11.9, 15.0], [12.0, 15.0], [12.1, 15.0], [12.2, 15.0], [12.3, 15.0], [12.4, 15.0], [12.5, 15.0], [12.6, 15.0], [12.7, 15.0], [12.8, 15.0], [12.9, 15.0], [13.0, 15.0], [13.1, 15.0], [13.2, 15.0], [13.3, 15.0], [13.4, 15.0], [13.5, 15.0], [13.6, 15.0], [13.7, 16.0], [13.8, 16.0], [13.9, 16.0], [14.0, 16.0], [14.1, 16.0], [14.2, 16.0], [14.3, 16.0], [14.4, 16.0], [14.5, 16.0], [14.6, 16.0], [14.7, 16.0], [14.8, 16.0], [14.9, 16.0], [15.0, 16.0], [15.1, 16.0], [15.2, 16.0], [15.3, 16.0], [15.4, 16.0], [15.5, 16.0], [15.6, 16.0], [15.7, 16.0], [15.8, 16.0], [15.9, 16.0], [16.0, 17.0], [16.1, 17.0], [16.2, 17.0], [16.3, 17.0], [16.4, 17.0], [16.5, 17.0], [16.6, 17.0], [16.7, 17.0], [16.8, 17.0], [16.9, 17.0], [17.0, 17.0], [17.1, 17.0], [17.2, 17.0], [17.3, 17.0], [17.4, 17.0], [17.5, 17.0], [17.6, 17.0], [17.7, 17.0], [17.8, 17.0], [17.9, 17.0], [18.0, 17.0], [18.1, 17.0], [18.2, 18.0], [18.3, 18.0], [18.4, 18.0], [18.5, 18.0], [18.6, 18.0], [18.7, 18.0], [18.8, 18.0], [18.9, 18.0], [19.0, 18.0], [19.1, 18.0], [19.2, 18.0], [19.3, 18.0], [19.4, 18.0], [19.5, 18.0], [19.6, 18.0], [19.7, 18.0], [19.8, 18.0], [19.9, 18.0], [20.0, 18.0], [20.1, 18.0], [20.2, 18.0], [20.3, 19.0], [20.4, 19.0], [20.5, 19.0], [20.6, 19.0], [20.7, 19.0], [20.8, 19.0], [20.9, 19.0], [21.0, 19.0], [21.1, 19.0], [21.2, 19.0], [21.3, 19.0], [21.4, 19.0], [21.5, 19.0], [21.6, 19.0], [21.7, 19.0], [21.8, 19.0], [21.9, 19.0], [22.0, 19.0], [22.1, 19.0], [22.2, 20.0], [22.3, 20.0], [22.4, 20.0], [22.5, 20.0], [22.6, 20.0], [22.7, 20.0], [22.8, 20.0], [22.9, 20.0], [23.0, 20.0], [23.1, 20.0], [23.2, 20.0], [23.3, 20.0], [23.4, 20.0], [23.5, 20.0], [23.6, 20.0], [23.7, 20.0], [23.8, 20.0], [23.9, 20.0], [24.0, 21.0], [24.1, 21.0], [24.2, 21.0], [24.3, 21.0], [24.4, 21.0], [24.5, 21.0], [24.6, 21.0], [24.7, 21.0], [24.8, 21.0], [24.9, 21.0], [25.0, 21.0], [25.1, 21.0], [25.2, 21.0], [25.3, 21.0], [25.4, 21.0], [25.5, 21.0], [25.6, 21.0], [25.7, 22.0], [25.8, 22.0], [25.9, 22.0], [26.0, 22.0], [26.1, 22.0], [26.2, 22.0], [26.3, 22.0], [26.4, 22.0], [26.5, 22.0], [26.6, 22.0], [26.7, 22.0], [26.8, 22.0], [26.9, 22.0], [27.0, 22.0], [27.1, 22.0], [27.2, 22.0], [27.3, 22.0], [27.4, 23.0], [27.5, 23.0], [27.6, 23.0], [27.7, 23.0], [27.8, 23.0], [27.9, 23.0], [28.0, 23.0], [28.1, 23.0], [28.2, 23.0], [28.3, 23.0], [28.4, 23.0], [28.5, 23.0], [28.6, 23.0], [28.7, 23.0], [28.8, 23.0], [28.9, 23.0], [29.0, 23.0], [29.1, 24.0], [29.2, 24.0], [29.3, 24.0], [29.4, 24.0], [29.5, 24.0], [29.6, 24.0], [29.7, 24.0], [29.8, 24.0], [29.9, 24.0], [30.0, 24.0], [30.1, 24.0], [30.2, 24.0], [30.3, 24.0], [30.4, 24.0], [30.5, 24.0], [30.6, 24.0], [30.7, 24.0], [30.8, 24.0], [30.9, 25.0], [31.0, 25.0], [31.1, 25.0], [31.2, 25.0], [31.3, 25.0], [31.4, 25.0], [31.5, 25.0], [31.6, 25.0], [31.7, 25.0], [31.8, 25.0], [31.9, 25.0], [32.0, 25.0], [32.1, 25.0], [32.2, 25.0], [32.3, 25.0], [32.4, 25.0], [32.5, 26.0], [32.6, 26.0], [32.7, 26.0], [32.8, 26.0], [32.9, 26.0], [33.0, 26.0], [33.1, 26.0], [33.2, 26.0], [33.3, 26.0], [33.4, 26.0], [33.5, 26.0], [33.6, 26.0], [33.7, 26.0], [33.8, 26.0], [33.9, 26.0], [34.0, 27.0], [34.1, 27.0], [34.2, 27.0], [34.3, 27.0], [34.4, 27.0], [34.5, 27.0], [34.6, 27.0], [34.7, 27.0], [34.8, 27.0], [34.9, 27.0], [35.0, 27.0], [35.1, 27.0], [35.2, 27.0], [35.3, 28.0], [35.4, 28.0], [35.5, 28.0], [35.6, 28.0], [35.7, 28.0], [35.8, 28.0], [35.9, 28.0], [36.0, 28.0], [36.1, 28.0], [36.2, 28.0], [36.3, 28.0], [36.4, 28.0], [36.5, 28.0], [36.6, 28.0], [36.7, 29.0], [36.8, 29.0], [36.9, 29.0], [37.0, 29.0], [37.1, 29.0], [37.2, 29.0], [37.3, 29.0], [37.4, 29.0], [37.5, 29.0], [37.6, 29.0], [37.7, 29.0], [37.8, 29.0], [37.9, 29.0], [38.0, 29.0], [38.1, 30.0], [38.2, 30.0], [38.3, 30.0], [38.4, 30.0], [38.5, 30.0], [38.6, 30.0], [38.7, 30.0], [38.8, 30.0], [38.9, 30.0], [39.0, 30.0], [39.1, 30.0], [39.2, 30.0], [39.3, 30.0], [39.4, 31.0], [39.5, 31.0], [39.6, 31.0], [39.7, 31.0], [39.8, 31.0], [39.9, 31.0], [40.0, 31.0], [40.1, 31.0], [40.2, 31.0], [40.3, 31.0], [40.4, 31.0], [40.5, 31.0], [40.6, 31.0], [40.7, 31.0], [40.8, 31.0], [40.9, 32.0], [41.0, 32.0], [41.1, 32.0], [41.2, 32.0], [41.3, 32.0], [41.4, 32.0], [41.5, 32.0], [41.6, 32.0], [41.7, 32.0], [41.8, 32.0], [41.9, 32.0], [42.0, 32.0], [42.1, 32.0], [42.2, 32.0], [42.3, 33.0], [42.4, 33.0], [42.5, 33.0], [42.6, 33.0], [42.7, 33.0], [42.8, 33.0], [42.9, 33.0], [43.0, 33.0], [43.1, 33.0], [43.2, 33.0], [43.3, 33.0], [43.4, 33.0], [43.5, 34.0], [43.6, 34.0], [43.7, 34.0], [43.8, 34.0], [43.9, 34.0], [44.0, 34.0], [44.1, 34.0], [44.2, 34.0], [44.3, 34.0], [44.4, 34.0], [44.5, 34.0], [44.6, 35.0], [44.7, 35.0], [44.8, 35.0], [44.9, 35.0], [45.0, 35.0], [45.1, 35.0], [45.2, 35.0], [45.3, 35.0], [45.4, 35.0], [45.5, 35.0], [45.6, 36.0], [45.7, 36.0], [45.8, 36.0], [45.9, 36.0], [46.0, 36.0], [46.1, 36.0], [46.2, 36.0], [46.3, 36.0], [46.4, 36.0], [46.5, 37.0], [46.6, 37.0], [46.7, 37.0], [46.8, 37.0], [46.9, 37.0], [47.0, 37.0], [47.1, 37.0], [47.2, 37.0], [47.3, 37.0], [47.4, 37.0], [47.5, 37.0], [47.6, 38.0], [47.7, 38.0], [47.8, 38.0], [47.9, 38.0], [48.0, 38.0], [48.1, 38.0], [48.2, 38.0], [48.3, 38.0], [48.4, 38.0], [48.5, 38.0], [48.6, 39.0], [48.7, 39.0], [48.8, 39.0], [48.9, 39.0], [49.0, 39.0], [49.1, 39.0], [49.2, 39.0], [49.3, 39.0], [49.4, 39.0], [49.5, 40.0], [49.6, 40.0], [49.7, 40.0], [49.8, 40.0], [49.9, 40.0], [50.0, 40.0], [50.1, 40.0], [50.2, 40.0], [50.3, 40.0], [50.4, 40.0], [50.5, 41.0], [50.6, 41.0], [50.7, 41.0], [50.8, 41.0], [50.9, 41.0], [51.0, 41.0], [51.1, 41.0], [51.2, 41.0], [51.3, 42.0], [51.4, 42.0], [51.5, 42.0], [51.6, 42.0], [51.7, 42.0], [51.8, 42.0], [51.9, 42.0], [52.0, 42.0], [52.1, 43.0], [52.2, 43.0], [52.3, 43.0], [52.4, 43.0], [52.5, 43.0], [52.6, 43.0], [52.7, 43.0], [52.8, 43.0], [52.9, 44.0], [53.0, 44.0], [53.1, 44.0], [53.2, 44.0], [53.3, 44.0], [53.4, 44.0], [53.5, 44.0], [53.6, 44.0], [53.7, 45.0], [53.8, 45.0], [53.9, 45.0], [54.0, 45.0], [54.1, 45.0], [54.2, 45.0], [54.3, 45.0], [54.4, 45.0], [54.5, 46.0], [54.6, 46.0], [54.7, 46.0], [54.8, 46.0], [54.9, 46.0], [55.0, 46.0], [55.1, 46.0], [55.2, 47.0], [55.3, 47.0], [55.4, 47.0], [55.5, 47.0], [55.6, 47.0], [55.7, 47.0], [55.8, 48.0], [55.9, 48.0], [56.0, 48.0], [56.1, 48.0], [56.2, 48.0], [56.3, 48.0], [56.4, 48.0], [56.5, 49.0], [56.6, 49.0], [56.7, 49.0], [56.8, 49.0], [56.9, 49.0], [57.0, 49.0], [57.1, 49.0], [57.2, 49.0], [57.3, 50.0], [57.4, 50.0], [57.5, 50.0], [57.6, 50.0], [57.7, 50.0], [57.8, 51.0], [57.9, 51.0], [58.0, 51.0], [58.1, 51.0], [58.2, 51.0], [58.3, 51.0], [58.4, 52.0], [58.5, 52.0], [58.6, 52.0], [58.7, 52.0], [58.8, 52.0], [58.9, 52.0], [59.0, 52.0], [59.1, 53.0], [59.2, 53.0], [59.3, 53.0], [59.4, 53.0], [59.5, 53.0], [59.6, 53.0], [59.7, 54.0], [59.8, 54.0], [59.9, 54.0], [60.0, 54.0], [60.1, 54.0], [60.2, 54.0], [60.3, 54.0], [60.4, 55.0], [60.5, 55.0], [60.6, 55.0], [60.7, 55.0], [60.8, 55.0], [60.9, 56.0], [61.0, 56.0], [61.1, 56.0], [61.2, 56.0], [61.3, 56.0], [61.4, 57.0], [61.5, 57.0], [61.6, 57.0], [61.7, 57.0], [61.8, 57.0], [61.9, 57.0], [62.0, 58.0], [62.1, 58.0], [62.2, 58.0], [62.3, 58.0], [62.4, 58.0], [62.5, 58.0], [62.6, 59.0], [62.7, 59.0], [62.8, 59.0], [62.9, 59.0], [63.0, 59.0], [63.1, 59.0], [63.2, 60.0], [63.3, 60.0], [63.4, 60.0], [63.5, 60.0], [63.6, 60.0], [63.7, 60.0], [63.8, 61.0], [63.9, 61.0], [64.0, 61.0], [64.1, 61.0], [64.2, 61.0], [64.3, 62.0], [64.4, 62.0], [64.5, 62.0], [64.6, 62.0], [64.7, 62.0], [64.8, 62.0], [64.9, 63.0], [65.0, 63.0], [65.1, 63.0], [65.2, 63.0], [65.3, 63.0], [65.4, 63.0], [65.5, 64.0], [65.6, 64.0], [65.7, 64.0], [65.8, 64.0], [65.9, 64.0], [66.0, 65.0], [66.1, 65.0], [66.2, 65.0], [66.3, 65.0], [66.4, 65.0], [66.5, 65.0], [66.6, 66.0], [66.7, 66.0], [66.8, 66.0], [66.9, 66.0], [67.0, 66.0], [67.1, 67.0], [67.2, 67.0], [67.3, 67.0], [67.4, 67.0], [67.5, 67.0], [67.6, 68.0], [67.7, 68.0], [67.8, 68.0], [67.9, 68.0], [68.0, 68.0], [68.1, 69.0], [68.2, 69.0], [68.3, 69.0], [68.4, 69.0], [68.5, 70.0], [68.6, 70.0], [68.7, 70.0], [68.8, 70.0], [68.9, 71.0], [69.0, 71.0], [69.1, 71.0], [69.2, 71.0], [69.3, 72.0], [69.4, 72.0], [69.5, 72.0], [69.6, 72.0], [69.7, 72.0], [69.8, 73.0], [69.9, 73.0], [70.0, 73.0], [70.1, 73.0], [70.2, 73.0], [70.3, 74.0], [70.4, 74.0], [70.5, 74.0], [70.6, 74.0], [70.7, 75.0], [70.8, 75.0], [70.9, 75.0], [71.0, 75.0], [71.1, 75.0], [71.2, 75.0], [71.3, 76.0], [71.4, 76.0], [71.5, 76.0], [71.6, 76.0], [71.7, 77.0], [71.8, 77.0], [71.9, 77.0], [72.0, 77.0], [72.1, 78.0], [72.2, 78.0], [72.3, 78.0], [72.4, 78.0], [72.5, 79.0], [72.6, 79.0], [72.7, 79.0], [72.8, 79.0], [72.9, 80.0], [73.0, 80.0], [73.1, 80.0], [73.2, 80.0], [73.3, 81.0], [73.4, 81.0], [73.5, 81.0], [73.6, 81.0], [73.7, 82.0], [73.8, 82.0], [73.9, 82.0], [74.0, 82.0], [74.1, 83.0], [74.2, 83.0], [74.3, 83.0], [74.4, 83.0], [74.5, 84.0], [74.6, 84.0], [74.7, 84.0], [74.8, 85.0], [74.9, 85.0], [75.0, 85.0], [75.1, 86.0], [75.2, 86.0], [75.3, 86.0], [75.4, 87.0], [75.5, 87.0], [75.6, 87.0], [75.7, 87.0], [75.8, 88.0], [75.9, 88.0], [76.0, 88.0], [76.1, 88.0], [76.2, 89.0], [76.3, 89.0], [76.4, 89.0], [76.5, 90.0], [76.6, 90.0], [76.7, 90.0], [76.8, 91.0], [76.9, 91.0], [77.0, 91.0], [77.1, 92.0], [77.2, 92.0], [77.3, 92.0], [77.4, 93.0], [77.5, 93.0], [77.6, 93.0], [77.7, 94.0], [77.8, 94.0], [77.9, 94.0], [78.0, 95.0], [78.1, 95.0], [78.2, 95.0], [78.3, 96.0], [78.4, 96.0], [78.5, 96.0], [78.6, 97.0], [78.7, 97.0], [78.8, 97.0], [78.9, 98.0], [79.0, 98.0], [79.1, 98.0], [79.2, 99.0], [79.3, 99.0], [79.4, 99.0], [79.5, 100.0], [79.6, 100.0], [79.7, 100.0], [79.8, 101.0], [79.9, 101.0], [80.0, 101.0], [80.1, 102.0], [80.2, 102.0], [80.3, 103.0], [80.4, 103.0], [80.5, 103.0], [80.6, 104.0], [80.7, 104.0], [80.8, 105.0], [80.9, 105.0], [81.0, 105.0], [81.1, 106.0], [81.2, 106.0], [81.3, 106.0], [81.4, 107.0], [81.5, 107.0], [81.6, 107.0], [81.7, 108.0], [81.8, 108.0], [81.9, 108.0], [82.0, 109.0], [82.1, 109.0], [82.2, 109.0], [82.3, 110.0], [82.4, 110.0], [82.5, 111.0], [82.6, 111.0], [82.7, 112.0], [82.8, 112.0], [82.9, 113.0], [83.0, 113.0], [83.1, 114.0], [83.2, 114.0], [83.3, 115.0], [83.4, 115.0], [83.5, 116.0], [83.6, 116.0], [83.7, 117.0], [83.8, 117.0], [83.9, 117.0], [84.0, 118.0], [84.1, 119.0], [84.2, 119.0], [84.3, 119.0], [84.4, 120.0], [84.5, 121.0], [84.6, 121.0], [84.7, 122.0], [84.8, 123.0], [84.9, 123.0], [85.0, 124.0], [85.1, 124.0], [85.2, 125.0], [85.3, 125.0], [85.4, 126.0], [85.5, 127.0], [85.6, 127.0], [85.7, 128.0], [85.8, 128.0], [85.9, 129.0], [86.0, 129.0], [86.1, 130.0], [86.2, 130.0], [86.3, 131.0], [86.4, 132.0], [86.5, 132.0], [86.6, 133.0], [86.7, 134.0], [86.8, 134.0], [86.9, 135.0], [87.0, 136.0], [87.1, 137.0], [87.2, 137.0], [87.3, 138.0], [87.4, 139.0], [87.5, 139.0], [87.6, 140.0], [87.7, 141.0], [87.8, 141.0], [87.9, 142.0], [88.0, 143.0], [88.1, 144.0], [88.2, 145.0], [88.3, 146.0], [88.4, 147.0], [88.5, 147.0], [88.6, 148.0], [88.7, 149.0], [88.8, 150.0], [88.9, 151.0], [89.0, 151.0], [89.1, 152.0], [89.2, 153.0], [89.3, 154.0], [89.4, 155.0], [89.5, 155.0], [89.6, 156.0], [89.7, 157.0], [89.8, 158.0], [89.9, 159.0], [90.0, 160.0], [90.1, 161.0], [90.2, 162.0], [90.3, 163.0], [90.4, 164.0], [90.5, 165.0], [90.6, 166.0], [90.7, 167.0], [90.8, 168.0], [90.9, 168.0], [91.0, 169.0], [91.1, 170.0], [91.2, 171.0], [91.3, 172.0], [91.4, 173.0], [91.5, 173.0], [91.6, 174.0], [91.7, 175.0], [91.8, 176.0], [91.9, 177.0], [92.0, 177.0], [92.1, 178.0], [92.2, 179.0], [92.3, 180.0], [92.4, 181.0], [92.5, 182.0], [92.6, 183.0], [92.7, 185.0], [92.8, 186.0], [92.9, 187.0], [93.0, 188.0], [93.1, 189.0], [93.2, 190.0], [93.3, 191.0], [93.4, 192.0], [93.5, 193.0], [93.6, 194.0], [93.7, 195.0], [93.8, 196.0], [93.9, 197.0], [94.0, 199.0], [94.1, 200.0], [94.2, 201.0], [94.3, 202.0], [94.4, 203.0], [94.5, 204.0], [94.6, 206.0], [94.7, 207.0], [94.8, 209.0], [94.9, 210.0], [95.0, 211.0], [95.1, 213.0], [95.2, 214.0], [95.3, 215.0], [95.4, 216.0], [95.5, 217.0], [95.6, 219.0], [95.7, 220.0], [95.8, 222.0], [95.9, 223.0], [96.0, 225.0], [96.1, 227.0], [96.2, 229.0], [96.3, 231.0], [96.4, 232.0], [96.5, 236.0], [96.6, 238.0], [96.7, 240.0], [96.8, 242.0], [96.9, 244.0], [97.0, 247.0], [97.1, 250.0], [97.2, 252.0], [97.3, 256.0], [97.4, 259.0], [97.5, 262.0], [97.6, 265.0], [97.7, 268.0], [97.8, 272.0], [97.9, 274.0], [98.0, 279.0], [98.1, 283.0], [98.2, 287.0], [98.3, 293.0], [98.4, 298.0], [98.5, 303.0], [98.6, 307.0], [98.7, 313.0], [98.8, 317.0], [98.9, 325.0], [99.0, 336.0], [99.1, 353.0], [99.2, 374.0], [99.3, 389.0], [99.4, 415.0], [99.5, 439.0], [99.6, 466.0], [99.7, 497.0], [99.8, 605.0], [99.9, 693.0]], "isOverall": false, "label": "获得最新比赛信息", "isController": false}, {"data": [[0.0, 122.0], [0.1, 122.0], [0.2, 123.0], [0.3, 123.0], [0.4, 124.0], [0.5, 124.0], [0.6, 124.0], [0.7, 124.0], [0.8, 125.0], [0.9, 125.0], [1.0, 125.0], [1.1, 125.0], [1.2, 125.0], [1.3, 125.0], [1.4, 125.0], [1.5, 125.0], [1.6, 126.0], [1.7, 126.0], [1.8, 126.0], [1.9, 126.0], [2.0, 126.0], [2.1, 127.0], [2.2, 127.0], [2.3, 127.0], [2.4, 127.0], [2.5, 127.0], [2.6, 127.0], [2.7, 127.0], [2.8, 127.0], [2.9, 127.0], [3.0, 127.0], [3.1, 128.0], [3.2, 128.0], [3.3, 128.0], [3.4, 128.0], [3.5, 128.0], [3.6, 128.0], [3.7, 128.0], [3.8, 128.0], [3.9, 128.0], [4.0, 128.0], [4.1, 128.0], [4.2, 129.0], [4.3, 129.0], [4.4, 129.0], [4.5, 129.0], [4.6, 129.0], [4.7, 129.0], [4.8, 129.0], [4.9, 129.0], [5.0, 129.0], [5.1, 129.0], [5.2, 129.0], [5.3, 129.0], [5.4, 129.0], [5.5, 129.0], [5.6, 129.0], [5.7, 130.0], [5.8, 130.0], [5.9, 130.0], [6.0, 130.0], [6.1, 130.0], [6.2, 130.0], [6.3, 130.0], [6.4, 130.0], [6.5, 130.0], [6.6, 130.0], [6.7, 131.0], [6.8, 131.0], [6.9, 131.0], [7.0, 131.0], [7.1, 131.0], [7.2, 131.0], [7.3, 131.0], [7.4, 131.0], [7.5, 131.0], [7.6, 131.0], [7.7, 131.0], [7.8, 131.0], [7.9, 132.0], [8.0, 132.0], [8.1, 132.0], [8.2, 132.0], [8.3, 132.0], [8.4, 132.0], [8.5, 132.0], [8.6, 132.0], [8.7, 132.0], [8.8, 132.0], [8.9, 132.0], [9.0, 133.0], [9.1, 133.0], [9.2, 133.0], [9.3, 133.0], [9.4, 133.0], [9.5, 133.0], [9.6, 133.0], [9.7, 133.0], [9.8, 133.0], [9.9, 133.0], [10.0, 133.0], [10.1, 133.0], [10.2, 133.0], [10.3, 133.0], [10.4, 134.0], [10.5, 134.0], [10.6, 134.0], [10.7, 134.0], [10.8, 134.0], [10.9, 134.0], [11.0, 134.0], [11.1, 134.0], [11.2, 134.0], [11.3, 134.0], [11.4, 135.0], [11.5, 135.0], [11.6, 135.0], [11.7, 135.0], [11.8, 135.0], [11.9, 135.0], [12.0, 135.0], [12.1, 135.0], [12.2, 135.0], [12.3, 136.0], [12.4, 136.0], [12.5, 136.0], [12.6, 136.0], [12.7, 136.0], [12.8, 136.0], [12.9, 136.0], [13.0, 136.0], [13.1, 136.0], [13.2, 137.0], [13.3, 137.0], [13.4, 137.0], [13.5, 137.0], [13.6, 137.0], [13.7, 137.0], [13.8, 137.0], [13.9, 137.0], [14.0, 138.0], [14.1, 138.0], [14.2, 138.0], [14.3, 138.0], [14.4, 138.0], [14.5, 138.0], [14.6, 138.0], [14.7, 138.0], [14.8, 138.0], [14.9, 139.0], [15.0, 139.0], [15.1, 139.0], [15.2, 139.0], [15.3, 139.0], [15.4, 139.0], [15.5, 139.0], [15.6, 139.0], [15.7, 140.0], [15.8, 140.0], [15.9, 140.0], [16.0, 140.0], [16.1, 140.0], [16.2, 140.0], [16.3, 140.0], [16.4, 140.0], [16.5, 140.0], [16.6, 140.0], [16.7, 141.0], [16.8, 141.0], [16.9, 141.0], [17.0, 141.0], [17.1, 141.0], [17.2, 141.0], [17.3, 141.0], [17.4, 141.0], [17.5, 142.0], [17.6, 142.0], [17.7, 142.0], [17.8, 142.0], [17.9, 142.0], [18.0, 142.0], [18.1, 142.0], [18.2, 142.0], [18.3, 142.0], [18.4, 142.0], [18.5, 142.0], [18.6, 142.0], [18.7, 143.0], [18.8, 143.0], [18.9, 143.0], [19.0, 143.0], [19.1, 143.0], [19.2, 143.0], [19.3, 143.0], [19.4, 143.0], [19.5, 143.0], [19.6, 144.0], [19.7, 144.0], [19.8, 144.0], [19.9, 144.0], [20.0, 144.0], [20.1, 145.0], [20.2, 145.0], [20.3, 145.0], [20.4, 145.0], [20.5, 145.0], [20.6, 145.0], [20.7, 145.0], [20.8, 145.0], [20.9, 145.0], [21.0, 145.0], [21.1, 145.0], [21.2, 146.0], [21.3, 146.0], [21.4, 146.0], [21.5, 146.0], [21.6, 146.0], [21.7, 146.0], [21.8, 146.0], [21.9, 146.0], [22.0, 147.0], [22.1, 147.0], [22.2, 147.0], [22.3, 147.0], [22.4, 147.0], [22.5, 147.0], [22.6, 147.0], [22.7, 147.0], [22.8, 148.0], [22.9, 148.0], [23.0, 148.0], [23.1, 148.0], [23.2, 149.0], [23.3, 149.0], [23.4, 149.0], [23.5, 149.0], [23.6, 150.0], [23.7, 150.0], [23.8, 150.0], [23.9, 150.0], [24.0, 150.0], [24.1, 150.0], [24.2, 150.0], [24.3, 150.0], [24.4, 150.0], [24.5, 151.0], [24.6, 151.0], [24.7, 151.0], [24.8, 151.0], [24.9, 151.0], [25.0, 151.0], [25.1, 152.0], [25.2, 152.0], [25.3, 152.0], [25.4, 152.0], [25.5, 152.0], [25.6, 152.0], [25.7, 153.0], [25.8, 153.0], [25.9, 153.0], [26.0, 153.0], [26.1, 153.0], [26.2, 153.0], [26.3, 153.0], [26.4, 153.0], [26.5, 154.0], [26.6, 154.0], [26.7, 154.0], [26.8, 154.0], [26.9, 154.0], [27.0, 154.0], [27.1, 155.0], [27.2, 155.0], [27.3, 155.0], [27.4, 155.0], [27.5, 155.0], [27.6, 155.0], [27.7, 156.0], [27.8, 156.0], [27.9, 156.0], [28.0, 156.0], [28.1, 156.0], [28.2, 156.0], [28.3, 157.0], [28.4, 157.0], [28.5, 157.0], [28.6, 157.0], [28.7, 158.0], [28.8, 158.0], [28.9, 158.0], [29.0, 158.0], [29.1, 158.0], [29.2, 158.0], [29.3, 158.0], [29.4, 158.0], [29.5, 159.0], [29.6, 159.0], [29.7, 159.0], [29.8, 159.0], [29.9, 159.0], [30.0, 159.0], [30.1, 159.0], [30.2, 159.0], [30.3, 159.0], [30.4, 159.0], [30.5, 159.0], [30.6, 159.0], [30.7, 160.0], [30.8, 160.0], [30.9, 160.0], [31.0, 160.0], [31.1, 160.0], [31.2, 161.0], [31.3, 161.0], [31.4, 161.0], [31.5, 161.0], [31.6, 161.0], [31.7, 162.0], [31.8, 162.0], [31.9, 162.0], [32.0, 162.0], [32.1, 162.0], [32.2, 163.0], [32.3, 163.0], [32.4, 163.0], [32.5, 163.0], [32.6, 163.0], [32.7, 163.0], [32.8, 164.0], [32.9, 164.0], [33.0, 164.0], [33.1, 165.0], [33.2, 165.0], [33.3, 165.0], [33.4, 165.0], [33.5, 165.0], [33.6, 165.0], [33.7, 165.0], [33.8, 165.0], [33.9, 165.0], [34.0, 165.0], [34.1, 166.0], [34.2, 166.0], [34.3, 166.0], [34.4, 166.0], [34.5, 167.0], [34.6, 167.0], [34.7, 167.0], [34.8, 167.0], [34.9, 167.0], [35.0, 167.0], [35.1, 167.0], [35.2, 167.0], [35.3, 167.0], [35.4, 168.0], [35.5, 168.0], [35.6, 168.0], [35.7, 168.0], [35.8, 168.0], [35.9, 168.0], [36.0, 168.0], [36.1, 168.0], [36.2, 169.0], [36.3, 169.0], [36.4, 169.0], [36.5, 169.0], [36.6, 170.0], [36.7, 170.0], [36.8, 170.0], [36.9, 170.0], [37.0, 170.0], [37.1, 170.0], [37.2, 170.0], [37.3, 170.0], [37.4, 171.0], [37.5, 171.0], [37.6, 171.0], [37.7, 171.0], [37.8, 171.0], [37.9, 171.0], [38.0, 172.0], [38.1, 172.0], [38.2, 172.0], [38.3, 172.0], [38.4, 172.0], [38.5, 173.0], [38.6, 173.0], [38.7, 173.0], [38.8, 173.0], [38.9, 173.0], [39.0, 173.0], [39.1, 173.0], [39.2, 174.0], [39.3, 174.0], [39.4, 174.0], [39.5, 174.0], [39.6, 174.0], [39.7, 175.0], [39.8, 175.0], [39.9, 175.0], [40.0, 175.0], [40.1, 175.0], [40.2, 175.0], [40.3, 175.0], [40.4, 175.0], [40.5, 176.0], [40.6, 176.0], [40.7, 176.0], [40.8, 176.0], [40.9, 177.0], [41.0, 177.0], [41.1, 177.0], [41.2, 177.0], [41.3, 177.0], [41.4, 178.0], [41.5, 178.0], [41.6, 178.0], [41.7, 178.0], [41.8, 179.0], [41.9, 179.0], [42.0, 179.0], [42.1, 179.0], [42.2, 179.0], [42.3, 179.0], [42.4, 180.0], [42.5, 180.0], [42.6, 180.0], [42.7, 180.0], [42.8, 181.0], [42.9, 181.0], [43.0, 181.0], [43.1, 182.0], [43.2, 182.0], [43.3, 182.0], [43.4, 182.0], [43.5, 182.0], [43.6, 183.0], [43.7, 183.0], [43.8, 183.0], [43.9, 183.0], [44.0, 183.0], [44.1, 183.0], [44.2, 183.0], [44.3, 184.0], [44.4, 184.0], [44.5, 184.0], [44.6, 184.0], [44.7, 185.0], [44.8, 185.0], [44.9, 185.0], [45.0, 185.0], [45.1, 185.0], [45.2, 186.0], [45.3, 186.0], [45.4, 186.0], [45.5, 186.0], [45.6, 187.0], [45.7, 187.0], [45.8, 187.0], [45.9, 187.0], [46.0, 187.0], [46.1, 187.0], [46.2, 187.0], [46.3, 187.0], [46.4, 188.0], [46.5, 188.0], [46.6, 188.0], [46.7, 188.0], [46.8, 188.0], [46.9, 188.0], [47.0, 188.0], [47.1, 189.0], [47.2, 189.0], [47.3, 189.0], [47.4, 190.0], [47.5, 190.0], [47.6, 190.0], [47.7, 191.0], [47.8, 191.0], [47.9, 191.0], [48.0, 191.0], [48.1, 191.0], [48.2, 191.0], [48.3, 192.0], [48.4, 192.0], [48.5, 192.0], [48.6, 192.0], [48.7, 193.0], [48.8, 193.0], [48.9, 193.0], [49.0, 193.0], [49.1, 193.0], [49.2, 193.0], [49.3, 194.0], [49.4, 194.0], [49.5, 194.0], [49.6, 194.0], [49.7, 195.0], [49.8, 195.0], [49.9, 195.0], [50.0, 196.0], [50.1, 196.0], [50.2, 196.0], [50.3, 196.0], [50.4, 197.0], [50.5, 197.0], [50.6, 198.0], [50.7, 198.0], [50.8, 199.0], [50.9, 199.0], [51.0, 199.0], [51.1, 200.0], [51.2, 200.0], [51.3, 201.0], [51.4, 201.0], [51.5, 201.0], [51.6, 201.0], [51.7, 202.0], [51.8, 202.0], [51.9, 202.0], [52.0, 202.0], [52.1, 202.0], [52.2, 203.0], [52.3, 203.0], [52.4, 203.0], [52.5, 203.0], [52.6, 203.0], [52.7, 204.0], [52.8, 204.0], [52.9, 205.0], [53.0, 207.0], [53.1, 207.0], [53.2, 208.0], [53.3, 208.0], [53.4, 208.0], [53.5, 209.0], [53.6, 209.0], [53.7, 209.0], [53.8, 209.0], [53.9, 209.0], [54.0, 210.0], [54.1, 210.0], [54.2, 210.0], [54.3, 210.0], [54.4, 210.0], [54.5, 211.0], [54.6, 211.0], [54.7, 212.0], [54.8, 212.0], [54.9, 213.0], [55.0, 213.0], [55.1, 214.0], [55.2, 214.0], [55.3, 214.0], [55.4, 215.0], [55.5, 215.0], [55.6, 215.0], [55.7, 217.0], [55.8, 218.0], [55.9, 218.0], [56.0, 219.0], [56.1, 219.0], [56.2, 220.0], [56.3, 220.0], [56.4, 220.0], [56.5, 221.0], [56.6, 222.0], [56.7, 222.0], [56.8, 223.0], [56.9, 223.0], [57.0, 224.0], [57.1, 225.0], [57.2, 225.0], [57.3, 225.0], [57.4, 226.0], [57.5, 226.0], [57.6, 226.0], [57.7, 227.0], [57.8, 227.0], [57.9, 228.0], [58.0, 228.0], [58.1, 229.0], [58.2, 229.0], [58.3, 229.0], [58.4, 230.0], [58.5, 230.0], [58.6, 230.0], [58.7, 231.0], [58.8, 232.0], [58.9, 232.0], [59.0, 232.0], [59.1, 232.0], [59.2, 233.0], [59.3, 233.0], [59.4, 233.0], [59.5, 233.0], [59.6, 233.0], [59.7, 234.0], [59.8, 234.0], [59.9, 234.0], [60.0, 235.0], [60.1, 235.0], [60.2, 236.0], [60.3, 236.0], [60.4, 237.0], [60.5, 238.0], [60.6, 238.0], [60.7, 238.0], [60.8, 238.0], [60.9, 239.0], [61.0, 240.0], [61.1, 240.0], [61.2, 241.0], [61.3, 241.0], [61.4, 242.0], [61.5, 242.0], [61.6, 243.0], [61.7, 243.0], [61.8, 243.0], [61.9, 244.0], [62.0, 244.0], [62.1, 244.0], [62.2, 244.0], [62.3, 245.0], [62.4, 246.0], [62.5, 246.0], [62.6, 247.0], [62.7, 247.0], [62.8, 248.0], [62.9, 249.0], [63.0, 249.0], [63.1, 249.0], [63.2, 249.0], [63.3, 250.0], [63.4, 250.0], [63.5, 250.0], [63.6, 253.0], [63.7, 253.0], [63.8, 253.0], [63.9, 253.0], [64.0, 254.0], [64.1, 254.0], [64.2, 255.0], [64.3, 255.0], [64.4, 255.0], [64.5, 256.0], [64.6, 257.0], [64.7, 258.0], [64.8, 259.0], [64.9, 259.0], [65.0, 259.0], [65.1, 260.0], [65.2, 260.0], [65.3, 261.0], [65.4, 261.0], [65.5, 262.0], [65.6, 262.0], [65.7, 263.0], [65.8, 263.0], [65.9, 264.0], [66.0, 264.0], [66.1, 264.0], [66.2, 265.0], [66.3, 266.0], [66.4, 267.0], [66.5, 267.0], [66.6, 267.0], [66.7, 268.0], [66.8, 269.0], [66.9, 269.0], [67.0, 269.0], [67.1, 269.0], [67.2, 270.0], [67.3, 270.0], [67.4, 270.0], [67.5, 272.0], [67.6, 272.0], [67.7, 273.0], [67.8, 273.0], [67.9, 273.0], [68.0, 274.0], [68.1, 274.0], [68.2, 275.0], [68.3, 275.0], [68.4, 277.0], [68.5, 278.0], [68.6, 279.0], [68.7, 279.0], [68.8, 279.0], [68.9, 280.0], [69.0, 281.0], [69.1, 281.0], [69.2, 281.0], [69.3, 282.0], [69.4, 282.0], [69.5, 283.0], [69.6, 284.0], [69.7, 284.0], [69.8, 285.0], [69.9, 286.0], [70.0, 286.0], [70.1, 287.0], [70.2, 287.0], [70.3, 288.0], [70.4, 290.0], [70.5, 290.0], [70.6, 291.0], [70.7, 291.0], [70.8, 291.0], [70.9, 292.0], [71.0, 293.0], [71.1, 293.0], [71.2, 294.0], [71.3, 294.0], [71.4, 295.0], [71.5, 297.0], [71.6, 297.0], [71.7, 297.0], [71.8, 298.0], [71.9, 299.0], [72.0, 299.0], [72.1, 300.0], [72.2, 300.0], [72.3, 301.0], [72.4, 302.0], [72.5, 303.0], [72.6, 304.0], [72.7, 305.0], [72.8, 306.0], [72.9, 306.0], [73.0, 307.0], [73.1, 307.0], [73.2, 308.0], [73.3, 308.0], [73.4, 309.0], [73.5, 309.0], [73.6, 310.0], [73.7, 311.0], [73.8, 311.0], [73.9, 312.0], [74.0, 312.0], [74.1, 314.0], [74.2, 315.0], [74.3, 316.0], [74.4, 317.0], [74.5, 318.0], [74.6, 318.0], [74.7, 319.0], [74.8, 320.0], [74.9, 321.0], [75.0, 322.0], [75.1, 322.0], [75.2, 323.0], [75.3, 325.0], [75.4, 326.0], [75.5, 326.0], [75.6, 327.0], [75.7, 328.0], [75.8, 330.0], [75.9, 331.0], [76.0, 331.0], [76.1, 332.0], [76.2, 332.0], [76.3, 332.0], [76.4, 333.0], [76.5, 334.0], [76.6, 335.0], [76.7, 335.0], [76.8, 336.0], [76.9, 336.0], [77.0, 338.0], [77.1, 338.0], [77.2, 339.0], [77.3, 340.0], [77.4, 342.0], [77.5, 343.0], [77.6, 343.0], [77.7, 344.0], [77.8, 344.0], [77.9, 345.0], [78.0, 346.0], [78.1, 347.0], [78.2, 347.0], [78.3, 348.0], [78.4, 349.0], [78.5, 349.0], [78.6, 349.0], [78.7, 349.0], [78.8, 350.0], [78.9, 350.0], [79.0, 351.0], [79.1, 351.0], [79.2, 352.0], [79.3, 353.0], [79.4, 354.0], [79.5, 354.0], [79.6, 354.0], [79.7, 355.0], [79.8, 356.0], [79.9, 356.0], [80.0, 358.0], [80.1, 359.0], [80.2, 360.0], [80.3, 362.0], [80.4, 363.0], [80.5, 363.0], [80.6, 364.0], [80.7, 364.0], [80.8, 365.0], [80.9, 365.0], [81.0, 366.0], [81.1, 367.0], [81.2, 368.0], [81.3, 369.0], [81.4, 371.0], [81.5, 373.0], [81.6, 375.0], [81.7, 375.0], [81.8, 375.0], [81.9, 376.0], [82.0, 376.0], [82.1, 377.0], [82.2, 377.0], [82.3, 378.0], [82.4, 378.0], [82.5, 380.0], [82.6, 381.0], [82.7, 381.0], [82.8, 382.0], [82.9, 383.0], [83.0, 384.0], [83.1, 385.0], [83.2, 386.0], [83.3, 389.0], [83.4, 390.0], [83.5, 391.0], [83.6, 395.0], [83.7, 397.0], [83.8, 399.0], [83.9, 400.0], [84.0, 400.0], [84.1, 402.0], [84.2, 402.0], [84.3, 403.0], [84.4, 407.0], [84.5, 409.0], [84.6, 411.0], [84.7, 413.0], [84.8, 413.0], [84.9, 415.0], [85.0, 418.0], [85.1, 419.0], [85.2, 421.0], [85.3, 423.0], [85.4, 424.0], [85.5, 426.0], [85.6, 428.0], [85.7, 429.0], [85.8, 430.0], [85.9, 430.0], [86.0, 431.0], [86.1, 434.0], [86.2, 435.0], [86.3, 438.0], [86.4, 438.0], [86.5, 440.0], [86.6, 442.0], [86.7, 443.0], [86.8, 444.0], [86.9, 445.0], [87.0, 446.0], [87.1, 447.0], [87.2, 448.0], [87.3, 449.0], [87.4, 450.0], [87.5, 451.0], [87.6, 455.0], [87.7, 458.0], [87.8, 460.0], [87.9, 461.0], [88.0, 462.0], [88.1, 464.0], [88.2, 466.0], [88.3, 467.0], [88.4, 469.0], [88.5, 471.0], [88.6, 472.0], [88.7, 474.0], [88.8, 474.0], [88.9, 477.0], [89.0, 478.0], [89.1, 479.0], [89.2, 479.0], [89.3, 480.0], [89.4, 484.0], [89.5, 486.0], [89.6, 487.0], [89.7, 489.0], [89.8, 492.0], [89.9, 493.0], [90.0, 494.0], [90.1, 498.0], [90.2, 502.0], [90.3, 503.0], [90.4, 506.0], [90.5, 509.0], [90.6, 509.0], [90.7, 511.0], [90.8, 511.0], [90.9, 512.0], [91.0, 514.0], [91.1, 515.0], [91.2, 521.0], [91.3, 523.0], [91.4, 524.0], [91.5, 525.0], [91.6, 527.0], [91.7, 528.0], [91.8, 531.0], [91.9, 533.0], [92.0, 534.0], [92.1, 537.0], [92.2, 539.0], [92.3, 540.0], [92.4, 542.0], [92.5, 545.0], [92.6, 546.0], [92.7, 549.0], [92.8, 552.0], [92.9, 554.0], [93.0, 555.0], [93.1, 556.0], [93.2, 558.0], [93.3, 564.0], [93.4, 565.0], [93.5, 569.0], [93.6, 570.0], [93.7, 574.0], [93.8, 579.0], [93.9, 585.0], [94.0, 588.0], [94.1, 589.0], [94.2, 592.0], [94.3, 594.0], [94.4, 601.0], [94.5, 605.0], [94.6, 609.0], [94.7, 613.0], [94.8, 619.0], [94.9, 623.0], [95.0, 627.0], [95.1, 633.0], [95.2, 635.0], [95.3, 637.0], [95.4, 643.0], [95.5, 650.0], [95.6, 652.0], [95.7, 655.0], [95.8, 656.0], [95.9, 660.0], [96.0, 664.0], [96.1, 671.0], [96.2, 691.0], [96.3, 694.0], [96.4, 732.0], [96.5, 738.0], [96.6, 753.0], [96.7, 761.0], [96.8, 763.0], [96.9, 765.0], [97.0, 784.0], [97.1, 793.0], [97.2, 848.0], [97.3, 851.0], [97.4, 911.0], [97.5, 948.0], [97.6, 1004.0], [97.7, 1008.0], [97.8, 1042.0], [97.9, 1080.0], [98.0, 1093.0], [98.1, 1115.0], [98.2, 1153.0], [98.3, 1193.0], [98.4, 1210.0], [98.5, 1230.0], [98.6, 1254.0], [98.7, 1259.0], [98.8, 1493.0], [98.9, 1557.0], [99.0, 1614.0], [99.1, 2443.0], [99.2, 21032.0], [99.3, 21036.0], [99.4, 21042.0], [99.5, 21042.0], [99.6, 21043.0], [99.7, 21046.0], [99.8, 21047.0], [99.9, 21050.0]], "isOverall": false, "label": "登录请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 95298.0, "series": [{"data": [[0.0, 95298.0], [300.0, 1099.0], [600.0, 161.0], [700.0, 44.0], [1400.0, 1.0], [100.0, 17570.0], [200.0, 5249.0], [400.0, 427.0], [800.0, 16.0], [900.0, 17.0], [1000.0, 3.0], [500.0, 115.0]], "isOverall": false, "label": "获得最新比赛信息", "isController": false}, {"data": [[600.0, 41.0], [2400.0, 1.0], [700.0, 15.0], [200.0, 420.0], [800.0, 4.0], [900.0, 5.0], [1000.0, 9.0], [1100.0, 6.0], [300.0, 237.0], [1200.0, 8.0], [21000.0, 17.0], [1300.0, 1.0], [1400.0, 1.0], [1500.0, 3.0], [100.0, 1021.0], [400.0, 125.0], [1600.0, 2.0], [500.0, 84.0]], "isOverall": false, "label": "登录请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 121452.0, "series": [{"data": [[0.0, 121452.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 525.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 17.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.623531835977914, "minX": 1.6314585E12, "maxY": 98.5274592637297, "series": [{"data": [[1.63145868E12, 98.5274592637297], [1.6314585E12, 18.623531835977914], [1.63145862E12, 60.711851015801095], [1.63145856E12, 29.05821927316141]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145868E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 13.36, "minX": 1.0, "maxY": 2458.5789473684213, "series": [{"data": [[2.0, 21.0], [3.0, 18.0], [4.0, 18.75], [5.0, 13.36], [6.0, 17.433333333333337], [7.0, 13.744186046511626], [8.0, 16.57333333333333], [9.0, 13.512562814070346], [10.0, 14.804229607250736], [11.0, 16.766135792120693], [12.0, 17.600563909774422], [13.0, 18.443833236826855], [14.0, 19.918542336548832], [15.0, 21.22066276803119], [16.0, 21.90170688640375], [17.0, 21.90795781399808], [18.0, 29.985770750988113], [19.0, 28.09412711182621], [20.0, 28.922170803533827], [21.0, 31.394984326018772], [22.0, 30.476159158171697], [23.0, 37.84544359694909], [24.0, 35.43575655114118], [25.0, 32.138347884486265], [26.0, 29.184303112313952], [27.0, 30.642089477630538], [28.0, 37.95720609936043], [29.0, 39.45008912655971], [30.0, 40.92700501253121], [31.0, 44.2591701743835], [32.0, 44.085074060007706], [33.0, 39.80083234244936], [34.0, 41.535014005602235], [35.0, 42.21720733427365], [36.0, 41.99722222222226], [37.0, 39.982528263103795], [38.0, 39.83393242271745], [39.0, 39.978428351309745], [40.0, 61.126794258373245], [41.0, 47.483315392895555], [42.0, 57.91358994501185], [43.0, 61.79614949037374], [44.0, 54.80936995153469], [45.0, 66.13881019830028], [46.0, 66.4495327102804], [47.0, 70.49686098654716], [48.0, 73.06730769230766], [49.0, 98.95774647887325], [50.0, 100.27358490566037], [51.0, 100.3994413407821], [52.0, 100.5204081632653], [53.0, 94.43312101910826], [54.0, 94.26491994177597], [55.0, 92.62630208333323], [56.0, 91.24285714285716], [57.0, 88.22014388489205], [59.0, 103.14673913043477], [58.0, 93.74624060150377], [60.0, 122.01102941176475], [61.0, 104.34240561896387], [62.0, 90.98640483383697], [63.0, 110.39525993883765], [64.0, 99.68237082066877], [66.0, 116.78301886792454], [65.0, 96.56718749999983], [67.0, 98.19583333333324], [68.0, 136.6062176165803], [69.0, 82.87567567567575], [70.0, 103.91782086795924], [71.0, 106.18978912319645], [72.0, 101.45724059293043], [73.0, 123.80288957688339], [74.0, 116.64546684709063], [75.0, 133.41666666666654], [76.0, 134.21732745961805], [77.0, 139.16845329249614], [78.0, 187.9333333333333], [79.0, 99.4875283446712], [80.0, 105.77830188679238], [81.0, 137.30809399477812], [82.0, 140.85294117647044], [83.0, 117.69553805774275], [84.0, 123.23140495867773], [85.0, 180.50253807106594], [86.0, 155.95238095238085], [87.0, 82.4575411913816], [88.0, 102.40934065934056], [89.0, 121.27932285368796], [90.0, 139.44603524229103], [91.0, 168.5904121110175], [92.0, 157.31047992164534], [93.0, 140.84422110552762], [94.0, 136.4983534577389], [95.0, 165.5863874345552], [96.0, 164.896321070234], [97.0, 154.62322946175638], [98.0, 116.07342657342653], [99.0, 116.59606986899567], [100.0, 129.8590308370043], [101.0, 183.96800000000005], [102.0, 177.20865139949098], [103.0, 222.10752688172036], [104.0, 323.9565217391303], [105.0, 346.5921052631578], [107.0, 265.55555555555554], [109.0, 344.7460317460318], [110.0, 221.9242053789731], [111.0, 181.04055944055958], [108.0, 231.3243243243243], [112.0, 190.77916666666673], [113.0, 178.92345276872976], [114.0, 176.67185628742533], [115.0, 165.31669865642982], [116.0, 177.55165069222596], [117.0, 230.83657587548655], [118.0, 227.75399361022357], [119.0, 228.36842105263148], [120.0, 171.40384615384608], [121.0, 149.5438066465257], [122.0, 153.28415300546447], [123.0, 212.66666666666669], [1.0, 16.2]], "isOverall": false, "label": "获得最新比赛信息", "isController": false}, {"data": [[44.79765833333251, 67.47349166666703]], "isOverall": false, "label": "获得最新比赛信息-Aggregated", "isController": false}, {"data": [[4.0, 207.0], [5.0, 137.0], [6.0, 139.0], [7.0, 134.0], [8.0, 134.0], [9.0, 131.83333333333331], [10.0, 134.17857142857144], [11.0, 133.49999999999994], [12.0, 141.28846153846155], [13.0, 140.18181818181822], [14.0, 149.61702127659575], [15.0, 153.40909090909088], [16.0, 155.86363636363637], [17.0, 143.60000000000002], [18.0, 1939.791666666667], [19.0, 1031.72], [20.0, 622.4130434782605], [21.0, 600.9591836734699], [22.0, 182.56862745098036], [23.0, 710.108695652174], [24.0, 299.13333333333344], [25.0, 1001.8846153846156], [26.0, 173.948275862069], [27.0, 452.4800000000002], [28.0, 175.97260273972609], [29.0, 791.588235294118], [30.0, 193.48387096774195], [31.0, 201.58620689655174], [32.0, 193.26829268292678], [33.0, 200.25000000000003], [34.0, 282.77777777777777], [35.0, 1717.7857142857142], [37.0, 218.76470588235293], [36.0, 218.45454545454547], [39.0, 240.64], [38.0, 300.55555555555554], [40.0, 1327.6499999999999], [41.0, 2154.818181818182], [42.0, 2458.5789473684213], [43.0, 1574.4375000000002], [44.0, 1381.2105263157894], [45.0, 257.1], [46.0, 283.1578947368421], [47.0, 230.42105263157893], [48.0, 225.75], [49.0, 300.62499999999994], [50.0, 294.66666666666663], [51.0, 328.4], [52.0, 323.9090909090909], [53.0, 381.1], [54.0, 372.0], [55.0, 313.3636363636364], [56.0, 335.00000000000006], [57.0, 277.0], [59.0, 290.5], [58.0, 281.45454545454544], [61.0, 302.25], [60.0, 298.3636363636364], [63.0, 464.49999999999994], [62.0, 276.25000000000006], [65.0, 451.8571428571429], [66.0, 404.6315789473683], [67.0, 455.4], [64.0, 270.0], [68.0, 348.0], [69.0, 399.6666666666667], [70.0, 352.81818181818176], [71.0, 310.875], [72.0, 366.88235294117646], [73.0, 341.5454545454545], [74.0, 414.3846153846154], [75.0, 335.90000000000003], [76.0, 454.58333333333337], [77.0, 603.8571428571429], [78.0, 550.5], [79.0, 563.0], [81.0, 468.2], [82.0, 588.5], [83.0, 563.9], [80.0, 258.2857142857143], [85.0, 803.6666666666667], [86.0, 558.3333333333334], [87.0, 330.5714285714286], [84.0, 312.6666666666667], [90.0, 398.35], [91.0, 450.5], [88.0, 302.8181818181818], [89.0, 404.90000000000003], [92.0, 413.93333333333334], [93.0, 340.5714285714286], [94.0, 395.4615384615385], [95.0, 398.7692307692308], [97.0, 485.6666666666667], [96.0, 475.4], [98.0, 405.75], [99.0, 344.4], [100.0, 333.0], [101.0, 655.0], [102.0, 524.1249999999999], [103.0, 401.5], [109.0, 1090.0], [111.0, 516.0769230769231], [110.0, 447.5], [113.0, 763.2500000000001], [114.0, 444.0952380952381], [115.0, 416.56249999999994], [112.0, 475.8], [117.0, 576.0], [116.0, 560.2307692307693], [118.0, 464.8], [120.0, 655.6], [122.0, 477.5], [121.0, 431.5714285714286]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[43.90450000000003, 443.4910000000004]], "isOverall": false, "label": "登录请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 123.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 84076.61666666667, "minX": 1.6314585E12, "maxY": 313527.9166666667, "series": [{"data": [[1.63145868E12, 143887.75], [1.6314585E12, 295096.6666666667], [1.63145862E12, 307877.95], [1.63145856E12, 313527.9166666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63145868E12, 84076.61666666667], [1.6314585E12, 172312.58333333334], [1.63145862E12, 179752.23333333334], [1.63145856E12, 182601.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145868E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 26.35685851964897, "minX": 1.6314585E12, "maxY": 774.0949263502448, "series": [{"data": [[1.63145868E12, 160.8739902080782], [1.6314585E12, 26.35685851964897], [1.63145862E12, 96.10697167130643], [1.63145856E12, 34.993956168097576]], "isOverall": false, "label": "获得最新比赛信息", "isController": false}, {"data": [[1.63145868E12, 475.89130434782606], [1.6314585E12, 183.90892857142853], [1.63145862E12, 336.50417362270457], [1.63145856E12, 774.0949263502448]], "isOverall": false, "label": "登录请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145868E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 26.12046930651567, "minX": 1.6314585E12, "maxY": 475.6782608695652, "series": [{"data": [[1.63145868E12, 160.58329253365974], [1.6314585E12, 26.12046930651567], [1.63145862E12, 95.57087913664942], [1.63145856E12, 34.742967690917446]], "isOverall": false, "label": "获得最新比赛信息", "isController": false}, {"data": [[1.63145868E12, 475.6782608695652], [1.6314585E12, 183.51607142857145], [1.63145862E12, 334.66444073455756], [1.63145856E12, 187.1751227495909]], "isOverall": false, "label": "登录请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145868E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6314585E12, "maxY": 631.0130932896889, "series": [{"data": [[1.63145868E12, 0.0], [1.6314585E12, 0.0], [1.63145862E12, 0.0], [1.63145856E12, 0.008444419340262055]], "isOverall": false, "label": "获得最新比赛信息", "isController": false}, {"data": [[1.63145868E12, 193.9826086956522], [1.6314585E12, 44.15714285714285], [1.63145862E12, 113.2854757929884], [1.63145856E12, 631.0130932896889]], "isOverall": false, "label": "登录请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145868E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.6314585E12, "maxY": 2443.0, "series": [{"data": [[1.63145868E12, 1355.0], [1.6314585E12, 1259.0], [1.63145862E12, 2443.0], [1.63145856E12, 1614.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63145868E12, 266.0], [1.6314585E12, 47.0], [1.63145862E12, 173.0], [1.63145856E12, 76.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63145868E12, 623.2900000000009], [1.6314585E12, 149.0], [1.63145862E12, 382.0], [1.63145856E12, 230.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63145868E12, 317.0], [1.6314585E12, 64.0], [1.63145862E12, 215.0], [1.63145856E12, 107.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63145868E12, 12.0], [1.6314585E12, 8.0], [1.63145862E12, 13.0], [1.63145856E12, 7.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63145868E12, 147.0], [1.6314585E12, 20.0], [1.63145862E12, 67.0], [1.63145856E12, 38.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145868E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 8.0, "maxY": 21045.5, "series": [{"data": [[8.0, 18.0], [136.0, 191.5], [156.0, 67.0], [194.0, 21.0], [203.0, 32.0], [201.0, 145.0], [206.0, 455.5], [215.0, 84.0], [227.0, 143.0], [234.0, 268.0], [281.0, 24.0], [297.0, 28.0], [299.0, 15.0], [289.0, 79.5], [305.0, 99.0], [328.0, 124.0], [337.0, 45.0], [351.0, 77.0], [342.0, 177.0], [369.0, 21.0], [371.0, 75.0], [373.0, 93.0], [378.0, 206.5], [391.0, 16.0], [392.0, 195.0], [400.0, 24.0], [410.0, 17.0], [403.0, 27.0], [411.0, 103.0], [404.0, 182.0], [416.0, 17.0], [428.0, 22.0], [420.0, 207.0], [443.0, 26.0], [459.0, 35.0], [456.0, 99.0], [451.0, 92.0], [463.0, 199.0], [449.0, 246.0], [469.0, 51.0], [479.0, 18.0], [465.0, 192.0], [471.0, 91.0], [485.0, 15.0], [491.0, 14.0], [493.0, 42.0], [481.0, 99.5], [508.0, 29.0], [503.0, 20.0], [507.0, 62.0], [499.0, 42.0], [504.0, 39.0], [500.0, 171.5], [536.0, 79.0], [520.0, 15.0], [531.0, 21.0], [512.0, 37.0], [542.0, 44.0], [518.0, 111.0], [528.0, 99.0], [540.0, 38.0], [524.0, 38.0], [550.0, 20.0], [569.0, 66.0], [572.0, 16.0], [573.0, 216.0], [566.0, 38.0], [565.0, 55.0], [553.0, 17.0], [558.0, 155.0], [568.0, 65.0], [570.0, 29.0], [571.0, 44.0], [545.0, 115.0], [547.0, 82.0], [549.0, 139.0], [602.0, 12.0], [595.0, 20.0], [590.0, 23.0], [592.0, 37.0], [596.0, 13.0], [597.0, 52.0], [577.0, 17.0], [581.0, 104.0], [579.0, 183.0], [600.0, 29.0], [583.0, 95.0], [582.0, 43.0], [589.0, 20.0], [587.0, 156.0], [603.0, 44.0], [604.0, 38.0], [606.0, 99.0], [613.0, 16.0], [625.0, 24.0], [631.0, 59.0], [621.0, 26.0], [623.0, 23.5], [638.0, 14.0], [611.0, 12.0], [618.0, 37.0], [617.0, 174.0], [635.0, 28.0], [609.0, 42.0], [647.0, 31.0], [659.0, 16.0], [641.0, 16.0], [643.0, 121.0], [660.0, 28.0], [656.0, 15.0], [645.0, 44.0], [646.0, 42.0], [661.0, 38.0], [664.0, 53.0], [668.0, 116.0], [677.0, 40.0], [700.0, 29.0], [701.0, 123.0], [684.0, 13.0], [683.0, 88.0], [676.0, 40.0], [691.0, 75.0], [694.0, 31.0], [703.0, 87.0], [688.0, 87.0], [675.0, 59.0], [729.0, 16.0], [732.0, 18.0], [726.0, 33.0], [731.0, 15.0], [730.0, 135.0], [708.0, 32.0], [706.0, 39.0], [707.0, 33.0], [711.0, 76.0], [714.0, 71.0], [736.0, 19.0], [760.0, 52.0], [743.0, 48.0], [770.0, 18.0], [776.0, 38.0], [778.0, 17.0], [795.0, 25.0], [799.0, 23.0], [788.0, 60.5], [786.0, 105.0], [794.0, 17.0], [780.0, 19.0], [768.0, 150.0], [774.0, 46.0], [779.0, 35.0], [808.0, 27.0], [829.0, 19.0], [811.0, 47.0], [830.0, 52.0], [858.0, 30.0], [848.0, 38.0], [886.0, 19.0], [892.0, 24.0], [877.0, 75.0], [866.0, 66.0], [867.0, 74.0], [920.0, 28.0], [924.0, 78.0], [969.0, 41.0], [992.0, 62.0], [1027.0, 21.0], [1039.0, 22.0], [1040.0, 72.0], [1166.0, 66.0], [1235.0, 16.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1039.0, 21045.0], [1235.0, 21044.0], [770.0, 21043.0], [794.0, 21045.5], [780.0, 21031.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1235.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 8.0, "maxY": 455.5, "series": [{"data": [[8.0, 16.5], [136.0, 191.5], [156.0, 61.0], [194.0, 21.0], [203.0, 32.0], [201.0, 132.0], [206.0, 455.5], [215.0, 84.0], [227.0, 143.0], [234.0, 268.0], [281.0, 23.0], [297.0, 28.0], [299.0, 15.0], [289.0, 79.0], [305.0, 99.0], [328.0, 124.0], [337.0, 44.0], [351.0, 77.0], [342.0, 174.0], [369.0, 21.0], [371.0, 75.0], [373.0, 93.0], [378.0, 206.0], [391.0, 16.0], [392.0, 195.0], [400.0, 24.0], [410.0, 17.0], [403.0, 26.0], [411.0, 102.0], [404.0, 182.0], [416.0, 17.0], [428.0, 22.0], [420.0, 207.0], [443.0, 26.0], [459.0, 35.0], [456.0, 98.0], [451.0, 92.0], [463.0, 199.0], [449.0, 245.0], [469.0, 50.0], [479.0, 18.0], [465.0, 192.0], [471.0, 91.0], [485.0, 15.0], [491.0, 14.0], [493.0, 42.0], [481.0, 99.0], [508.0, 29.0], [503.0, 20.0], [507.0, 62.0], [499.0, 42.0], [504.0, 39.0], [500.0, 171.0], [536.0, 79.0], [520.0, 15.0], [531.0, 21.0], [512.0, 36.0], [542.0, 44.0], [518.0, 111.0], [528.0, 98.0], [540.0, 37.5], [524.0, 38.0], [550.0, 20.0], [569.0, 66.0], [572.0, 16.0], [573.0, 215.0], [566.0, 38.0], [565.0, 55.0], [553.0, 16.0], [558.0, 155.0], [568.0, 65.0], [570.0, 29.0], [571.0, 44.0], [545.0, 115.0], [547.0, 81.0], [549.0, 139.0], [602.0, 12.0], [595.0, 20.0], [590.0, 23.0], [592.0, 37.0], [596.0, 13.0], [597.0, 51.0], [577.0, 16.0], [581.0, 104.0], [579.0, 183.0], [600.0, 28.0], [583.0, 95.0], [582.0, 43.0], [589.0, 20.0], [587.0, 156.0], [603.0, 44.0], [604.0, 38.0], [606.0, 99.0], [613.0, 16.0], [625.0, 24.0], [631.0, 58.0], [621.0, 26.0], [623.0, 23.0], [638.0, 13.0], [611.0, 12.0], [618.0, 37.0], [617.0, 172.0], [635.0, 28.0], [609.0, 42.0], [647.0, 31.0], [659.0, 15.0], [641.0, 15.0], [643.0, 121.0], [660.0, 28.0], [656.0, 15.0], [645.0, 44.0], [646.0, 42.0], [661.0, 38.0], [664.0, 52.0], [668.0, 116.0], [677.0, 40.0], [700.0, 29.0], [701.0, 123.0], [684.0, 13.0], [683.0, 88.0], [676.0, 40.0], [691.0, 74.0], [694.0, 31.0], [703.0, 87.0], [688.0, 86.0], [675.0, 59.0], [729.0, 16.0], [732.0, 17.0], [726.0, 33.0], [731.0, 15.0], [730.0, 134.0], [708.0, 32.0], [706.0, 39.0], [707.0, 33.0], [711.0, 76.0], [714.0, 71.0], [736.0, 19.0], [760.0, 52.0], [743.0, 47.0], [770.0, 18.0], [776.0, 37.0], [778.0, 17.0], [795.0, 25.0], [799.0, 23.0], [788.0, 60.0], [786.0, 105.0], [794.0, 17.0], [780.0, 19.0], [768.0, 150.0], [774.0, 46.0], [779.0, 34.0], [808.0, 27.0], [829.0, 19.0], [811.0, 47.0], [830.0, 52.0], [858.0, 29.0], [848.0, 38.0], [886.0, 19.0], [892.0, 24.0], [877.0, 75.0], [866.0, 66.0], [867.0, 74.0], [920.0, 27.5], [924.0, 78.0], [969.0, 41.0], [992.0, 62.0], [1027.0, 21.0], [1039.0, 21.0], [1040.0, 71.0], [1166.0, 65.0], [1235.0, 16.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1039.0, 0.0], [1235.0, 0.0], [770.0, 0.0], [794.0, 0.0], [780.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1235.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 274.6166666666667, "minX": 1.6314585E12, "maxY": 600.7, "series": [{"data": [[1.63145868E12, 274.6166666666667], [1.6314585E12, 566.5], [1.63145862E12, 591.5166666666667], [1.63145856E12, 600.7]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145868E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.6314585E12, "maxY": 600.0333333333333, "series": [{"data": [[1.63145868E12, 276.1666666666667], [1.6314585E12, 566.1833333333333], [1.63145862E12, 590.6666666666666], [1.63145856E12, 600.0333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63145856E12, 0.2833333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145868E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.6314585E12, "maxY": 590.1333333333333, "series": [{"data": [[1.63145868E12, 272.3333333333333], [1.6314585E12, 556.85], [1.63145862E12, 580.6833333333333], [1.63145856E12, 590.1333333333333]], "isOverall": false, "label": "获得最新比赛信息-success", "isController": false}, {"data": [[1.63145856E12, 0.2833333333333333]], "isOverall": false, "label": "登录请求-failure", "isController": false}, {"data": [[1.63145868E12, 3.8333333333333335], [1.6314585E12, 9.333333333333334], [1.63145862E12, 9.983333333333333], [1.63145856E12, 9.9]], "isOverall": false, "label": "登录请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145868E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.6314585E12, "maxY": 600.0333333333333, "series": [{"data": [[1.63145868E12, 276.1666666666667], [1.6314585E12, 566.1833333333333], [1.63145862E12, 590.6666666666666], [1.63145856E12, 600.0333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63145856E12, 0.2833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145868E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

