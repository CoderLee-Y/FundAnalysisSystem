/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 3267.0, "series": [{"data": [[0.0, 10.0], [0.1, 14.0], [0.2, 15.0], [0.3, 16.0], [0.4, 16.0], [0.5, 17.0], [0.6, 17.0], [0.7, 18.0], [0.8, 18.0], [0.9, 18.0], [1.0, 19.0], [1.1, 19.0], [1.2, 19.0], [1.3, 19.0], [1.4, 19.0], [1.5, 20.0], [1.6, 20.0], [1.7, 20.0], [1.8, 20.0], [1.9, 20.0], [2.0, 21.0], [2.1, 21.0], [2.2, 21.0], [2.3, 21.0], [2.4, 21.0], [2.5, 21.0], [2.6, 22.0], [2.7, 22.0], [2.8, 22.0], [2.9, 22.0], [3.0, 22.0], [3.1, 22.0], [3.2, 22.0], [3.3, 22.0], [3.4, 23.0], [3.5, 23.0], [3.6, 23.0], [3.7, 23.0], [3.8, 23.0], [3.9, 23.0], [4.0, 23.0], [4.1, 23.0], [4.2, 23.0], [4.3, 24.0], [4.4, 24.0], [4.5, 24.0], [4.6, 24.0], [4.7, 24.0], [4.8, 24.0], [4.9, 24.0], [5.0, 24.0], [5.1, 24.0], [5.2, 25.0], [5.3, 25.0], [5.4, 25.0], [5.5, 25.0], [5.6, 25.0], [5.7, 25.0], [5.8, 25.0], [5.9, 25.0], [6.0, 25.0], [6.1, 25.0], [6.2, 26.0], [6.3, 26.0], [6.4, 26.0], [6.5, 26.0], [6.6, 26.0], [6.7, 26.0], [6.8, 26.0], [6.9, 26.0], [7.0, 26.0], [7.1, 26.0], [7.2, 27.0], [7.3, 27.0], [7.4, 27.0], [7.5, 27.0], [7.6, 27.0], [7.7, 27.0], [7.8, 27.0], [7.9, 27.0], [8.0, 27.0], [8.1, 27.0], [8.2, 27.0], [8.3, 27.0], [8.4, 27.0], [8.5, 28.0], [8.6, 28.0], [8.7, 28.0], [8.8, 28.0], [8.9, 28.0], [9.0, 28.0], [9.1, 28.0], [9.2, 28.0], [9.3, 28.0], [9.4, 28.0], [9.5, 28.0], [9.6, 28.0], [9.7, 29.0], [9.8, 29.0], [9.9, 29.0], [10.0, 29.0], [10.1, 29.0], [10.2, 29.0], [10.3, 29.0], [10.4, 29.0], [10.5, 29.0], [10.6, 29.0], [10.7, 29.0], [10.8, 29.0], [10.9, 29.0], [11.0, 29.0], [11.1, 30.0], [11.2, 30.0], [11.3, 30.0], [11.4, 30.0], [11.5, 30.0], [11.6, 30.0], [11.7, 30.0], [11.8, 30.0], [11.9, 30.0], [12.0, 30.0], [12.1, 30.0], [12.2, 30.0], [12.3, 30.0], [12.4, 30.0], [12.5, 30.0], [12.6, 30.0], [12.7, 31.0], [12.8, 31.0], [12.9, 31.0], [13.0, 31.0], [13.1, 31.0], [13.2, 31.0], [13.3, 31.0], [13.4, 31.0], [13.5, 31.0], [13.6, 31.0], [13.7, 31.0], [13.8, 31.0], [13.9, 31.0], [14.0, 31.0], [14.1, 31.0], [14.2, 32.0], [14.3, 32.0], [14.4, 32.0], [14.5, 32.0], [14.6, 32.0], [14.7, 32.0], [14.8, 32.0], [14.9, 32.0], [15.0, 32.0], [15.1, 32.0], [15.2, 32.0], [15.3, 32.0], [15.4, 32.0], [15.5, 32.0], [15.6, 33.0], [15.7, 33.0], [15.8, 33.0], [15.9, 33.0], [16.0, 33.0], [16.1, 33.0], [16.2, 33.0], [16.3, 33.0], [16.4, 33.0], [16.5, 33.0], [16.6, 33.0], [16.7, 33.0], [16.8, 33.0], [16.9, 33.0], [17.0, 33.0], [17.1, 33.0], [17.2, 34.0], [17.3, 34.0], [17.4, 34.0], [17.5, 34.0], [17.6, 34.0], [17.7, 34.0], [17.8, 34.0], [17.9, 34.0], [18.0, 34.0], [18.1, 34.0], [18.2, 34.0], [18.3, 34.0], [18.4, 34.0], [18.5, 34.0], [18.6, 34.0], [18.7, 35.0], [18.8, 35.0], [18.9, 35.0], [19.0, 35.0], [19.1, 35.0], [19.2, 35.0], [19.3, 35.0], [19.4, 35.0], [19.5, 35.0], [19.6, 35.0], [19.7, 35.0], [19.8, 35.0], [19.9, 35.0], [20.0, 35.0], [20.1, 35.0], [20.2, 35.0], [20.3, 36.0], [20.4, 36.0], [20.5, 36.0], [20.6, 36.0], [20.7, 36.0], [20.8, 36.0], [20.9, 36.0], [21.0, 36.0], [21.1, 36.0], [21.2, 36.0], [21.3, 36.0], [21.4, 36.0], [21.5, 36.0], [21.6, 36.0], [21.7, 36.0], [21.8, 37.0], [21.9, 37.0], [22.0, 37.0], [22.1, 37.0], [22.2, 37.0], [22.3, 37.0], [22.4, 37.0], [22.5, 37.0], [22.6, 37.0], [22.7, 37.0], [22.8, 37.0], [22.9, 37.0], [23.0, 37.0], [23.1, 37.0], [23.2, 37.0], [23.3, 37.0], [23.4, 38.0], [23.5, 38.0], [23.6, 38.0], [23.7, 38.0], [23.8, 38.0], [23.9, 38.0], [24.0, 38.0], [24.1, 38.0], [24.2, 38.0], [24.3, 38.0], [24.4, 38.0], [24.5, 38.0], [24.6, 38.0], [24.7, 38.0], [24.8, 38.0], [24.9, 38.0], [25.0, 39.0], [25.1, 39.0], [25.2, 39.0], [25.3, 39.0], [25.4, 39.0], [25.5, 39.0], [25.6, 39.0], [25.7, 39.0], [25.8, 39.0], [25.9, 39.0], [26.0, 39.0], [26.1, 39.0], [26.2, 39.0], [26.3, 39.0], [26.4, 39.0], [26.5, 40.0], [26.6, 40.0], [26.7, 40.0], [26.8, 40.0], [26.9, 40.0], [27.0, 40.0], [27.1, 40.0], [27.2, 40.0], [27.3, 40.0], [27.4, 40.0], [27.5, 40.0], [27.6, 40.0], [27.7, 40.0], [27.8, 40.0], [27.9, 40.0], [28.0, 40.0], [28.1, 41.0], [28.2, 41.0], [28.3, 41.0], [28.4, 41.0], [28.5, 41.0], [28.6, 41.0], [28.7, 41.0], [28.8, 41.0], [28.9, 41.0], [29.0, 41.0], [29.1, 41.0], [29.2, 41.0], [29.3, 41.0], [29.4, 41.0], [29.5, 41.0], [29.6, 41.0], [29.7, 42.0], [29.8, 42.0], [29.9, 42.0], [30.0, 42.0], [30.1, 42.0], [30.2, 42.0], [30.3, 42.0], [30.4, 42.0], [30.5, 42.0], [30.6, 42.0], [30.7, 42.0], [30.8, 42.0], [30.9, 42.0], [31.0, 42.0], [31.1, 42.0], [31.2, 42.0], [31.3, 43.0], [31.4, 43.0], [31.5, 43.0], [31.6, 43.0], [31.7, 43.0], [31.8, 43.0], [31.9, 43.0], [32.0, 43.0], [32.1, 43.0], [32.2, 43.0], [32.3, 43.0], [32.4, 43.0], [32.5, 43.0], [32.6, 43.0], [32.7, 44.0], [32.8, 44.0], [32.9, 44.0], [33.0, 44.0], [33.1, 44.0], [33.2, 44.0], [33.3, 44.0], [33.4, 44.0], [33.5, 44.0], [33.6, 44.0], [33.7, 44.0], [33.8, 44.0], [33.9, 44.0], [34.0, 44.0], [34.1, 45.0], [34.2, 45.0], [34.3, 45.0], [34.4, 45.0], [34.5, 45.0], [34.6, 45.0], [34.7, 45.0], [34.8, 45.0], [34.9, 45.0], [35.0, 45.0], [35.1, 45.0], [35.2, 45.0], [35.3, 45.0], [35.4, 45.0], [35.5, 45.0], [35.6, 45.0], [35.7, 46.0], [35.8, 46.0], [35.9, 46.0], [36.0, 46.0], [36.1, 46.0], [36.2, 46.0], [36.3, 46.0], [36.4, 46.0], [36.5, 46.0], [36.6, 46.0], [36.7, 46.0], [36.8, 46.0], [36.9, 46.0], [37.0, 46.0], [37.1, 47.0], [37.2, 47.0], [37.3, 47.0], [37.4, 47.0], [37.5, 47.0], [37.6, 47.0], [37.7, 47.0], [37.8, 47.0], [37.9, 47.0], [38.0, 47.0], [38.1, 47.0], [38.2, 47.0], [38.3, 47.0], [38.4, 47.0], [38.5, 47.0], [38.6, 48.0], [38.7, 48.0], [38.8, 48.0], [38.9, 48.0], [39.0, 48.0], [39.1, 48.0], [39.2, 48.0], [39.3, 48.0], [39.4, 48.0], [39.5, 48.0], [39.6, 48.0], [39.7, 48.0], [39.8, 48.0], [39.9, 48.0], [40.0, 48.0], [40.1, 49.0], [40.2, 49.0], [40.3, 49.0], [40.4, 49.0], [40.5, 49.0], [40.6, 49.0], [40.7, 49.0], [40.8, 49.0], [40.9, 49.0], [41.0, 49.0], [41.1, 49.0], [41.2, 49.0], [41.3, 49.0], [41.4, 50.0], [41.5, 50.0], [41.6, 50.0], [41.7, 50.0], [41.8, 50.0], [41.9, 50.0], [42.0, 50.0], [42.1, 50.0], [42.2, 50.0], [42.3, 50.0], [42.4, 50.0], [42.5, 50.0], [42.6, 50.0], [42.7, 50.0], [42.8, 51.0], [42.9, 51.0], [43.0, 51.0], [43.1, 51.0], [43.2, 51.0], [43.3, 51.0], [43.4, 51.0], [43.5, 51.0], [43.6, 51.0], [43.7, 51.0], [43.8, 51.0], [43.9, 51.0], [44.0, 52.0], [44.1, 52.0], [44.2, 52.0], [44.3, 52.0], [44.4, 52.0], [44.5, 52.0], [44.6, 52.0], [44.7, 52.0], [44.8, 52.0], [44.9, 52.0], [45.0, 52.0], [45.1, 52.0], [45.2, 52.0], [45.3, 53.0], [45.4, 53.0], [45.5, 53.0], [45.6, 53.0], [45.7, 53.0], [45.8, 53.0], [45.9, 53.0], [46.0, 53.0], [46.1, 53.0], [46.2, 53.0], [46.3, 53.0], [46.4, 53.0], [46.5, 53.0], [46.6, 54.0], [46.7, 54.0], [46.8, 54.0], [46.9, 54.0], [47.0, 54.0], [47.1, 54.0], [47.2, 54.0], [47.3, 54.0], [47.4, 54.0], [47.5, 54.0], [47.6, 54.0], [47.7, 54.0], [47.8, 55.0], [47.9, 55.0], [48.0, 55.0], [48.1, 55.0], [48.2, 55.0], [48.3, 55.0], [48.4, 55.0], [48.5, 55.0], [48.6, 55.0], [48.7, 55.0], [48.8, 55.0], [48.9, 56.0], [49.0, 56.0], [49.1, 56.0], [49.2, 56.0], [49.3, 56.0], [49.4, 56.0], [49.5, 56.0], [49.6, 56.0], [49.7, 56.0], [49.8, 56.0], [49.9, 56.0], [50.0, 56.0], [50.1, 57.0], [50.2, 57.0], [50.3, 57.0], [50.4, 57.0], [50.5, 57.0], [50.6, 57.0], [50.7, 57.0], [50.8, 57.0], [50.9, 57.0], [51.0, 57.0], [51.1, 57.0], [51.2, 58.0], [51.3, 58.0], [51.4, 58.0], [51.5, 58.0], [51.6, 58.0], [51.7, 58.0], [51.8, 58.0], [51.9, 58.0], [52.0, 58.0], [52.1, 58.0], [52.2, 58.0], [52.3, 59.0], [52.4, 59.0], [52.5, 59.0], [52.6, 59.0], [52.7, 59.0], [52.8, 59.0], [52.9, 59.0], [53.0, 59.0], [53.1, 59.0], [53.2, 59.0], [53.3, 60.0], [53.4, 60.0], [53.5, 60.0], [53.6, 60.0], [53.7, 60.0], [53.8, 60.0], [53.9, 60.0], [54.0, 60.0], [54.1, 60.0], [54.2, 60.0], [54.3, 61.0], [54.4, 61.0], [54.5, 61.0], [54.6, 61.0], [54.7, 61.0], [54.8, 61.0], [54.9, 61.0], [55.0, 61.0], [55.1, 61.0], [55.2, 61.0], [55.3, 62.0], [55.4, 62.0], [55.5, 62.0], [55.6, 62.0], [55.7, 62.0], [55.8, 62.0], [55.9, 62.0], [56.0, 62.0], [56.1, 62.0], [56.2, 63.0], [56.3, 63.0], [56.4, 63.0], [56.5, 63.0], [56.6, 63.0], [56.7, 63.0], [56.8, 63.0], [56.9, 63.0], [57.0, 63.0], [57.1, 64.0], [57.2, 64.0], [57.3, 64.0], [57.4, 64.0], [57.5, 64.0], [57.6, 64.0], [57.7, 64.0], [57.8, 64.0], [57.9, 64.0], [58.0, 65.0], [58.1, 65.0], [58.2, 65.0], [58.3, 65.0], [58.4, 65.0], [58.5, 65.0], [58.6, 65.0], [58.7, 65.0], [58.8, 66.0], [58.9, 66.0], [59.0, 66.0], [59.1, 66.0], [59.2, 66.0], [59.3, 66.0], [59.4, 66.0], [59.5, 66.0], [59.6, 67.0], [59.7, 67.0], [59.8, 67.0], [59.9, 67.0], [60.0, 67.0], [60.1, 67.0], [60.2, 67.0], [60.3, 67.0], [60.4, 68.0], [60.5, 68.0], [60.6, 68.0], [60.7, 68.0], [60.8, 68.0], [60.9, 68.0], [61.0, 68.0], [61.1, 68.0], [61.2, 69.0], [61.3, 69.0], [61.4, 69.0], [61.5, 69.0], [61.6, 69.0], [61.7, 69.0], [61.8, 69.0], [61.9, 70.0], [62.0, 70.0], [62.1, 70.0], [62.2, 70.0], [62.3, 70.0], [62.4, 70.0], [62.5, 70.0], [62.6, 70.0], [62.7, 71.0], [62.8, 71.0], [62.9, 71.0], [63.0, 71.0], [63.1, 71.0], [63.2, 71.0], [63.3, 71.0], [63.4, 72.0], [63.5, 72.0], [63.6, 72.0], [63.7, 72.0], [63.8, 72.0], [63.9, 72.0], [64.0, 73.0], [64.1, 73.0], [64.2, 73.0], [64.3, 73.0], [64.4, 73.0], [64.5, 73.0], [64.6, 74.0], [64.7, 74.0], [64.8, 74.0], [64.9, 74.0], [65.0, 74.0], [65.1, 75.0], [65.2, 75.0], [65.3, 75.0], [65.4, 75.0], [65.5, 75.0], [65.6, 76.0], [65.7, 76.0], [65.8, 76.0], [65.9, 76.0], [66.0, 76.0], [66.1, 77.0], [66.2, 77.0], [66.3, 77.0], [66.4, 77.0], [66.5, 77.0], [66.6, 78.0], [66.7, 78.0], [66.8, 78.0], [66.9, 78.0], [67.0, 78.0], [67.1, 79.0], [67.2, 79.0], [67.3, 79.0], [67.4, 79.0], [67.5, 79.0], [67.6, 79.0], [67.7, 79.0], [67.8, 80.0], [67.9, 80.0], [68.0, 80.0], [68.1, 80.0], [68.2, 80.0], [68.3, 81.0], [68.4, 81.0], [68.5, 81.0], [68.6, 81.0], [68.7, 82.0], [68.8, 82.0], [68.9, 82.0], [69.0, 82.0], [69.1, 83.0], [69.2, 83.0], [69.3, 83.0], [69.4, 83.0], [69.5, 84.0], [69.6, 84.0], [69.7, 84.0], [69.8, 84.0], [69.9, 85.0], [70.0, 85.0], [70.1, 85.0], [70.2, 86.0], [70.3, 86.0], [70.4, 86.0], [70.5, 86.0], [70.6, 86.0], [70.7, 87.0], [70.8, 87.0], [70.9, 87.0], [71.0, 88.0], [71.1, 88.0], [71.2, 88.0], [71.3, 88.0], [71.4, 89.0], [71.5, 89.0], [71.6, 89.0], [71.7, 90.0], [71.8, 90.0], [71.9, 90.0], [72.0, 90.0], [72.1, 91.0], [72.2, 91.0], [72.3, 91.0], [72.4, 92.0], [72.5, 92.0], [72.6, 92.0], [72.7, 93.0], [72.8, 93.0], [72.9, 93.0], [73.0, 94.0], [73.1, 94.0], [73.2, 95.0], [73.3, 95.0], [73.4, 95.0], [73.5, 96.0], [73.6, 96.0], [73.7, 96.0], [73.8, 96.0], [73.9, 97.0], [74.0, 97.0], [74.1, 98.0], [74.2, 98.0], [74.3, 98.0], [74.4, 99.0], [74.5, 99.0], [74.6, 100.0], [74.7, 100.0], [74.8, 100.0], [74.9, 101.0], [75.0, 101.0], [75.1, 101.0], [75.2, 102.0], [75.3, 102.0], [75.4, 103.0], [75.5, 103.0], [75.6, 103.0], [75.7, 104.0], [75.8, 104.0], [75.9, 105.0], [76.0, 105.0], [76.1, 105.0], [76.2, 106.0], [76.3, 106.0], [76.4, 107.0], [76.5, 107.0], [76.6, 108.0], [76.7, 108.0], [76.8, 109.0], [76.9, 109.0], [77.0, 110.0], [77.1, 110.0], [77.2, 111.0], [77.3, 111.0], [77.4, 112.0], [77.5, 113.0], [77.6, 113.0], [77.7, 114.0], [77.8, 114.0], [77.9, 115.0], [78.0, 115.0], [78.1, 116.0], [78.2, 116.0], [78.3, 117.0], [78.4, 117.0], [78.5, 117.0], [78.6, 118.0], [78.7, 118.0], [78.8, 119.0], [78.9, 120.0], [79.0, 120.0], [79.1, 121.0], [79.2, 121.0], [79.3, 122.0], [79.4, 122.0], [79.5, 123.0], [79.6, 124.0], [79.7, 124.0], [79.8, 125.0], [79.9, 125.0], [80.0, 126.0], [80.1, 126.0], [80.2, 127.0], [80.3, 127.0], [80.4, 128.0], [80.5, 129.0], [80.6, 129.0], [80.7, 130.0], [80.8, 130.0], [80.9, 131.0], [81.0, 132.0], [81.1, 132.0], [81.2, 133.0], [81.3, 133.0], [81.4, 134.0], [81.5, 134.0], [81.6, 135.0], [81.7, 135.0], [81.8, 136.0], [81.9, 136.0], [82.0, 137.0], [82.1, 137.0], [82.2, 138.0], [82.3, 139.0], [82.4, 139.0], [82.5, 140.0], [82.6, 141.0], [82.7, 141.0], [82.8, 142.0], [82.9, 142.0], [83.0, 143.0], [83.1, 143.0], [83.2, 144.0], [83.3, 144.0], [83.4, 145.0], [83.5, 145.0], [83.6, 146.0], [83.7, 146.0], [83.8, 147.0], [83.9, 148.0], [84.0, 148.0], [84.1, 149.0], [84.2, 149.0], [84.3, 150.0], [84.4, 150.0], [84.5, 151.0], [84.6, 152.0], [84.7, 152.0], [84.8, 153.0], [84.9, 153.0], [85.0, 154.0], [85.1, 154.0], [85.2, 155.0], [85.3, 155.0], [85.4, 156.0], [85.5, 156.0], [85.6, 157.0], [85.7, 157.0], [85.8, 158.0], [85.9, 158.0], [86.0, 159.0], [86.1, 159.0], [86.2, 160.0], [86.3, 160.0], [86.4, 161.0], [86.5, 161.0], [86.6, 162.0], [86.7, 162.0], [86.8, 163.0], [86.9, 163.0], [87.0, 163.0], [87.1, 164.0], [87.2, 164.0], [87.3, 165.0], [87.4, 165.0], [87.5, 166.0], [87.6, 166.0], [87.7, 167.0], [87.8, 167.0], [87.9, 167.0], [88.0, 168.0], [88.1, 168.0], [88.2, 169.0], [88.3, 169.0], [88.4, 169.0], [88.5, 170.0], [88.6, 170.0], [88.7, 171.0], [88.8, 171.0], [88.9, 172.0], [89.0, 172.0], [89.1, 173.0], [89.2, 173.0], [89.3, 174.0], [89.4, 174.0], [89.5, 175.0], [89.6, 175.0], [89.7, 176.0], [89.8, 176.0], [89.9, 177.0], [90.0, 177.0], [90.1, 178.0], [90.2, 178.0], [90.3, 179.0], [90.4, 180.0], [90.5, 180.0], [90.6, 181.0], [90.7, 181.0], [90.8, 182.0], [90.9, 183.0], [91.0, 183.0], [91.1, 184.0], [91.2, 184.0], [91.3, 185.0], [91.4, 185.0], [91.5, 186.0], [91.6, 186.0], [91.7, 187.0], [91.8, 188.0], [91.9, 188.0], [92.0, 189.0], [92.1, 189.0], [92.2, 190.0], [92.3, 190.0], [92.4, 191.0], [92.5, 192.0], [92.6, 192.0], [92.7, 193.0], [92.8, 193.0], [92.9, 194.0], [93.0, 195.0], [93.1, 195.0], [93.2, 196.0], [93.3, 197.0], [93.4, 198.0], [93.5, 198.0], [93.6, 199.0], [93.7, 200.0], [93.8, 200.0], [93.9, 201.0], [94.0, 202.0], [94.1, 202.0], [94.2, 203.0], [94.3, 204.0], [94.4, 205.0], [94.5, 206.0], [94.6, 206.0], [94.7, 207.0], [94.8, 208.0], [94.9, 210.0], [95.0, 211.0], [95.1, 212.0], [95.2, 213.0], [95.3, 213.0], [95.4, 214.0], [95.5, 215.0], [95.6, 216.0], [95.7, 218.0], [95.8, 219.0], [95.9, 220.0], [96.0, 222.0], [96.1, 223.0], [96.2, 225.0], [96.3, 227.0], [96.4, 229.0], [96.5, 231.0], [96.6, 234.0], [96.7, 236.0], [96.8, 238.0], [96.9, 240.0], [97.0, 242.0], [97.1, 244.0], [97.2, 247.0], [97.3, 249.0], [97.4, 251.0], [97.5, 254.0], [97.6, 257.0], [97.7, 260.0], [97.8, 266.0], [97.9, 271.0], [98.0, 279.0], [98.1, 285.0], [98.2, 292.0], [98.3, 305.0], [98.4, 314.0], [98.5, 324.0], [98.6, 336.0], [98.7, 349.0], [98.8, 357.0], [98.9, 369.0], [99.0, 385.0], [99.1, 402.0], [99.2, 430.0], [99.3, 461.0], [99.4, 501.0], [99.5, 524.0], [99.6, 592.0], [99.7, 728.0], [99.8, 795.0], [99.9, 1197.0]], "isOverall": false, "label": "获得最新比赛信息", "isController": false}, {"data": [[0.0, 131.0], [0.1, 135.0], [0.2, 137.0], [0.3, 138.0], [0.4, 138.0], [0.5, 138.0], [0.6, 139.0], [0.7, 143.0], [0.8, 143.0], [0.9, 144.0], [1.0, 145.0], [1.1, 145.0], [1.2, 146.0], [1.3, 146.0], [1.4, 147.0], [1.5, 147.0], [1.6, 148.0], [1.7, 149.0], [1.8, 149.0], [1.9, 149.0], [2.0, 149.0], [2.1, 150.0], [2.2, 150.0], [2.3, 150.0], [2.4, 151.0], [2.5, 151.0], [2.6, 151.0], [2.7, 152.0], [2.8, 152.0], [2.9, 152.0], [3.0, 152.0], [3.1, 152.0], [3.2, 152.0], [3.3, 153.0], [3.4, 153.0], [3.5, 153.0], [3.6, 153.0], [3.7, 154.0], [3.8, 154.0], [3.9, 154.0], [4.0, 155.0], [4.1, 155.0], [4.2, 155.0], [4.3, 155.0], [4.4, 155.0], [4.5, 156.0], [4.6, 156.0], [4.7, 156.0], [4.8, 156.0], [4.9, 156.0], [5.0, 156.0], [5.1, 157.0], [5.2, 157.0], [5.3, 157.0], [5.4, 158.0], [5.5, 158.0], [5.6, 158.0], [5.7, 158.0], [5.8, 158.0], [5.9, 158.0], [6.0, 159.0], [6.1, 159.0], [6.2, 159.0], [6.3, 159.0], [6.4, 159.0], [6.5, 160.0], [6.6, 160.0], [6.7, 160.0], [6.8, 160.0], [6.9, 160.0], [7.0, 160.0], [7.1, 160.0], [7.2, 161.0], [7.3, 161.0], [7.4, 161.0], [7.5, 161.0], [7.6, 161.0], [7.7, 161.0], [7.8, 161.0], [7.9, 161.0], [8.0, 162.0], [8.1, 162.0], [8.2, 162.0], [8.3, 162.0], [8.4, 162.0], [8.5, 162.0], [8.6, 163.0], [8.7, 163.0], [8.8, 163.0], [8.9, 163.0], [9.0, 163.0], [9.1, 163.0], [9.2, 163.0], [9.3, 163.0], [9.4, 163.0], [9.5, 163.0], [9.6, 163.0], [9.7, 163.0], [9.8, 163.0], [9.9, 163.0], [10.0, 164.0], [10.1, 164.0], [10.2, 164.0], [10.3, 164.0], [10.4, 164.0], [10.5, 165.0], [10.6, 165.0], [10.7, 165.0], [10.8, 165.0], [10.9, 165.0], [11.0, 165.0], [11.1, 165.0], [11.2, 165.0], [11.3, 166.0], [11.4, 166.0], [11.5, 166.0], [11.6, 166.0], [11.7, 166.0], [11.8, 166.0], [11.9, 166.0], [12.0, 167.0], [12.1, 167.0], [12.2, 167.0], [12.3, 167.0], [12.4, 167.0], [12.5, 167.0], [12.6, 168.0], [12.7, 168.0], [12.8, 168.0], [12.9, 168.0], [13.0, 168.0], [13.1, 168.0], [13.2, 168.0], [13.3, 168.0], [13.4, 168.0], [13.5, 168.0], [13.6, 169.0], [13.7, 169.0], [13.8, 169.0], [13.9, 169.0], [14.0, 169.0], [14.1, 169.0], [14.2, 169.0], [14.3, 169.0], [14.4, 170.0], [14.5, 170.0], [14.6, 170.0], [14.7, 170.0], [14.8, 170.0], [14.9, 170.0], [15.0, 170.0], [15.1, 170.0], [15.2, 171.0], [15.3, 171.0], [15.4, 171.0], [15.5, 171.0], [15.6, 171.0], [15.7, 171.0], [15.8, 171.0], [15.9, 171.0], [16.0, 171.0], [16.1, 171.0], [16.2, 171.0], [16.3, 172.0], [16.4, 172.0], [16.5, 172.0], [16.6, 172.0], [16.7, 173.0], [16.8, 173.0], [16.9, 173.0], [17.0, 173.0], [17.1, 173.0], [17.2, 173.0], [17.3, 173.0], [17.4, 173.0], [17.5, 173.0], [17.6, 174.0], [17.7, 174.0], [17.8, 174.0], [17.9, 174.0], [18.0, 174.0], [18.1, 174.0], [18.2, 174.0], [18.3, 174.0], [18.4, 174.0], [18.5, 175.0], [18.6, 175.0], [18.7, 175.0], [18.8, 175.0], [18.9, 176.0], [19.0, 176.0], [19.1, 176.0], [19.2, 176.0], [19.3, 176.0], [19.4, 176.0], [19.5, 176.0], [19.6, 176.0], [19.7, 176.0], [19.8, 176.0], [19.9, 176.0], [20.0, 177.0], [20.1, 177.0], [20.2, 177.0], [20.3, 177.0], [20.4, 177.0], [20.5, 177.0], [20.6, 177.0], [20.7, 178.0], [20.8, 178.0], [20.9, 178.0], [21.0, 178.0], [21.1, 178.0], [21.2, 178.0], [21.3, 179.0], [21.4, 179.0], [21.5, 179.0], [21.6, 179.0], [21.7, 179.0], [21.8, 179.0], [21.9, 179.0], [22.0, 179.0], [22.1, 179.0], [22.2, 180.0], [22.3, 180.0], [22.4, 180.0], [22.5, 180.0], [22.6, 180.0], [22.7, 180.0], [22.8, 180.0], [22.9, 180.0], [23.0, 180.0], [23.1, 180.0], [23.2, 180.0], [23.3, 181.0], [23.4, 181.0], [23.5, 181.0], [23.6, 181.0], [23.7, 181.0], [23.8, 181.0], [23.9, 182.0], [24.0, 182.0], [24.1, 182.0], [24.2, 182.0], [24.3, 182.0], [24.4, 182.0], [24.5, 182.0], [24.6, 182.0], [24.7, 182.0], [24.8, 183.0], [24.9, 183.0], [25.0, 183.0], [25.1, 183.0], [25.2, 183.0], [25.3, 183.0], [25.4, 184.0], [25.5, 184.0], [25.6, 184.0], [25.7, 184.0], [25.8, 184.0], [25.9, 184.0], [26.0, 184.0], [26.1, 184.0], [26.2, 185.0], [26.3, 185.0], [26.4, 185.0], [26.5, 185.0], [26.6, 185.0], [26.7, 185.0], [26.8, 185.0], [26.9, 185.0], [27.0, 185.0], [27.1, 185.0], [27.2, 185.0], [27.3, 185.0], [27.4, 185.0], [27.5, 186.0], [27.6, 186.0], [27.7, 186.0], [27.8, 186.0], [27.9, 186.0], [28.0, 186.0], [28.1, 186.0], [28.2, 187.0], [28.3, 187.0], [28.4, 187.0], [28.5, 187.0], [28.6, 187.0], [28.7, 187.0], [28.8, 187.0], [28.9, 187.0], [29.0, 188.0], [29.1, 188.0], [29.2, 188.0], [29.3, 188.0], [29.4, 188.0], [29.5, 188.0], [29.6, 188.0], [29.7, 188.0], [29.8, 189.0], [29.9, 189.0], [30.0, 189.0], [30.1, 189.0], [30.2, 189.0], [30.3, 189.0], [30.4, 189.0], [30.5, 190.0], [30.6, 190.0], [30.7, 190.0], [30.8, 190.0], [30.9, 190.0], [31.0, 190.0], [31.1, 191.0], [31.2, 191.0], [31.3, 191.0], [31.4, 191.0], [31.5, 191.0], [31.6, 192.0], [31.7, 192.0], [31.8, 192.0], [31.9, 192.0], [32.0, 192.0], [32.1, 192.0], [32.2, 193.0], [32.3, 193.0], [32.4, 193.0], [32.5, 193.0], [32.6, 193.0], [32.7, 193.0], [32.8, 194.0], [32.9, 194.0], [33.0, 194.0], [33.1, 194.0], [33.2, 194.0], [33.3, 194.0], [33.4, 194.0], [33.5, 194.0], [33.6, 194.0], [33.7, 195.0], [33.8, 195.0], [33.9, 195.0], [34.0, 195.0], [34.1, 196.0], [34.2, 196.0], [34.3, 196.0], [34.4, 196.0], [34.5, 196.0], [34.6, 197.0], [34.7, 197.0], [34.8, 197.0], [34.9, 197.0], [35.0, 197.0], [35.1, 197.0], [35.2, 198.0], [35.3, 198.0], [35.4, 198.0], [35.5, 198.0], [35.6, 199.0], [35.7, 199.0], [35.8, 199.0], [35.9, 199.0], [36.0, 199.0], [36.1, 200.0], [36.2, 200.0], [36.3, 200.0], [36.4, 200.0], [36.5, 200.0], [36.6, 201.0], [36.7, 201.0], [36.8, 201.0], [36.9, 201.0], [37.0, 201.0], [37.1, 201.0], [37.2, 202.0], [37.3, 202.0], [37.4, 202.0], [37.5, 203.0], [37.6, 203.0], [37.7, 203.0], [37.8, 203.0], [37.9, 204.0], [38.0, 204.0], [38.1, 204.0], [38.2, 204.0], [38.3, 204.0], [38.4, 204.0], [38.5, 205.0], [38.6, 205.0], [38.7, 205.0], [38.8, 205.0], [38.9, 205.0], [39.0, 206.0], [39.1, 206.0], [39.2, 207.0], [39.3, 207.0], [39.4, 207.0], [39.5, 207.0], [39.6, 207.0], [39.7, 207.0], [39.8, 207.0], [39.9, 207.0], [40.0, 208.0], [40.1, 208.0], [40.2, 208.0], [40.3, 208.0], [40.4, 208.0], [40.5, 209.0], [40.6, 209.0], [40.7, 209.0], [40.8, 209.0], [40.9, 209.0], [41.0, 209.0], [41.1, 209.0], [41.2, 210.0], [41.3, 210.0], [41.4, 210.0], [41.5, 210.0], [41.6, 210.0], [41.7, 211.0], [41.8, 211.0], [41.9, 211.0], [42.0, 211.0], [42.1, 211.0], [42.2, 212.0], [42.3, 212.0], [42.4, 212.0], [42.5, 212.0], [42.6, 212.0], [42.7, 213.0], [42.8, 213.0], [42.9, 213.0], [43.0, 213.0], [43.1, 213.0], [43.2, 213.0], [43.3, 213.0], [43.4, 214.0], [43.5, 214.0], [43.6, 214.0], [43.7, 214.0], [43.8, 214.0], [43.9, 214.0], [44.0, 215.0], [44.1, 215.0], [44.2, 215.0], [44.3, 215.0], [44.4, 215.0], [44.5, 215.0], [44.6, 215.0], [44.7, 216.0], [44.8, 216.0], [44.9, 216.0], [45.0, 217.0], [45.1, 217.0], [45.2, 217.0], [45.3, 217.0], [45.4, 217.0], [45.5, 217.0], [45.6, 218.0], [45.7, 218.0], [45.8, 218.0], [45.9, 218.0], [46.0, 218.0], [46.1, 218.0], [46.2, 218.0], [46.3, 219.0], [46.4, 219.0], [46.5, 219.0], [46.6, 219.0], [46.7, 219.0], [46.8, 219.0], [46.9, 220.0], [47.0, 220.0], [47.1, 220.0], [47.2, 220.0], [47.3, 220.0], [47.4, 220.0], [47.5, 221.0], [47.6, 221.0], [47.7, 221.0], [47.8, 222.0], [47.9, 222.0], [48.0, 222.0], [48.1, 222.0], [48.2, 222.0], [48.3, 222.0], [48.4, 222.0], [48.5, 222.0], [48.6, 223.0], [48.7, 223.0], [48.8, 223.0], [48.9, 224.0], [49.0, 224.0], [49.1, 224.0], [49.2, 224.0], [49.3, 225.0], [49.4, 225.0], [49.5, 225.0], [49.6, 225.0], [49.7, 226.0], [49.8, 226.0], [49.9, 226.0], [50.0, 226.0], [50.1, 226.0], [50.2, 226.0], [50.3, 227.0], [50.4, 227.0], [50.5, 227.0], [50.6, 228.0], [50.7, 228.0], [50.8, 228.0], [50.9, 229.0], [51.0, 229.0], [51.1, 229.0], [51.2, 229.0], [51.3, 229.0], [51.4, 230.0], [51.5, 230.0], [51.6, 230.0], [51.7, 231.0], [51.8, 231.0], [51.9, 231.0], [52.0, 231.0], [52.1, 231.0], [52.2, 232.0], [52.3, 232.0], [52.4, 232.0], [52.5, 232.0], [52.6, 232.0], [52.7, 232.0], [52.8, 232.0], [52.9, 233.0], [53.0, 233.0], [53.1, 233.0], [53.2, 234.0], [53.3, 234.0], [53.4, 235.0], [53.5, 235.0], [53.6, 235.0], [53.7, 235.0], [53.8, 235.0], [53.9, 236.0], [54.0, 236.0], [54.1, 237.0], [54.2, 237.0], [54.3, 238.0], [54.4, 238.0], [54.5, 238.0], [54.6, 238.0], [54.7, 239.0], [54.8, 239.0], [54.9, 239.0], [55.0, 239.0], [55.1, 240.0], [55.2, 241.0], [55.3, 241.0], [55.4, 242.0], [55.5, 242.0], [55.6, 242.0], [55.7, 242.0], [55.8, 243.0], [55.9, 243.0], [56.0, 243.0], [56.1, 243.0], [56.2, 243.0], [56.3, 244.0], [56.4, 244.0], [56.5, 245.0], [56.6, 245.0], [56.7, 245.0], [56.8, 246.0], [56.9, 246.0], [57.0, 246.0], [57.1, 247.0], [57.2, 247.0], [57.3, 247.0], [57.4, 248.0], [57.5, 249.0], [57.6, 249.0], [57.7, 250.0], [57.8, 250.0], [57.9, 250.0], [58.0, 251.0], [58.1, 251.0], [58.2, 251.0], [58.3, 252.0], [58.4, 252.0], [58.5, 252.0], [58.6, 252.0], [58.7, 253.0], [58.8, 253.0], [58.9, 253.0], [59.0, 253.0], [59.1, 254.0], [59.2, 254.0], [59.3, 254.0], [59.4, 255.0], [59.5, 255.0], [59.6, 255.0], [59.7, 256.0], [59.8, 257.0], [59.9, 257.0], [60.0, 258.0], [60.1, 258.0], [60.2, 259.0], [60.3, 259.0], [60.4, 260.0], [60.5, 260.0], [60.6, 260.0], [60.7, 261.0], [60.8, 261.0], [60.9, 261.0], [61.0, 263.0], [61.1, 264.0], [61.2, 264.0], [61.3, 265.0], [61.4, 266.0], [61.5, 266.0], [61.6, 266.0], [61.7, 267.0], [61.8, 267.0], [61.9, 268.0], [62.0, 268.0], [62.1, 268.0], [62.2, 268.0], [62.3, 269.0], [62.4, 269.0], [62.5, 269.0], [62.6, 269.0], [62.7, 269.0], [62.8, 270.0], [62.9, 270.0], [63.0, 270.0], [63.1, 271.0], [63.2, 271.0], [63.3, 272.0], [63.4, 272.0], [63.5, 273.0], [63.6, 273.0], [63.7, 274.0], [63.8, 274.0], [63.9, 274.0], [64.0, 274.0], [64.1, 275.0], [64.2, 275.0], [64.3, 275.0], [64.4, 275.0], [64.5, 276.0], [64.6, 276.0], [64.7, 276.0], [64.8, 276.0], [64.9, 277.0], [65.0, 277.0], [65.1, 278.0], [65.2, 278.0], [65.3, 279.0], [65.4, 279.0], [65.5, 280.0], [65.6, 280.0], [65.7, 281.0], [65.8, 282.0], [65.9, 282.0], [66.0, 283.0], [66.1, 284.0], [66.2, 284.0], [66.3, 284.0], [66.4, 284.0], [66.5, 285.0], [66.6, 285.0], [66.7, 285.0], [66.8, 286.0], [66.9, 286.0], [67.0, 287.0], [67.1, 288.0], [67.2, 288.0], [67.3, 289.0], [67.4, 289.0], [67.5, 290.0], [67.6, 291.0], [67.7, 291.0], [67.8, 291.0], [67.9, 291.0], [68.0, 292.0], [68.1, 292.0], [68.2, 293.0], [68.3, 293.0], [68.4, 294.0], [68.5, 295.0], [68.6, 296.0], [68.7, 296.0], [68.8, 296.0], [68.9, 297.0], [69.0, 297.0], [69.1, 298.0], [69.2, 298.0], [69.3, 299.0], [69.4, 300.0], [69.5, 300.0], [69.6, 300.0], [69.7, 301.0], [69.8, 302.0], [69.9, 302.0], [70.0, 304.0], [70.1, 304.0], [70.2, 305.0], [70.3, 306.0], [70.4, 306.0], [70.5, 307.0], [70.6, 307.0], [70.7, 308.0], [70.8, 308.0], [70.9, 309.0], [71.0, 310.0], [71.1, 311.0], [71.2, 312.0], [71.3, 312.0], [71.4, 313.0], [71.5, 314.0], [71.6, 314.0], [71.7, 315.0], [71.8, 315.0], [71.9, 315.0], [72.0, 316.0], [72.1, 317.0], [72.2, 317.0], [72.3, 319.0], [72.4, 320.0], [72.5, 321.0], [72.6, 322.0], [72.7, 322.0], [72.8, 323.0], [72.9, 325.0], [73.0, 325.0], [73.1, 326.0], [73.2, 327.0], [73.3, 328.0], [73.4, 328.0], [73.5, 329.0], [73.6, 329.0], [73.7, 330.0], [73.8, 330.0], [73.9, 331.0], [74.0, 331.0], [74.1, 331.0], [74.2, 332.0], [74.3, 333.0], [74.4, 333.0], [74.5, 334.0], [74.6, 335.0], [74.7, 336.0], [74.8, 337.0], [74.9, 337.0], [75.0, 338.0], [75.1, 338.0], [75.2, 341.0], [75.3, 341.0], [75.4, 341.0], [75.5, 342.0], [75.6, 343.0], [75.7, 343.0], [75.8, 344.0], [75.9, 345.0], [76.0, 346.0], [76.1, 346.0], [76.2, 346.0], [76.3, 347.0], [76.4, 348.0], [76.5, 349.0], [76.6, 349.0], [76.7, 350.0], [76.8, 351.0], [76.9, 352.0], [77.0, 352.0], [77.1, 353.0], [77.2, 354.0], [77.3, 355.0], [77.4, 355.0], [77.5, 356.0], [77.6, 357.0], [77.7, 357.0], [77.8, 359.0], [77.9, 360.0], [78.0, 360.0], [78.1, 361.0], [78.2, 361.0], [78.3, 361.0], [78.4, 362.0], [78.5, 364.0], [78.6, 364.0], [78.7, 365.0], [78.8, 366.0], [78.9, 366.0], [79.0, 367.0], [79.1, 368.0], [79.2, 369.0], [79.3, 370.0], [79.4, 370.0], [79.5, 371.0], [79.6, 372.0], [79.7, 373.0], [79.8, 374.0], [79.9, 374.0], [80.0, 375.0], [80.1, 376.0], [80.2, 377.0], [80.3, 379.0], [80.4, 380.0], [80.5, 381.0], [80.6, 383.0], [80.7, 383.0], [80.8, 384.0], [80.9, 384.0], [81.0, 385.0], [81.1, 386.0], [81.2, 387.0], [81.3, 387.0], [81.4, 389.0], [81.5, 390.0], [81.6, 390.0], [81.7, 391.0], [81.8, 391.0], [81.9, 392.0], [82.0, 393.0], [82.1, 393.0], [82.2, 395.0], [82.3, 396.0], [82.4, 396.0], [82.5, 397.0], [82.6, 399.0], [82.7, 399.0], [82.8, 400.0], [82.9, 401.0], [83.0, 401.0], [83.1, 403.0], [83.2, 403.0], [83.3, 404.0], [83.4, 404.0], [83.5, 407.0], [83.6, 408.0], [83.7, 409.0], [83.8, 411.0], [83.9, 413.0], [84.0, 413.0], [84.1, 414.0], [84.2, 416.0], [84.3, 417.0], [84.4, 418.0], [84.5, 419.0], [84.6, 420.0], [84.7, 421.0], [84.8, 422.0], [84.9, 422.0], [85.0, 423.0], [85.1, 425.0], [85.2, 426.0], [85.3, 428.0], [85.4, 428.0], [85.5, 429.0], [85.6, 430.0], [85.7, 431.0], [85.8, 431.0], [85.9, 432.0], [86.0, 432.0], [86.1, 432.0], [86.2, 433.0], [86.3, 435.0], [86.4, 437.0], [86.5, 438.0], [86.6, 439.0], [86.7, 441.0], [86.8, 442.0], [86.9, 442.0], [87.0, 443.0], [87.1, 445.0], [87.2, 446.0], [87.3, 449.0], [87.4, 450.0], [87.5, 452.0], [87.6, 453.0], [87.7, 453.0], [87.8, 455.0], [87.9, 455.0], [88.0, 457.0], [88.1, 459.0], [88.2, 459.0], [88.3, 461.0], [88.4, 461.0], [88.5, 462.0], [88.6, 463.0], [88.7, 465.0], [88.8, 466.0], [88.9, 467.0], [89.0, 468.0], [89.1, 470.0], [89.2, 471.0], [89.3, 472.0], [89.4, 473.0], [89.5, 473.0], [89.6, 474.0], [89.7, 476.0], [89.8, 476.0], [89.9, 476.0], [90.0, 478.0], [90.1, 480.0], [90.2, 482.0], [90.3, 484.0], [90.4, 485.0], [90.5, 485.0], [90.6, 487.0], [90.7, 488.0], [90.8, 490.0], [90.9, 493.0], [91.0, 496.0], [91.1, 498.0], [91.2, 499.0], [91.3, 499.0], [91.4, 500.0], [91.5, 501.0], [91.6, 503.0], [91.7, 504.0], [91.8, 506.0], [91.9, 507.0], [92.0, 508.0], [92.1, 509.0], [92.2, 510.0], [92.3, 511.0], [92.4, 512.0], [92.5, 513.0], [92.6, 515.0], [92.7, 520.0], [92.8, 522.0], [92.9, 525.0], [93.0, 527.0], [93.1, 531.0], [93.2, 532.0], [93.3, 537.0], [93.4, 543.0], [93.5, 546.0], [93.6, 554.0], [93.7, 558.0], [93.8, 566.0], [93.9, 570.0], [94.0, 572.0], [94.1, 572.0], [94.2, 573.0], [94.3, 579.0], [94.4, 580.0], [94.5, 586.0], [94.6, 591.0], [94.7, 594.0], [94.8, 601.0], [94.9, 604.0], [95.0, 605.0], [95.1, 607.0], [95.2, 621.0], [95.3, 627.0], [95.4, 639.0], [95.5, 642.0], [95.6, 647.0], [95.7, 656.0], [95.8, 668.0], [95.9, 689.0], [96.0, 725.0], [96.1, 727.0], [96.2, 733.0], [96.3, 758.0], [96.4, 773.0], [96.5, 792.0], [96.6, 804.0], [96.7, 852.0], [96.8, 870.0], [96.9, 871.0], [97.0, 890.0], [97.1, 915.0], [97.2, 947.0], [97.3, 961.0], [97.4, 993.0], [97.5, 1012.0], [97.6, 1067.0], [97.7, 1090.0], [97.8, 1108.0], [97.9, 1163.0], [98.0, 1196.0], [98.1, 1258.0], [98.2, 1276.0], [98.3, 1303.0], [98.4, 1335.0], [98.5, 1366.0], [98.6, 1402.0], [98.7, 1450.0], [98.8, 1472.0], [98.9, 1482.0], [99.0, 1569.0], [99.1, 1762.0], [99.2, 1865.0], [99.3, 1967.0], [99.4, 2033.0], [99.5, 2115.0], [99.6, 2184.0], [99.7, 2245.0], [99.8, 2287.0], [99.9, 2314.0]], "isOverall": false, "label": "登录请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 89514.0, "series": [{"data": [[0.0, 89514.0], [2100.0, 3.0], [600.0, 78.0], [2400.0, 1.0], [700.0, 159.0], [200.0, 5502.0], [800.0, 76.0], [900.0, 20.0], [1000.0, 4.0], [1100.0, 11.0], [300.0, 1005.0], [1200.0, 104.0], [1300.0, 8.0], [1400.0, 2.0], [100.0, 22877.0], [400.0, 381.0], [1800.0, 1.0], [500.0, 254.0]], "isOverall": false, "label": "获得最新比赛信息", "isController": false}, {"data": [[2100.0, 3.0], [2300.0, 2.0], [2200.0, 4.0], [600.0, 23.0], [700.0, 13.0], [200.0, 666.0], [800.0, 10.0], [3200.0, 1.0], [900.0, 8.0], [1000.0, 6.0], [1100.0, 5.0], [300.0, 267.0], [1200.0, 5.0], [1300.0, 6.0], [1400.0, 7.0], [1500.0, 3.0], [100.0, 721.0], [400.0, 173.0], [1700.0, 2.0], [1800.0, 2.0], [1900.0, 1.0], [500.0, 69.0], [2000.0, 3.0]], "isOverall": false, "label": "登录请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 121110.0, "series": [{"data": [[0.0, 121110.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 864.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 26.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 29.99794661190968, "minX": 1.6314588E12, "maxY": 87.18816694923655, "series": [{"data": [[1.63145886E12, 87.18816694923655], [1.63145898E12, 41.96563620192419], [1.6314588E12, 70.00827610494812], [1.63145892E12, 34.5777882170886], [1.63145904E12, 29.99794661190968]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145904E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 2245.0, "series": [{"data": [[2.0, 18.2], [3.0, 18.357142857142858], [4.0, 16.0], [5.0, 20.142857142857142], [6.0, 24.727272727272727], [7.0, 25.74074074074074], [8.0, 26.457142857142852], [9.0, 26.410256410256416], [10.0, 44.94117647058823], [11.0, 38.95833333333334], [12.0, 34.094339622641506], [13.0, 29.172413793103456], [14.0, 33.249999999999986], [15.0, 50.208333333333336], [16.0, 41.164556962025294], [17.0, 34.793577981651396], [18.0, 28.123234916559685], [19.0, 30.127804878048764], [20.0, 32.4710144927536], [21.0, 35.24824355971899], [22.0, 32.72413793103445], [23.0, 36.360157016683026], [24.0, 40.631746031746026], [25.0, 46.983094928478565], [26.0, 40.26925770308116], [27.0, 42.82460648891747], [28.0, 43.466890843248855], [29.0, 45.67464472700086], [30.0, 47.030101053536846], [31.0, 46.83360032038442], [32.0, 48.67630932123278], [33.0, 50.39881456392895], [34.0, 55.682226211849155], [35.0, 56.3846153846154], [36.0, 59.56474968969809], [37.0, 54.9888944977284], [38.0, 54.04073319755603], [39.0, 58.55070028011196], [40.0, 63.21311475409825], [41.0, 66.78763971071666], [42.0, 64.86699072028274], [43.0, 66.78291316526622], [44.0, 72.61325648414987], [45.0, 73.701879455606], [46.0, 73.52406417112293], [47.0, 78.1122230164404], [48.0, 86.40670859538778], [49.0, 80.53355335533557], [50.0, 76.81873905429059], [51.0, 80.07396149949348], [52.0, 91.75525339925832], [53.0, 84.24383802816908], [54.0, 70.91024682124166], [55.0, 77.69217970049924], [56.0, 80.31920112123332], [57.0, 76.59660897209474], [58.0, 77.33320142461405], [59.0, 82.20667926906113], [60.0, 99.55863539445623], [61.0, 94.85679012345685], [62.0, 94.73994638069702], [63.0, 95.23076923076925], [64.0, 89.75172413793105], [65.0, 113.2296296296297], [66.0, 71.8204225352113], [67.0, 102.19354838709683], [68.0, 130.58407079646017], [69.0, 125.92369477911659], [70.0, 141.03333333333325], [71.0, 108.91079812206571], [72.0, 126.54098360655743], [73.0, 137.87164179104468], [74.0, 104.88443017656499], [75.0, 129.87323943661968], [76.0, 186.2461538461537], [77.0, 143.33626760563388], [78.0, 148.2028985507246], [79.0, 121.19636363636376], [80.0, 102.19565217391296], [81.0, 103.93596986817332], [82.0, 127.6799468791501], [83.0, 151.95169082125594], [84.0, 136.58938547486036], [85.0, 123.23460410557188], [86.0, 122.92508710801381], [87.0, 105.58111111111111], [88.0, 121.23333333333323], [89.0, 120.81318681318669], [90.0, 124.04065040650408], [91.0, 123.78125000000006], [92.0, 92.17096774193553], [93.0, 155.84615384615387], [94.0, 177.5787401574805], [95.0, 202.09693877551018], [96.0, 131.4403669724771], [97.0, 142.11111111111111], [98.0, 250.1315789473683], [99.0, 162.57073170731698], [100.0, 103.39130434782612], [101.0, 148.04150943396212], [102.0, 155.6899224806202], [103.0, 171.3867595818816], [104.0, 150.78165938864623], [105.0, 173.43768996960478], [106.0, 119.09440559440561], [107.0, 131.48499999999996], [108.0, 158.73856209150338], [109.0, 262.1111111111111], [110.0, 99.4387755102041], [111.0, 214.3895348837209], [112.0, 159.8095238095238], [113.0, 171.94581280788168], [114.0, 159.57039711191342], [115.0, 193.73441734417327], [116.0, 247.30290456431518], [117.0, 204.76795580110476], [118.0, 182.75943396226418], [119.0, 246.09259259259247], [120.0, 253.7007874015748], [121.0, 246.33333333333337], [122.0, 274.83561643835606], [123.0, 310.16666666666663], [124.0, 376.8571428571429], [126.0, 388.2027027027027], [125.0, 447.1250000000001], [127.0, 510.32000000000005], [128.0, 435.00000000000017], [130.0, 390.23456790123464], [131.0, 637.8235294117648], [135.0, 395.56250000000006], [134.0, 154.0], [133.0, 133.66666666666666], [129.0, 219.41666666666666], [137.0, 879.6415094339621], [139.0, 1144.108108108108], [141.0, 290.981818181818], [142.0, 657.4123711340204], [143.0, 129.96610169491524], [140.0, 158.0], [138.0, 172.23999999999998], [136.0, 142.12345679012347], [145.0, 233.3108108108109], [144.0, 837.8333333333333], [146.0, 557.3939393939391], [147.0, 319.6631578947368], [148.0, 396.60119047619025], [149.0, 267.75555555555553], [150.0, 249.20512820512812], [151.0, 293.56074766355124], [153.0, 239.63316582914547], [152.0, 275.4084507042254], [154.0, 253.81294964028774], [155.0, 231.83379501385048], [156.0, 224.9409448818897], [157.0, 196.08510638297875], [158.0, 171.9774774774775], [159.0, 177.15236051502146], [160.0, 187.2597911227154], [161.0, 180.97376705141636], [162.0, 178.37515225334957], [163.0, 181.65696302124306], [164.0, 196.17773788150814], [165.0, 187.14285714285722], [166.0, 186.5], [1.0, 17.0]], "isOverall": false, "label": "获得最新比赛信息", "isController": false}, {"data": [[55.68009999999995, 84.62207499999927]], "isOverall": false, "label": "获得最新比赛信息-Aggregated", "isController": false}, {"data": [[4.0, 212.66666666666666], [5.0, 135.0], [6.0, 147.0], [7.0, 149.0], [8.0, 138.0], [9.0, 155.0], [10.0, 146.0], [11.0, 170.0], [12.0, 174.0], [13.0, 177.0], [14.0, 180.0], [15.0, 165.0], [16.0, 155.0], [17.0, 150.0], [18.0, 157.28571428571425], [19.0, 165.95238095238093], [20.0, 170.42857142857142], [21.0, 192.29411764705884], [22.0, 171.875], [23.0, 177.33333333333334], [24.0, 178.0416666666667], [25.0, 183.4411764705883], [26.0, 181.21276595744683], [27.0, 191.03448275862067], [28.0, 189.95522388059698], [29.0, 198.48529411764704], [30.0, 193.7976190476191], [31.0, 208.46753246753246], [33.0, 210.18666666666664], [32.0, 207.41379310344826], [35.0, 214.8936170212766], [34.0, 231.10526315789474], [36.0, 241.68292682926827], [37.0, 227.66666666666666], [38.0, 229.55882352941177], [39.0, 242.92857142857142], [41.0, 284.9565217391305], [40.0, 213.87499999999997], [42.0, 236.1315789473684], [43.0, 259.64864864864865], [44.0, 263.54054054054046], [45.0, 234.45454545454547], [46.0, 269.08695652173907], [47.0, 281.1153846153846], [49.0, 279.3636363636364], [48.0, 277.047619047619], [51.0, 323.7368421052631], [50.0, 308.25], [52.0, 263.42857142857144], [53.0, 298.5882352941176], [54.0, 300.25], [55.0, 272.26666666666665], [56.0, 263.52380952380946], [57.0, 277.7954545454546], [59.0, 298.24], [58.0, 274.5151515151515], [61.0, 403.8333333333333], [60.0, 294.80000000000007], [62.0, 316.33333333333326], [63.0, 303.3333333333333], [65.0, 399.5], [66.0, 265.25], [67.0, 383.0], [64.0, 236.5], [68.0, 292.5], [70.0, 613.125], [71.0, 285.71428571428567], [69.0, 266.5], [73.0, 437.93333333333334], [74.0, 377.22222222222223], [75.0, 410.3333333333333], [72.0, 272.6666666666667], [77.0, 458.33333333333326], [76.0, 421.375], [78.0, 422.5625], [79.0, 413.6666666666667], [80.0, 363.74999999999994], [82.0, 437.53846153846155], [83.0, 588.1428571428571], [81.0, 293.3333333333333], [84.0, 719.8], [85.0, 415.1428571428571], [86.0, 372.25], [87.0, 341.38461538461536], [90.0, 398.3333333333333], [91.0, 362.0], [88.0, 319.0], [89.0, 363.5], [93.0, 445.6666666666667], [95.0, 422.8], [94.0, 357.3333333333333], [92.0, 366.5], [96.0, 482.0], [99.0, 493.8], [98.0, 334.0], [100.0, 401.5], [101.0, 393.8], [103.0, 485.0], [105.0, 403.75], [107.0, 566.5], [106.0, 307.0], [104.0, 374.5], [109.0, 1108.0], [111.0, 356.6666666666667], [110.0, 385.0], [108.0, 307.0], [114.0, 599.5833333333334], [115.0, 726.9333333333334], [112.0, 313.3333333333333], [113.0, 373.5], [116.0, 1102.3333333333333], [117.0, 739.5714285714286], [118.0, 611.0], [119.0, 461.0], [121.0, 894.6666666666666], [120.0, 706.4285714285714], [122.0, 663.0], [124.0, 740.5], [128.0, 971.0], [130.0, 737.5], [129.0, 422.0], [137.0, 1088.5], [142.0, 1955.0], [141.0, 421.0], [136.0, 388.0], [147.0, 2164.75], [149.0, 2245.0], [151.0, 2128.571428571429], [150.0, 498.0], [148.0, 512.6666666666666], [145.0, 439.6666666666667], [152.0, 1507.5833333333333], [154.0, 727.5], [155.0, 663.8571428571429], [156.0, 743.0], [153.0, 590.5], [157.0, 445.6666666666667], [158.0, 472.5], [159.0, 463.6666666666667], [160.0, 472.9], [161.0, 442.0], [162.0, 465.57894736842104], [163.0, 468.07692307692315], [164.0, 487.8333333333333], [165.0, 509.25]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[54.45249999999978, 306.06450000000007]], "isOverall": false, "label": "登录请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 166.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14829.733333333334, "minX": 1.6314588E12, "maxY": 348342.5, "series": [{"data": [[1.63145886E12, 348342.5], [1.63145898E12, 322286.8333333333], [1.6314588E12, 49410.1], [1.63145892E12, 314360.5833333333], [1.63145904E12, 25366.65]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63145886E12, 203476.35], [1.63145898E12, 188208.68333333332], [1.6314588E12, 28763.783333333333], [1.63145892E12, 183554.78333333333], [1.63145904E12, 14829.733333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145904E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 51.125302872966465, "minX": 1.6314588E12, "maxY": 497.0432098765432, "series": [{"data": [[1.63145886E12, 121.2033010151131], [1.63145898E12, 63.45692134893019], [1.6314588E12, 184.0817473264455], [1.63145892E12, 53.0264976958526], [1.63145904E12, 51.125302872966465]], "isOverall": false, "label": "获得最新比赛信息", "isController": false}, {"data": [[1.63145886E12, 416.5702479338841], [1.63145898E12, 235.07500000000013], [1.6314588E12, 497.0432098765432], [1.63145892E12, 218.6666666666668], [1.63145904E12, 222.36363636363637]], "isOverall": false, "label": "登录请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145904E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 50.82208376600905, "minX": 1.6314588E12, "maxY": 496.382716049383, "series": [{"data": [[1.63145886E12, 120.70270612358392], [1.63145898E12, 63.17294468947747], [1.6314588E12, 183.50770346202668], [1.63145892E12, 52.74232887490173], [1.63145904E12, 50.82208376600905]], "isOverall": false, "label": "获得最新比赛信息", "isController": false}, {"data": [[1.63145886E12, 416.10909090909036], [1.63145898E12, 234.38500000000008], [1.6314588E12, 496.382716049383], [1.63145892E12, 217.79666666666665], [1.63145904E12, 221.8787878787879]], "isOverall": false, "label": "登录请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145904E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6314588E12, "maxY": 196.32098765432102, "series": [{"data": [[1.63145886E12, 0.0], [1.63145898E12, 0.0], [1.6314588E12, 0.0], [1.63145892E12, 0.0], [1.63145904E12, 0.0]], "isOverall": false, "label": "获得最新比赛信息", "isController": false}, {"data": [[1.63145886E12, 157.4000000000001], [1.63145898E12, 65.10333333333331], [1.6314588E12, 196.32098765432102], [1.63145892E12, 56.17166666666664], [1.63145904E12, 61.33333333333334]], "isOverall": false, "label": "登录请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145904E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.6314588E12, "maxY": 3267.0, "series": [{"data": [[1.63145886E12, 3267.0], [1.63145898E12, 1218.0], [1.6314588E12, 1554.0], [1.63145892E12, 1274.0], [1.63145904E12, 407.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63145886E12, 124.0], [1.63145898E12, 106.0], [1.6314588E12, 369.0], [1.63145892E12, 108.0], [1.63145904E12, 80.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63145886E12, 253.0], [1.63145898E12, 240.0], [1.6314588E12, 807.1999999999998], [1.63145892E12, 251.0], [1.63145904E12, 239.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63145886E12, 172.0], [1.63145898E12, 167.0], [1.6314588E12, 468.0], [1.63145892E12, 152.0], [1.63145904E12, 121.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63145886E12, 12.0], [1.63145898E12, 11.0], [1.6314588E12, 14.0], [1.63145892E12, 10.0], [1.63145904E12, 11.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63145886E12, 54.0], [1.63145898E12, 51.0], [1.6314588E12, 155.0], [1.63145892E12, 49.0], [1.63145904E12, 43.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145904E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 73.0, "maxY": 1250.0, "series": [{"data": [[73.0, 1250.0], [78.0, 25.0], [106.0, 22.0], [178.0, 811.0], [184.0, 736.0], [188.0, 524.0], [195.0, 39.0], [194.0, 428.0], [232.0, 90.0], [235.0, 72.0], [250.0, 176.0], [303.0, 110.0], [325.0, 86.0], [332.0, 122.5], [341.0, 476.0], [346.0, 129.0], [351.0, 116.0], [358.0, 118.5], [359.0, 64.0], [353.0, 102.0], [373.0, 203.0], [372.0, 80.5], [382.0, 50.5], [371.0, 83.0], [384.0, 63.5], [396.0, 42.0], [397.0, 85.0], [407.0, 194.0], [412.0, 278.0], [401.0, 103.0], [408.0, 89.0], [400.0, 63.0], [418.0, 72.0], [429.0, 133.0], [425.0, 180.0], [419.0, 199.0], [426.0, 160.0], [427.0, 185.0], [431.0, 57.0], [442.0, 46.0], [432.0, 48.0], [443.0, 45.0], [449.0, 111.0], [461.0, 38.0], [455.0, 61.0], [453.0, 69.0], [477.0, 119.0], [466.0, 74.5], [475.0, 64.0], [470.0, 105.0], [481.0, 46.0], [491.0, 55.0], [487.0, 59.0], [503.0, 38.0], [498.0, 61.0], [505.0, 42.0], [511.0, 56.0], [500.0, 75.0], [504.0, 49.0], [531.0, 119.0], [543.0, 43.0], [537.0, 68.0], [525.0, 79.0], [518.0, 99.0], [542.0, 48.0], [532.0, 46.0], [516.0, 36.0], [572.0, 51.0], [567.0, 100.0], [549.0, 30.0], [544.0, 40.5], [559.0, 33.0], [554.0, 40.0], [569.0, 43.0], [550.0, 47.0], [557.0, 50.0], [583.0, 31.0], [603.0, 98.0], [604.0, 63.0], [580.0, 122.0], [578.0, 69.5], [582.0, 36.0], [585.0, 40.0], [584.0, 46.0], [590.0, 43.5], [586.0, 54.0], [591.0, 46.0], [592.0, 42.0], [595.0, 43.0], [594.0, 41.0], [597.0, 41.0], [598.0, 31.0], [632.0, 46.0], [638.0, 49.0], [633.0, 27.0], [625.0, 26.0], [629.0, 55.0], [616.0, 38.0], [639.0, 49.0], [618.0, 63.0], [621.0, 66.0], [613.0, 42.0], [643.0, 43.0], [663.0, 178.0], [654.0, 47.0], [660.0, 41.0], [665.0, 69.0], [667.0, 48.0], [645.0, 45.0], [670.0, 50.5], [659.0, 44.0], [669.0, 54.0], [640.0, 79.0], [651.0, 83.0], [642.0, 60.0], [684.0, 170.0], [683.0, 118.0], [672.0, 64.0], [682.0, 99.0], [689.0, 47.0], [695.0, 40.0], [700.0, 40.0], [703.0, 74.0], [690.0, 28.0], [681.0, 47.0], [730.0, 39.0], [717.0, 70.0], [733.0, 57.0], [721.0, 49.0], [705.0, 55.0], [735.0, 34.0], [713.0, 54.0], [727.0, 76.0], [722.0, 40.0], [737.0, 39.0], [754.0, 34.0], [744.0, 38.0], [753.0, 66.0], [757.0, 40.0], [743.0, 33.0], [772.0, 123.0], [769.0, 109.5], [790.0, 108.0], [799.0, 45.0], [779.0, 32.0], [777.0, 35.0], [768.0, 52.0], [780.0, 45.5], [792.0, 42.0], [829.0, 56.0], [812.0, 184.0], [819.0, 191.0], [821.0, 198.0], [808.0, 143.0], [818.0, 64.0], [800.0, 62.0], [824.0, 44.0], [802.0, 60.0], [840.0, 191.0], [853.0, 90.0], [851.0, 91.0], [832.0, 41.0], [844.0, 36.0], [875.0, 171.0], [872.0, 83.0], [864.0, 47.0], [891.0, 56.0], [914.0, 173.0], [909.0, 172.0], [906.0, 50.0], [935.0, 52.0], [943.0, 48.0], [981.0, 77.0], [982.0, 53.0], [973.0, 41.0], [1007.0, 70.0], [1063.0, 61.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1063.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 73.0, "maxY": 1250.0, "series": [{"data": [[73.0, 1250.0], [78.0, 25.0], [106.0, 22.0], [178.0, 811.0], [184.0, 736.0], [188.0, 524.0], [195.0, 38.0], [194.0, 428.0], [232.0, 90.0], [235.0, 72.0], [250.0, 176.0], [303.0, 110.0], [325.0, 86.0], [332.0, 120.0], [341.0, 476.0], [346.0, 129.0], [351.0, 103.0], [358.0, 118.5], [359.0, 64.0], [353.0, 102.0], [373.0, 196.0], [372.0, 80.0], [382.0, 50.5], [371.0, 82.0], [384.0, 63.5], [396.0, 42.0], [397.0, 85.0], [407.0, 194.0], [412.0, 277.0], [401.0, 103.0], [408.0, 88.5], [400.0, 62.0], [418.0, 72.0], [429.0, 132.0], [425.0, 180.0], [419.0, 198.0], [426.0, 160.0], [427.0, 185.0], [431.0, 57.0], [442.0, 46.0], [432.0, 48.0], [443.0, 44.0], [449.0, 110.0], [461.0, 38.0], [455.0, 61.0], [453.0, 68.0], [477.0, 119.0], [466.0, 74.5], [475.0, 62.0], [470.0, 105.0], [481.0, 46.0], [491.0, 55.0], [487.0, 59.0], [503.0, 38.0], [498.0, 61.0], [505.0, 42.0], [511.0, 56.0], [500.0, 74.0], [504.0, 49.0], [531.0, 116.5], [543.0, 43.0], [537.0, 68.0], [525.0, 79.0], [518.0, 99.0], [542.0, 48.0], [532.0, 46.0], [516.0, 35.0], [572.0, 50.0], [567.0, 99.0], [549.0, 30.0], [544.0, 40.0], [559.0, 33.0], [554.0, 40.0], [569.0, 43.0], [550.0, 47.0], [557.0, 50.0], [583.0, 31.0], [603.0, 98.0], [604.0, 62.0], [580.0, 122.0], [578.0, 69.5], [582.0, 35.0], [585.0, 39.0], [584.0, 46.0], [590.0, 43.0], [586.0, 53.0], [591.0, 46.0], [592.0, 42.0], [595.0, 43.0], [594.0, 41.0], [597.0, 41.0], [598.0, 31.0], [632.0, 45.0], [638.0, 49.0], [633.0, 27.0], [625.0, 26.0], [629.0, 55.0], [616.0, 38.0], [639.0, 49.0], [618.0, 63.0], [621.0, 66.0], [613.0, 42.0], [643.0, 42.0], [663.0, 178.0], [654.0, 47.0], [660.0, 41.0], [665.0, 69.0], [667.0, 47.0], [645.0, 45.0], [670.0, 50.0], [659.0, 44.0], [669.0, 54.0], [640.0, 78.5], [651.0, 83.0], [642.0, 60.0], [684.0, 169.5], [683.0, 117.0], [672.0, 64.0], [682.0, 99.0], [689.0, 47.0], [695.0, 39.0], [700.0, 40.0], [703.0, 74.0], [690.0, 27.0], [681.0, 47.0], [730.0, 38.5], [717.0, 70.0], [733.0, 56.0], [721.0, 49.0], [705.0, 55.0], [735.0, 34.0], [713.0, 54.0], [727.0, 75.0], [722.0, 40.0], [737.0, 39.0], [754.0, 34.0], [744.0, 38.0], [753.0, 66.0], [757.0, 40.0], [743.0, 33.0], [772.0, 122.5], [769.0, 108.0], [790.0, 108.0], [799.0, 45.0], [779.0, 32.0], [777.0, 35.0], [768.0, 52.0], [780.0, 45.0], [792.0, 42.0], [829.0, 56.0], [812.0, 184.0], [819.0, 191.0], [821.0, 197.0], [808.0, 143.0], [818.0, 64.0], [800.0, 61.0], [824.0, 44.0], [802.0, 59.0], [840.0, 191.0], [853.0, 90.0], [851.0, 91.0], [832.0, 40.0], [844.0, 36.0], [875.0, 171.0], [872.0, 83.0], [864.0, 47.0], [891.0, 56.0], [914.0, 173.0], [909.0, 171.0], [906.0, 49.0], [935.0, 51.0], [943.0, 48.0], [981.0, 77.0], [982.0, 53.0], [973.0, 41.0], [1007.0, 70.0], [1063.0, 61.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1063.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 48.2, "minX": 1.6314588E12, "maxY": 666.9, "series": [{"data": [[1.63145886E12, 666.9], [1.63145898E12, 618.05], [1.6314588E12, 96.68333333333334], [1.63145892E12, 603.5], [1.63145904E12, 48.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145904E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 48.7, "minX": 1.6314588E12, "maxY": 668.4666666666667, "series": [{"data": [[1.63145886E12, 668.4666666666667], [1.63145898E12, 618.3833333333333], [1.6314588E12, 94.65], [1.63145892E12, 603.1333333333333], [1.63145904E12, 48.7]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63145904E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.55, "minX": 1.6314588E12, "maxY": 658.3833333333333, "series": [{"data": [[1.63145886E12, 658.3833333333333], [1.63145898E12, 608.3833333333333], [1.6314588E12, 91.95], [1.63145892E12, 593.1333333333333], [1.63145904E12, 48.15]], "isOverall": false, "label": "获得最新比赛信息-success", "isController": false}, {"data": [[1.63145886E12, 10.083333333333334], [1.63145898E12, 10.0], [1.6314588E12, 2.7], [1.63145892E12, 10.0], [1.63145904E12, 0.55]], "isOverall": false, "label": "登录请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145904E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 48.7, "minX": 1.6314588E12, "maxY": 668.4666666666667, "series": [{"data": [[1.63145886E12, 668.4666666666667], [1.63145898E12, 618.3833333333333], [1.6314588E12, 94.65], [1.63145892E12, 603.1333333333333], [1.63145904E12, 48.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63145904E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

