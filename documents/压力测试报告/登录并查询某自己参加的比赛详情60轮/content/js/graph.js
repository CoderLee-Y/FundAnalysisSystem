/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 21062.0, "series": [{"data": [[0.0, 133.0], [0.1, 134.0], [0.2, 138.0], [0.3, 139.0], [0.4, 140.0], [0.5, 140.0], [0.6, 141.0], [0.7, 142.0], [0.8, 142.0], [0.9, 143.0], [1.0, 143.0], [1.1, 143.0], [1.2, 144.0], [1.3, 144.0], [1.4, 144.0], [1.5, 145.0], [1.6, 146.0], [1.7, 146.0], [1.8, 146.0], [1.9, 146.0], [2.0, 146.0], [2.1, 147.0], [2.2, 147.0], [2.3, 147.0], [2.4, 147.0], [2.5, 147.0], [2.6, 148.0], [2.7, 148.0], [2.8, 148.0], [2.9, 148.0], [3.0, 148.0], [3.1, 148.0], [3.2, 149.0], [3.3, 149.0], [3.4, 149.0], [3.5, 149.0], [3.6, 149.0], [3.7, 149.0], [3.8, 150.0], [3.9, 150.0], [4.0, 150.0], [4.1, 150.0], [4.2, 150.0], [4.3, 151.0], [4.4, 151.0], [4.5, 151.0], [4.6, 151.0], [4.7, 151.0], [4.8, 151.0], [4.9, 151.0], [5.0, 151.0], [5.1, 152.0], [5.2, 152.0], [5.3, 152.0], [5.4, 152.0], [5.5, 152.0], [5.6, 152.0], [5.7, 152.0], [5.8, 153.0], [5.9, 153.0], [6.0, 153.0], [6.1, 153.0], [6.2, 153.0], [6.3, 154.0], [6.4, 154.0], [6.5, 154.0], [6.6, 154.0], [6.7, 155.0], [6.8, 155.0], [6.9, 155.0], [7.0, 155.0], [7.1, 155.0], [7.2, 156.0], [7.3, 156.0], [7.4, 156.0], [7.5, 156.0], [7.6, 156.0], [7.7, 156.0], [7.8, 157.0], [7.9, 157.0], [8.0, 157.0], [8.1, 157.0], [8.2, 157.0], [8.3, 157.0], [8.4, 157.0], [8.5, 158.0], [8.6, 158.0], [8.7, 158.0], [8.8, 158.0], [8.9, 158.0], [9.0, 158.0], [9.1, 158.0], [9.2, 158.0], [9.3, 158.0], [9.4, 159.0], [9.5, 159.0], [9.6, 159.0], [9.7, 159.0], [9.8, 159.0], [9.9, 159.0], [10.0, 159.0], [10.1, 159.0], [10.2, 159.0], [10.3, 159.0], [10.4, 159.0], [10.5, 160.0], [10.6, 160.0], [10.7, 160.0], [10.8, 160.0], [10.9, 160.0], [11.0, 160.0], [11.1, 160.0], [11.2, 160.0], [11.3, 160.0], [11.4, 160.0], [11.5, 160.0], [11.6, 160.0], [11.7, 160.0], [11.8, 160.0], [11.9, 161.0], [12.0, 161.0], [12.1, 161.0], [12.2, 161.0], [12.3, 161.0], [12.4, 161.0], [12.5, 161.0], [12.6, 161.0], [12.7, 162.0], [12.8, 162.0], [12.9, 162.0], [13.0, 162.0], [13.1, 162.0], [13.2, 162.0], [13.3, 162.0], [13.4, 162.0], [13.5, 162.0], [13.6, 162.0], [13.7, 163.0], [13.8, 163.0], [13.9, 163.0], [14.0, 163.0], [14.1, 163.0], [14.2, 163.0], [14.3, 163.0], [14.4, 163.0], [14.5, 164.0], [14.6, 164.0], [14.7, 164.0], [14.8, 164.0], [14.9, 164.0], [15.0, 164.0], [15.1, 164.0], [15.2, 164.0], [15.3, 164.0], [15.4, 164.0], [15.5, 164.0], [15.6, 165.0], [15.7, 165.0], [15.8, 165.0], [15.9, 165.0], [16.0, 165.0], [16.1, 165.0], [16.2, 165.0], [16.3, 165.0], [16.4, 165.0], [16.5, 165.0], [16.6, 165.0], [16.7, 166.0], [16.8, 166.0], [16.9, 166.0], [17.0, 166.0], [17.1, 166.0], [17.2, 166.0], [17.3, 166.0], [17.4, 167.0], [17.5, 167.0], [17.6, 167.0], [17.7, 167.0], [17.8, 167.0], [17.9, 167.0], [18.0, 167.0], [18.1, 167.0], [18.2, 167.0], [18.3, 168.0], [18.4, 168.0], [18.5, 168.0], [18.6, 168.0], [18.7, 168.0], [18.8, 168.0], [18.9, 168.0], [19.0, 168.0], [19.1, 168.0], [19.2, 168.0], [19.3, 168.0], [19.4, 168.0], [19.5, 168.0], [19.6, 169.0], [19.7, 169.0], [19.8, 169.0], [19.9, 169.0], [20.0, 169.0], [20.1, 169.0], [20.2, 169.0], [20.3, 170.0], [20.4, 170.0], [20.5, 170.0], [20.6, 170.0], [20.7, 170.0], [20.8, 170.0], [20.9, 170.0], [21.0, 170.0], [21.1, 170.0], [21.2, 170.0], [21.3, 170.0], [21.4, 171.0], [21.5, 171.0], [21.6, 171.0], [21.7, 171.0], [21.8, 171.0], [21.9, 171.0], [22.0, 171.0], [22.1, 171.0], [22.2, 172.0], [22.3, 172.0], [22.4, 172.0], [22.5, 172.0], [22.6, 172.0], [22.7, 172.0], [22.8, 172.0], [22.9, 172.0], [23.0, 172.0], [23.1, 172.0], [23.2, 172.0], [23.3, 173.0], [23.4, 173.0], [23.5, 173.0], [23.6, 173.0], [23.7, 173.0], [23.8, 173.0], [23.9, 173.0], [24.0, 174.0], [24.1, 174.0], [24.2, 174.0], [24.3, 174.0], [24.4, 174.0], [24.5, 174.0], [24.6, 174.0], [24.7, 174.0], [24.8, 174.0], [24.9, 174.0], [25.0, 174.0], [25.1, 175.0], [25.2, 175.0], [25.3, 175.0], [25.4, 175.0], [25.5, 175.0], [25.6, 175.0], [25.7, 175.0], [25.8, 175.0], [25.9, 175.0], [26.0, 176.0], [26.1, 176.0], [26.2, 176.0], [26.3, 176.0], [26.4, 176.0], [26.5, 176.0], [26.6, 176.0], [26.7, 176.0], [26.8, 176.0], [26.9, 176.0], [27.0, 177.0], [27.1, 177.0], [27.2, 177.0], [27.3, 177.0], [27.4, 177.0], [27.5, 177.0], [27.6, 177.0], [27.7, 177.0], [27.8, 177.0], [27.9, 177.0], [28.0, 177.0], [28.1, 178.0], [28.2, 178.0], [28.3, 178.0], [28.4, 178.0], [28.5, 178.0], [28.6, 178.0], [28.7, 178.0], [28.8, 178.0], [28.9, 178.0], [29.0, 178.0], [29.1, 178.0], [29.2, 178.0], [29.3, 178.0], [29.4, 179.0], [29.5, 179.0], [29.6, 179.0], [29.7, 179.0], [29.8, 179.0], [29.9, 179.0], [30.0, 179.0], [30.1, 180.0], [30.2, 180.0], [30.3, 180.0], [30.4, 180.0], [30.5, 180.0], [30.6, 180.0], [30.7, 180.0], [30.8, 180.0], [30.9, 180.0], [31.0, 181.0], [31.1, 181.0], [31.2, 181.0], [31.3, 182.0], [31.4, 182.0], [31.5, 182.0], [31.6, 182.0], [31.7, 182.0], [31.8, 182.0], [31.9, 182.0], [32.0, 183.0], [32.1, 183.0], [32.2, 183.0], [32.3, 183.0], [32.4, 183.0], [32.5, 183.0], [32.6, 183.0], [32.7, 183.0], [32.8, 184.0], [32.9, 184.0], [33.0, 184.0], [33.1, 184.0], [33.2, 184.0], [33.3, 184.0], [33.4, 184.0], [33.5, 184.0], [33.6, 184.0], [33.7, 185.0], [33.8, 185.0], [33.9, 185.0], [34.0, 185.0], [34.1, 185.0], [34.2, 185.0], [34.3, 185.0], [34.4, 185.0], [34.5, 185.0], [34.6, 185.0], [34.7, 185.0], [34.8, 186.0], [34.9, 186.0], [35.0, 186.0], [35.1, 186.0], [35.2, 186.0], [35.3, 186.0], [35.4, 186.0], [35.5, 186.0], [35.6, 186.0], [35.7, 186.0], [35.8, 186.0], [35.9, 187.0], [36.0, 187.0], [36.1, 187.0], [36.2, 187.0], [36.3, 187.0], [36.4, 188.0], [36.5, 188.0], [36.6, 188.0], [36.7, 189.0], [36.8, 189.0], [36.9, 189.0], [37.0, 189.0], [37.1, 189.0], [37.2, 189.0], [37.3, 189.0], [37.4, 190.0], [37.5, 190.0], [37.6, 190.0], [37.7, 190.0], [37.8, 191.0], [37.9, 191.0], [38.0, 191.0], [38.1, 191.0], [38.2, 191.0], [38.3, 191.0], [38.4, 191.0], [38.5, 192.0], [38.6, 192.0], [38.7, 192.0], [38.8, 192.0], [38.9, 192.0], [39.0, 192.0], [39.1, 192.0], [39.2, 192.0], [39.3, 192.0], [39.4, 193.0], [39.5, 193.0], [39.6, 193.0], [39.7, 193.0], [39.8, 193.0], [39.9, 193.0], [40.0, 193.0], [40.1, 194.0], [40.2, 194.0], [40.3, 194.0], [40.4, 195.0], [40.5, 195.0], [40.6, 195.0], [40.7, 195.0], [40.8, 196.0], [40.9, 196.0], [41.0, 196.0], [41.1, 196.0], [41.2, 196.0], [41.3, 196.0], [41.4, 196.0], [41.5, 196.0], [41.6, 196.0], [41.7, 197.0], [41.8, 197.0], [41.9, 197.0], [42.0, 197.0], [42.1, 198.0], [42.2, 198.0], [42.3, 198.0], [42.4, 198.0], [42.5, 198.0], [42.6, 198.0], [42.7, 199.0], [42.8, 199.0], [42.9, 199.0], [43.0, 200.0], [43.1, 200.0], [43.2, 200.0], [43.3, 200.0], [43.4, 200.0], [43.5, 201.0], [43.6, 201.0], [43.7, 201.0], [43.8, 201.0], [43.9, 201.0], [44.0, 201.0], [44.1, 201.0], [44.2, 201.0], [44.3, 201.0], [44.4, 202.0], [44.5, 202.0], [44.6, 202.0], [44.7, 202.0], [44.8, 202.0], [44.9, 203.0], [45.0, 203.0], [45.1, 203.0], [45.2, 204.0], [45.3, 204.0], [45.4, 204.0], [45.5, 204.0], [45.6, 204.0], [45.7, 204.0], [45.8, 205.0], [45.9, 205.0], [46.0, 205.0], [46.1, 205.0], [46.2, 205.0], [46.3, 205.0], [46.4, 206.0], [46.5, 206.0], [46.6, 206.0], [46.7, 207.0], [46.8, 207.0], [46.9, 207.0], [47.0, 207.0], [47.1, 208.0], [47.2, 208.0], [47.3, 208.0], [47.4, 208.0], [47.5, 208.0], [47.6, 209.0], [47.7, 209.0], [47.8, 209.0], [47.9, 210.0], [48.0, 210.0], [48.1, 210.0], [48.2, 210.0], [48.3, 210.0], [48.4, 210.0], [48.5, 211.0], [48.6, 211.0], [48.7, 211.0], [48.8, 211.0], [48.9, 211.0], [49.0, 212.0], [49.1, 212.0], [49.2, 213.0], [49.3, 213.0], [49.4, 213.0], [49.5, 213.0], [49.6, 214.0], [49.7, 214.0], [49.8, 214.0], [49.9, 215.0], [50.0, 215.0], [50.1, 215.0], [50.2, 215.0], [50.3, 216.0], [50.4, 216.0], [50.5, 216.0], [50.6, 216.0], [50.7, 216.0], [50.8, 217.0], [50.9, 217.0], [51.0, 217.0], [51.1, 218.0], [51.2, 218.0], [51.3, 218.0], [51.4, 219.0], [51.5, 219.0], [51.6, 219.0], [51.7, 219.0], [51.8, 220.0], [51.9, 220.0], [52.0, 220.0], [52.1, 220.0], [52.2, 221.0], [52.3, 221.0], [52.4, 221.0], [52.5, 221.0], [52.6, 221.0], [52.7, 221.0], [52.8, 222.0], [52.9, 222.0], [53.0, 222.0], [53.1, 223.0], [53.2, 223.0], [53.3, 223.0], [53.4, 224.0], [53.5, 224.0], [53.6, 224.0], [53.7, 224.0], [53.8, 225.0], [53.9, 225.0], [54.0, 225.0], [54.1, 225.0], [54.2, 226.0], [54.3, 226.0], [54.4, 226.0], [54.5, 226.0], [54.6, 226.0], [54.7, 226.0], [54.8, 227.0], [54.9, 228.0], [55.0, 228.0], [55.1, 228.0], [55.2, 229.0], [55.3, 229.0], [55.4, 230.0], [55.5, 230.0], [55.6, 230.0], [55.7, 231.0], [55.8, 231.0], [55.9, 231.0], [56.0, 231.0], [56.1, 231.0], [56.2, 232.0], [56.3, 233.0], [56.4, 234.0], [56.5, 234.0], [56.6, 235.0], [56.7, 235.0], [56.8, 235.0], [56.9, 236.0], [57.0, 236.0], [57.1, 237.0], [57.2, 237.0], [57.3, 237.0], [57.4, 238.0], [57.5, 238.0], [57.6, 239.0], [57.7, 239.0], [57.8, 239.0], [57.9, 239.0], [58.0, 239.0], [58.1, 239.0], [58.2, 240.0], [58.3, 240.0], [58.4, 241.0], [58.5, 241.0], [58.6, 242.0], [58.7, 242.0], [58.8, 243.0], [58.9, 243.0], [59.0, 244.0], [59.1, 246.0], [59.2, 246.0], [59.3, 247.0], [59.4, 247.0], [59.5, 248.0], [59.6, 248.0], [59.7, 249.0], [59.8, 249.0], [59.9, 251.0], [60.0, 251.0], [60.1, 253.0], [60.2, 253.0], [60.3, 253.0], [60.4, 253.0], [60.5, 254.0], [60.6, 255.0], [60.7, 256.0], [60.8, 256.0], [60.9, 256.0], [61.0, 257.0], [61.1, 257.0], [61.2, 257.0], [61.3, 260.0], [61.4, 260.0], [61.5, 261.0], [61.6, 262.0], [61.7, 262.0], [61.8, 263.0], [61.9, 263.0], [62.0, 264.0], [62.1, 264.0], [62.2, 266.0], [62.3, 266.0], [62.4, 267.0], [62.5, 267.0], [62.6, 267.0], [62.7, 268.0], [62.8, 269.0], [62.9, 269.0], [63.0, 270.0], [63.1, 270.0], [63.2, 272.0], [63.3, 272.0], [63.4, 272.0], [63.5, 273.0], [63.6, 274.0], [63.7, 275.0], [63.8, 275.0], [63.9, 276.0], [64.0, 276.0], [64.1, 277.0], [64.2, 277.0], [64.3, 277.0], [64.4, 278.0], [64.5, 278.0], [64.6, 278.0], [64.7, 279.0], [64.8, 281.0], [64.9, 282.0], [65.0, 282.0], [65.1, 283.0], [65.2, 283.0], [65.3, 283.0], [65.4, 284.0], [65.5, 284.0], [65.6, 285.0], [65.7, 285.0], [65.8, 286.0], [65.9, 286.0], [66.0, 287.0], [66.1, 287.0], [66.2, 288.0], [66.3, 288.0], [66.4, 288.0], [66.5, 290.0], [66.6, 292.0], [66.7, 292.0], [66.8, 292.0], [66.9, 293.0], [67.0, 293.0], [67.1, 294.0], [67.2, 294.0], [67.3, 295.0], [67.4, 296.0], [67.5, 297.0], [67.6, 298.0], [67.7, 298.0], [67.8, 300.0], [67.9, 301.0], [68.0, 301.0], [68.1, 302.0], [68.2, 303.0], [68.3, 303.0], [68.4, 304.0], [68.5, 304.0], [68.6, 305.0], [68.7, 306.0], [68.8, 307.0], [68.9, 308.0], [69.0, 308.0], [69.1, 309.0], [69.2, 310.0], [69.3, 310.0], [69.4, 310.0], [69.5, 310.0], [69.6, 310.0], [69.7, 312.0], [69.8, 312.0], [69.9, 313.0], [70.0, 313.0], [70.1, 314.0], [70.2, 315.0], [70.3, 316.0], [70.4, 316.0], [70.5, 316.0], [70.6, 317.0], [70.7, 317.0], [70.8, 318.0], [70.9, 319.0], [71.0, 320.0], [71.1, 320.0], [71.2, 321.0], [71.3, 321.0], [71.4, 322.0], [71.5, 322.0], [71.6, 322.0], [71.7, 323.0], [71.8, 323.0], [71.9, 324.0], [72.0, 324.0], [72.1, 325.0], [72.2, 326.0], [72.3, 326.0], [72.4, 327.0], [72.5, 328.0], [72.6, 328.0], [72.7, 330.0], [72.8, 331.0], [72.9, 334.0], [73.0, 334.0], [73.1, 335.0], [73.2, 335.0], [73.3, 336.0], [73.4, 336.0], [73.5, 337.0], [73.6, 337.0], [73.7, 337.0], [73.8, 338.0], [73.9, 339.0], [74.0, 339.0], [74.1, 340.0], [74.2, 344.0], [74.3, 344.0], [74.4, 345.0], [74.5, 345.0], [74.6, 346.0], [74.7, 347.0], [74.8, 348.0], [74.9, 352.0], [75.0, 353.0], [75.1, 353.0], [75.2, 355.0], [75.3, 356.0], [75.4, 357.0], [75.5, 357.0], [75.6, 358.0], [75.7, 360.0], [75.8, 360.0], [75.9, 361.0], [76.0, 362.0], [76.1, 362.0], [76.2, 363.0], [76.3, 364.0], [76.4, 365.0], [76.5, 366.0], [76.6, 368.0], [76.7, 369.0], [76.8, 369.0], [76.9, 369.0], [77.0, 371.0], [77.1, 371.0], [77.2, 371.0], [77.3, 372.0], [77.4, 373.0], [77.5, 373.0], [77.6, 374.0], [77.7, 375.0], [77.8, 376.0], [77.9, 377.0], [78.0, 378.0], [78.1, 379.0], [78.2, 380.0], [78.3, 381.0], [78.4, 383.0], [78.5, 384.0], [78.6, 385.0], [78.7, 386.0], [78.8, 386.0], [78.9, 387.0], [79.0, 388.0], [79.1, 389.0], [79.2, 389.0], [79.3, 390.0], [79.4, 391.0], [79.5, 394.0], [79.6, 396.0], [79.7, 397.0], [79.8, 397.0], [79.9, 399.0], [80.0, 400.0], [80.1, 402.0], [80.2, 403.0], [80.3, 404.0], [80.4, 405.0], [80.5, 406.0], [80.6, 406.0], [80.7, 407.0], [80.8, 408.0], [80.9, 410.0], [81.0, 411.0], [81.1, 414.0], [81.2, 416.0], [81.3, 416.0], [81.4, 419.0], [81.5, 420.0], [81.6, 420.0], [81.7, 421.0], [81.8, 421.0], [81.9, 422.0], [82.0, 423.0], [82.1, 423.0], [82.2, 425.0], [82.3, 427.0], [82.4, 427.0], [82.5, 430.0], [82.6, 431.0], [82.7, 432.0], [82.8, 433.0], [82.9, 434.0], [83.0, 434.0], [83.1, 437.0], [83.2, 438.0], [83.3, 439.0], [83.4, 440.0], [83.5, 442.0], [83.6, 444.0], [83.7, 446.0], [83.8, 448.0], [83.9, 449.0], [84.0, 450.0], [84.1, 451.0], [84.2, 452.0], [84.3, 454.0], [84.4, 455.0], [84.5, 456.0], [84.6, 456.0], [84.7, 460.0], [84.8, 465.0], [84.9, 467.0], [85.0, 470.0], [85.1, 471.0], [85.2, 479.0], [85.3, 481.0], [85.4, 483.0], [85.5, 487.0], [85.6, 489.0], [85.7, 490.0], [85.8, 492.0], [85.9, 495.0], [86.0, 496.0], [86.1, 498.0], [86.2, 503.0], [86.3, 504.0], [86.4, 512.0], [86.5, 514.0], [86.6, 516.0], [86.7, 517.0], [86.8, 518.0], [86.9, 521.0], [87.0, 524.0], [87.1, 527.0], [87.2, 528.0], [87.3, 529.0], [87.4, 530.0], [87.5, 537.0], [87.6, 543.0], [87.7, 545.0], [87.8, 546.0], [87.9, 548.0], [88.0, 550.0], [88.1, 554.0], [88.2, 562.0], [88.3, 566.0], [88.4, 568.0], [88.5, 569.0], [88.6, 576.0], [88.7, 578.0], [88.8, 582.0], [88.9, 584.0], [89.0, 590.0], [89.1, 593.0], [89.2, 594.0], [89.3, 595.0], [89.4, 600.0], [89.5, 604.0], [89.6, 609.0], [89.7, 612.0], [89.8, 619.0], [89.9, 620.0], [90.0, 623.0], [90.1, 625.0], [90.2, 629.0], [90.3, 631.0], [90.4, 639.0], [90.5, 645.0], [90.6, 649.0], [90.7, 652.0], [90.8, 667.0], [90.9, 679.0], [91.0, 682.0], [91.1, 689.0], [91.2, 697.0], [91.3, 712.0], [91.4, 713.0], [91.5, 716.0], [91.6, 724.0], [91.7, 726.0], [91.8, 728.0], [91.9, 735.0], [92.0, 736.0], [92.1, 740.0], [92.2, 752.0], [92.3, 758.0], [92.4, 762.0], [92.5, 767.0], [92.6, 769.0], [92.7, 779.0], [92.8, 790.0], [92.9, 797.0], [93.0, 802.0], [93.1, 810.0], [93.2, 826.0], [93.3, 832.0], [93.4, 842.0], [93.5, 846.0], [93.6, 850.0], [93.7, 860.0], [93.8, 863.0], [93.9, 866.0], [94.0, 879.0], [94.1, 889.0], [94.2, 905.0], [94.3, 923.0], [94.4, 926.0], [94.5, 929.0], [94.6, 931.0], [94.7, 934.0], [94.8, 983.0], [94.9, 989.0], [95.0, 1012.0], [95.1, 1023.0], [95.2, 1055.0], [95.3, 1079.0], [95.4, 1096.0], [95.5, 1125.0], [95.6, 1159.0], [95.7, 1164.0], [95.8, 1196.0], [95.9, 1252.0], [96.0, 1271.0], [96.1, 1322.0], [96.2, 1368.0], [96.3, 1374.0], [96.4, 1381.0], [96.5, 1394.0], [96.6, 1436.0], [96.7, 1456.0], [96.8, 1470.0], [96.9, 1523.0], [97.0, 1668.0], [97.1, 1720.0], [97.2, 2024.0], [97.3, 21012.0], [97.4, 21023.0], [97.5, 21026.0], [97.6, 21027.0], [97.7, 21029.0], [97.8, 21031.0], [97.9, 21033.0], [98.0, 21035.0], [98.1, 21036.0], [98.2, 21036.0], [98.3, 21038.0], [98.4, 21039.0], [98.5, 21040.0], [98.6, 21041.0], [98.7, 21042.0], [98.8, 21042.0], [98.9, 21043.0], [99.0, 21044.0], [99.1, 21044.0], [99.2, 21048.0], [99.3, 21049.0], [99.4, 21053.0], [99.5, 21053.0], [99.6, 21056.0], [99.7, 21058.0], [99.8, 21060.0], [99.9, 21062.0]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[0.0, 10.0], [0.1, 14.0], [0.2, 15.0], [0.3, 15.0], [0.4, 16.0], [0.5, 16.0], [0.6, 17.0], [0.7, 17.0], [0.8, 17.0], [0.9, 18.0], [1.0, 18.0], [1.1, 18.0], [1.2, 18.0], [1.3, 18.0], [1.4, 19.0], [1.5, 19.0], [1.6, 19.0], [1.7, 19.0], [1.8, 19.0], [1.9, 19.0], [2.0, 19.0], [2.1, 20.0], [2.2, 20.0], [2.3, 20.0], [2.4, 20.0], [2.5, 20.0], [2.6, 20.0], [2.7, 20.0], [2.8, 20.0], [2.9, 20.0], [3.0, 21.0], [3.1, 21.0], [3.2, 21.0], [3.3, 21.0], [3.4, 21.0], [3.5, 21.0], [3.6, 21.0], [3.7, 21.0], [3.8, 21.0], [3.9, 21.0], [4.0, 21.0], [4.1, 22.0], [4.2, 22.0], [4.3, 22.0], [4.4, 22.0], [4.5, 22.0], [4.6, 22.0], [4.7, 22.0], [4.8, 22.0], [4.9, 22.0], [5.0, 22.0], [5.1, 22.0], [5.2, 22.0], [5.3, 23.0], [5.4, 23.0], [5.5, 23.0], [5.6, 23.0], [5.7, 23.0], [5.8, 23.0], [5.9, 23.0], [6.0, 23.0], [6.1, 23.0], [6.2, 23.0], [6.3, 23.0], [6.4, 23.0], [6.5, 23.0], [6.6, 24.0], [6.7, 24.0], [6.8, 24.0], [6.9, 24.0], [7.0, 24.0], [7.1, 24.0], [7.2, 24.0], [7.3, 24.0], [7.4, 24.0], [7.5, 24.0], [7.6, 24.0], [7.7, 24.0], [7.8, 24.0], [7.9, 24.0], [8.0, 24.0], [8.1, 25.0], [8.2, 25.0], [8.3, 25.0], [8.4, 25.0], [8.5, 25.0], [8.6, 25.0], [8.7, 25.0], [8.8, 25.0], [8.9, 25.0], [9.0, 25.0], [9.1, 25.0], [9.2, 25.0], [9.3, 25.0], [9.4, 25.0], [9.5, 26.0], [9.6, 26.0], [9.7, 26.0], [9.8, 26.0], [9.9, 26.0], [10.0, 26.0], [10.1, 26.0], [10.2, 26.0], [10.3, 26.0], [10.4, 26.0], [10.5, 26.0], [10.6, 26.0], [10.7, 26.0], [10.8, 26.0], [10.9, 26.0], [11.0, 26.0], [11.1, 27.0], [11.2, 27.0], [11.3, 27.0], [11.4, 27.0], [11.5, 27.0], [11.6, 27.0], [11.7, 27.0], [11.8, 27.0], [11.9, 27.0], [12.0, 27.0], [12.1, 27.0], [12.2, 27.0], [12.3, 27.0], [12.4, 27.0], [12.5, 27.0], [12.6, 27.0], [12.7, 27.0], [12.8, 27.0], [12.9, 28.0], [13.0, 28.0], [13.1, 28.0], [13.2, 28.0], [13.3, 28.0], [13.4, 28.0], [13.5, 28.0], [13.6, 28.0], [13.7, 28.0], [13.8, 28.0], [13.9, 28.0], [14.0, 28.0], [14.1, 28.0], [14.2, 28.0], [14.3, 28.0], [14.4, 28.0], [14.5, 28.0], [14.6, 28.0], [14.7, 29.0], [14.8, 29.0], [14.9, 29.0], [15.0, 29.0], [15.1, 29.0], [15.2, 29.0], [15.3, 29.0], [15.4, 29.0], [15.5, 29.0], [15.6, 29.0], [15.7, 29.0], [15.8, 29.0], [15.9, 29.0], [16.0, 29.0], [16.1, 29.0], [16.2, 29.0], [16.3, 30.0], [16.4, 30.0], [16.5, 30.0], [16.6, 30.0], [16.7, 30.0], [16.8, 30.0], [16.9, 30.0], [17.0, 30.0], [17.1, 30.0], [17.2, 30.0], [17.3, 30.0], [17.4, 30.0], [17.5, 30.0], [17.6, 30.0], [17.7, 30.0], [17.8, 30.0], [17.9, 30.0], [18.0, 30.0], [18.1, 30.0], [18.2, 30.0], [18.3, 31.0], [18.4, 31.0], [18.5, 31.0], [18.6, 31.0], [18.7, 31.0], [18.8, 31.0], [18.9, 31.0], [19.0, 31.0], [19.1, 31.0], [19.2, 31.0], [19.3, 31.0], [19.4, 31.0], [19.5, 31.0], [19.6, 31.0], [19.7, 31.0], [19.8, 31.0], [19.9, 31.0], [20.0, 31.0], [20.1, 32.0], [20.2, 32.0], [20.3, 32.0], [20.4, 32.0], [20.5, 32.0], [20.6, 32.0], [20.7, 32.0], [20.8, 32.0], [20.9, 32.0], [21.0, 32.0], [21.1, 32.0], [21.2, 32.0], [21.3, 32.0], [21.4, 32.0], [21.5, 32.0], [21.6, 32.0], [21.7, 32.0], [21.8, 32.0], [21.9, 32.0], [22.0, 33.0], [22.1, 33.0], [22.2, 33.0], [22.3, 33.0], [22.4, 33.0], [22.5, 33.0], [22.6, 33.0], [22.7, 33.0], [22.8, 33.0], [22.9, 33.0], [23.0, 33.0], [23.1, 33.0], [23.2, 33.0], [23.3, 33.0], [23.4, 33.0], [23.5, 33.0], [23.6, 33.0], [23.7, 33.0], [23.8, 33.0], [23.9, 34.0], [24.0, 34.0], [24.1, 34.0], [24.2, 34.0], [24.3, 34.0], [24.4, 34.0], [24.5, 34.0], [24.6, 34.0], [24.7, 34.0], [24.8, 34.0], [24.9, 34.0], [25.0, 34.0], [25.1, 34.0], [25.2, 34.0], [25.3, 34.0], [25.4, 34.0], [25.5, 34.0], [25.6, 34.0], [25.7, 34.0], [25.8, 35.0], [25.9, 35.0], [26.0, 35.0], [26.1, 35.0], [26.2, 35.0], [26.3, 35.0], [26.4, 35.0], [26.5, 35.0], [26.6, 35.0], [26.7, 35.0], [26.8, 35.0], [26.9, 35.0], [27.0, 35.0], [27.1, 35.0], [27.2, 35.0], [27.3, 35.0], [27.4, 35.0], [27.5, 35.0], [27.6, 35.0], [27.7, 36.0], [27.8, 36.0], [27.9, 36.0], [28.0, 36.0], [28.1, 36.0], [28.2, 36.0], [28.3, 36.0], [28.4, 36.0], [28.5, 36.0], [28.6, 36.0], [28.7, 36.0], [28.8, 36.0], [28.9, 36.0], [29.0, 36.0], [29.1, 36.0], [29.2, 36.0], [29.3, 36.0], [29.4, 36.0], [29.5, 37.0], [29.6, 37.0], [29.7, 37.0], [29.8, 37.0], [29.9, 37.0], [30.0, 37.0], [30.1, 37.0], [30.2, 37.0], [30.3, 37.0], [30.4, 37.0], [30.5, 37.0], [30.6, 37.0], [30.7, 37.0], [30.8, 37.0], [30.9, 37.0], [31.0, 37.0], [31.1, 37.0], [31.2, 37.0], [31.3, 37.0], [31.4, 38.0], [31.5, 38.0], [31.6, 38.0], [31.7, 38.0], [31.8, 38.0], [31.9, 38.0], [32.0, 38.0], [32.1, 38.0], [32.2, 38.0], [32.3, 38.0], [32.4, 38.0], [32.5, 38.0], [32.6, 38.0], [32.7, 38.0], [32.8, 38.0], [32.9, 38.0], [33.0, 38.0], [33.1, 38.0], [33.2, 39.0], [33.3, 39.0], [33.4, 39.0], [33.5, 39.0], [33.6, 39.0], [33.7, 39.0], [33.8, 39.0], [33.9, 39.0], [34.0, 39.0], [34.1, 39.0], [34.2, 39.0], [34.3, 39.0], [34.4, 39.0], [34.5, 39.0], [34.6, 39.0], [34.7, 39.0], [34.8, 39.0], [34.9, 40.0], [35.0, 40.0], [35.1, 40.0], [35.2, 40.0], [35.3, 40.0], [35.4, 40.0], [35.5, 40.0], [35.6, 40.0], [35.7, 40.0], [35.8, 40.0], [35.9, 40.0], [36.0, 40.0], [36.1, 40.0], [36.2, 40.0], [36.3, 40.0], [36.4, 40.0], [36.5, 40.0], [36.6, 41.0], [36.7, 41.0], [36.8, 41.0], [36.9, 41.0], [37.0, 41.0], [37.1, 41.0], [37.2, 41.0], [37.3, 41.0], [37.4, 41.0], [37.5, 41.0], [37.6, 41.0], [37.7, 41.0], [37.8, 41.0], [37.9, 41.0], [38.0, 41.0], [38.1, 41.0], [38.2, 41.0], [38.3, 42.0], [38.4, 42.0], [38.5, 42.0], [38.6, 42.0], [38.7, 42.0], [38.8, 42.0], [38.9, 42.0], [39.0, 42.0], [39.1, 42.0], [39.2, 42.0], [39.3, 42.0], [39.4, 42.0], [39.5, 42.0], [39.6, 42.0], [39.7, 42.0], [39.8, 42.0], [39.9, 42.0], [40.0, 43.0], [40.1, 43.0], [40.2, 43.0], [40.3, 43.0], [40.4, 43.0], [40.5, 43.0], [40.6, 43.0], [40.7, 43.0], [40.8, 43.0], [40.9, 43.0], [41.0, 43.0], [41.1, 43.0], [41.2, 43.0], [41.3, 43.0], [41.4, 43.0], [41.5, 44.0], [41.6, 44.0], [41.7, 44.0], [41.8, 44.0], [41.9, 44.0], [42.0, 44.0], [42.1, 44.0], [42.2, 44.0], [42.3, 44.0], [42.4, 44.0], [42.5, 44.0], [42.6, 44.0], [42.7, 44.0], [42.8, 44.0], [42.9, 44.0], [43.0, 45.0], [43.1, 45.0], [43.2, 45.0], [43.3, 45.0], [43.4, 45.0], [43.5, 45.0], [43.6, 45.0], [43.7, 45.0], [43.8, 45.0], [43.9, 45.0], [44.0, 45.0], [44.1, 45.0], [44.2, 45.0], [44.3, 45.0], [44.4, 45.0], [44.5, 46.0], [44.6, 46.0], [44.7, 46.0], [44.8, 46.0], [44.9, 46.0], [45.0, 46.0], [45.1, 46.0], [45.2, 46.0], [45.3, 46.0], [45.4, 46.0], [45.5, 46.0], [45.6, 46.0], [45.7, 46.0], [45.8, 46.0], [45.9, 46.0], [46.0, 47.0], [46.1, 47.0], [46.2, 47.0], [46.3, 47.0], [46.4, 47.0], [46.5, 47.0], [46.6, 47.0], [46.7, 47.0], [46.8, 47.0], [46.9, 47.0], [47.0, 47.0], [47.1, 47.0], [47.2, 47.0], [47.3, 47.0], [47.4, 48.0], [47.5, 48.0], [47.6, 48.0], [47.7, 48.0], [47.8, 48.0], [47.9, 48.0], [48.0, 48.0], [48.1, 48.0], [48.2, 48.0], [48.3, 48.0], [48.4, 48.0], [48.5, 48.0], [48.6, 48.0], [48.7, 49.0], [48.8, 49.0], [48.9, 49.0], [49.0, 49.0], [49.1, 49.0], [49.2, 49.0], [49.3, 49.0], [49.4, 49.0], [49.5, 49.0], [49.6, 49.0], [49.7, 49.0], [49.8, 49.0], [49.9, 49.0], [50.0, 50.0], [50.1, 50.0], [50.2, 50.0], [50.3, 50.0], [50.4, 50.0], [50.5, 50.0], [50.6, 50.0], [50.7, 50.0], [50.8, 50.0], [50.9, 50.0], [51.0, 50.0], [51.1, 50.0], [51.2, 50.0], [51.3, 51.0], [51.4, 51.0], [51.5, 51.0], [51.6, 51.0], [51.7, 51.0], [51.8, 51.0], [51.9, 51.0], [52.0, 51.0], [52.1, 51.0], [52.2, 51.0], [52.3, 51.0], [52.4, 51.0], [52.5, 52.0], [52.6, 52.0], [52.7, 52.0], [52.8, 52.0], [52.9, 52.0], [53.0, 52.0], [53.1, 52.0], [53.2, 52.0], [53.3, 52.0], [53.4, 52.0], [53.5, 53.0], [53.6, 53.0], [53.7, 53.0], [53.8, 53.0], [53.9, 53.0], [54.0, 53.0], [54.1, 53.0], [54.2, 53.0], [54.3, 53.0], [54.4, 53.0], [54.5, 54.0], [54.6, 54.0], [54.7, 54.0], [54.8, 54.0], [54.9, 54.0], [55.0, 54.0], [55.1, 54.0], [55.2, 54.0], [55.3, 54.0], [55.4, 54.0], [55.5, 55.0], [55.6, 55.0], [55.7, 55.0], [55.8, 55.0], [55.9, 55.0], [56.0, 55.0], [56.1, 55.0], [56.2, 55.0], [56.3, 55.0], [56.4, 55.0], [56.5, 56.0], [56.6, 56.0], [56.7, 56.0], [56.8, 56.0], [56.9, 56.0], [57.0, 56.0], [57.1, 56.0], [57.2, 56.0], [57.3, 56.0], [57.4, 57.0], [57.5, 57.0], [57.6, 57.0], [57.7, 57.0], [57.8, 57.0], [57.9, 57.0], [58.0, 57.0], [58.1, 57.0], [58.2, 57.0], [58.3, 57.0], [58.4, 58.0], [58.5, 58.0], [58.6, 58.0], [58.7, 58.0], [58.8, 58.0], [58.9, 58.0], [59.0, 58.0], [59.1, 58.0], [59.2, 58.0], [59.3, 59.0], [59.4, 59.0], [59.5, 59.0], [59.6, 59.0], [59.7, 59.0], [59.8, 59.0], [59.9, 59.0], [60.0, 59.0], [60.1, 60.0], [60.2, 60.0], [60.3, 60.0], [60.4, 60.0], [60.5, 60.0], [60.6, 60.0], [60.7, 60.0], [60.8, 60.0], [60.9, 60.0], [61.0, 61.0], [61.1, 61.0], [61.2, 61.0], [61.3, 61.0], [61.4, 61.0], [61.5, 61.0], [61.6, 61.0], [61.7, 61.0], [61.8, 62.0], [61.9, 62.0], [62.0, 62.0], [62.1, 62.0], [62.2, 62.0], [62.3, 62.0], [62.4, 62.0], [62.5, 62.0], [62.6, 63.0], [62.7, 63.0], [62.8, 63.0], [62.9, 63.0], [63.0, 63.0], [63.1, 63.0], [63.2, 63.0], [63.3, 64.0], [63.4, 64.0], [63.5, 64.0], [63.6, 64.0], [63.7, 64.0], [63.8, 64.0], [63.9, 64.0], [64.0, 65.0], [64.1, 65.0], [64.2, 65.0], [64.3, 65.0], [64.4, 65.0], [64.5, 65.0], [64.6, 66.0], [64.7, 66.0], [64.8, 66.0], [64.9, 66.0], [65.0, 66.0], [65.1, 66.0], [65.2, 67.0], [65.3, 67.0], [65.4, 67.0], [65.5, 67.0], [65.6, 67.0], [65.7, 67.0], [65.8, 67.0], [65.9, 68.0], [66.0, 68.0], [66.1, 68.0], [66.2, 68.0], [66.3, 68.0], [66.4, 69.0], [66.5, 69.0], [66.6, 69.0], [66.7, 69.0], [66.8, 69.0], [66.9, 70.0], [67.0, 70.0], [67.1, 70.0], [67.2, 70.0], [67.3, 70.0], [67.4, 71.0], [67.5, 71.0], [67.6, 71.0], [67.7, 71.0], [67.8, 72.0], [67.9, 72.0], [68.0, 72.0], [68.1, 72.0], [68.2, 72.0], [68.3, 73.0], [68.4, 73.0], [68.5, 73.0], [68.6, 73.0], [68.7, 73.0], [68.8, 74.0], [68.9, 74.0], [69.0, 74.0], [69.1, 74.0], [69.2, 75.0], [69.3, 75.0], [69.4, 75.0], [69.5, 75.0], [69.6, 75.0], [69.7, 76.0], [69.8, 76.0], [69.9, 76.0], [70.0, 76.0], [70.1, 77.0], [70.2, 77.0], [70.3, 77.0], [70.4, 77.0], [70.5, 78.0], [70.6, 78.0], [70.7, 78.0], [70.8, 78.0], [70.9, 79.0], [71.0, 79.0], [71.1, 79.0], [71.2, 79.0], [71.3, 80.0], [71.4, 80.0], [71.5, 80.0], [71.6, 80.0], [71.7, 81.0], [71.8, 81.0], [71.9, 81.0], [72.0, 82.0], [72.1, 82.0], [72.2, 82.0], [72.3, 82.0], [72.4, 83.0], [72.5, 83.0], [72.6, 83.0], [72.7, 84.0], [72.8, 84.0], [72.9, 84.0], [73.0, 84.0], [73.1, 85.0], [73.2, 85.0], [73.3, 85.0], [73.4, 86.0], [73.5, 86.0], [73.6, 86.0], [73.7, 87.0], [73.8, 87.0], [73.9, 87.0], [74.0, 88.0], [74.1, 88.0], [74.2, 88.0], [74.3, 89.0], [74.4, 89.0], [74.5, 89.0], [74.6, 90.0], [74.7, 90.0], [74.8, 90.0], [74.9, 91.0], [75.0, 91.0], [75.1, 91.0], [75.2, 92.0], [75.3, 92.0], [75.4, 92.0], [75.5, 93.0], [75.6, 93.0], [75.7, 93.0], [75.8, 94.0], [75.9, 94.0], [76.0, 94.0], [76.1, 95.0], [76.2, 95.0], [76.3, 96.0], [76.4, 96.0], [76.5, 96.0], [76.6, 97.0], [76.7, 97.0], [76.8, 97.0], [76.9, 98.0], [77.0, 98.0], [77.1, 98.0], [77.2, 99.0], [77.3, 99.0], [77.4, 100.0], [77.5, 100.0], [77.6, 101.0], [77.7, 101.0], [77.8, 101.0], [77.9, 102.0], [78.0, 102.0], [78.1, 103.0], [78.2, 103.0], [78.3, 103.0], [78.4, 104.0], [78.5, 104.0], [78.6, 104.0], [78.7, 105.0], [78.8, 105.0], [78.9, 105.0], [79.0, 106.0], [79.1, 106.0], [79.2, 106.0], [79.3, 107.0], [79.4, 107.0], [79.5, 108.0], [79.6, 108.0], [79.7, 108.0], [79.8, 109.0], [79.9, 109.0], [80.0, 110.0], [80.1, 110.0], [80.2, 110.0], [80.3, 111.0], [80.4, 111.0], [80.5, 111.0], [80.6, 112.0], [80.7, 112.0], [80.8, 112.0], [80.9, 113.0], [81.0, 113.0], [81.1, 114.0], [81.2, 114.0], [81.3, 114.0], [81.4, 115.0], [81.5, 115.0], [81.6, 116.0], [81.7, 116.0], [81.8, 116.0], [81.9, 117.0], [82.0, 117.0], [82.1, 118.0], [82.2, 118.0], [82.3, 118.0], [82.4, 119.0], [82.5, 119.0], [82.6, 119.0], [82.7, 120.0], [82.8, 120.0], [82.9, 121.0], [83.0, 121.0], [83.1, 121.0], [83.2, 122.0], [83.3, 122.0], [83.4, 122.0], [83.5, 123.0], [83.6, 123.0], [83.7, 124.0], [83.8, 124.0], [83.9, 124.0], [84.0, 125.0], [84.1, 125.0], [84.2, 126.0], [84.3, 126.0], [84.4, 126.0], [84.5, 127.0], [84.6, 127.0], [84.7, 128.0], [84.8, 128.0], [84.9, 129.0], [85.0, 129.0], [85.1, 130.0], [85.2, 130.0], [85.3, 131.0], [85.4, 131.0], [85.5, 132.0], [85.6, 132.0], [85.7, 133.0], [85.8, 134.0], [85.9, 134.0], [86.0, 135.0], [86.1, 135.0], [86.2, 136.0], [86.3, 136.0], [86.4, 137.0], [86.5, 137.0], [86.6, 138.0], [86.7, 138.0], [86.8, 139.0], [86.9, 139.0], [87.0, 140.0], [87.1, 140.0], [87.2, 141.0], [87.3, 141.0], [87.4, 142.0], [87.5, 142.0], [87.6, 143.0], [87.7, 143.0], [87.8, 144.0], [87.9, 145.0], [88.0, 145.0], [88.1, 146.0], [88.2, 146.0], [88.3, 147.0], [88.4, 147.0], [88.5, 148.0], [88.6, 149.0], [88.7, 149.0], [88.8, 150.0], [88.9, 150.0], [89.0, 151.0], [89.1, 152.0], [89.2, 152.0], [89.3, 153.0], [89.4, 153.0], [89.5, 154.0], [89.6, 155.0], [89.7, 156.0], [89.8, 156.0], [89.9, 157.0], [90.0, 158.0], [90.1, 158.0], [90.2, 159.0], [90.3, 159.0], [90.4, 160.0], [90.5, 160.0], [90.6, 161.0], [90.7, 162.0], [90.8, 162.0], [90.9, 163.0], [91.0, 164.0], [91.1, 164.0], [91.2, 165.0], [91.3, 166.0], [91.4, 167.0], [91.5, 167.0], [91.6, 168.0], [91.7, 169.0], [91.8, 171.0], [91.9, 172.0], [92.0, 173.0], [92.1, 173.0], [92.2, 174.0], [92.3, 175.0], [92.4, 176.0], [92.5, 177.0], [92.6, 178.0], [92.7, 180.0], [92.8, 181.0], [92.9, 182.0], [93.0, 183.0], [93.1, 184.0], [93.2, 185.0], [93.3, 186.0], [93.4, 187.0], [93.5, 189.0], [93.6, 190.0], [93.7, 192.0], [93.8, 193.0], [93.9, 194.0], [94.0, 196.0], [94.1, 198.0], [94.2, 199.0], [94.3, 200.0], [94.4, 202.0], [94.5, 204.0], [94.6, 206.0], [94.7, 207.0], [94.8, 209.0], [94.9, 211.0], [95.0, 213.0], [95.1, 215.0], [95.2, 217.0], [95.3, 219.0], [95.4, 221.0], [95.5, 223.0], [95.6, 224.0], [95.7, 226.0], [95.8, 229.0], [95.9, 230.0], [96.0, 233.0], [96.1, 234.0], [96.2, 236.0], [96.3, 238.0], [96.4, 240.0], [96.5, 242.0], [96.6, 244.0], [96.7, 246.0], [96.8, 249.0], [96.9, 252.0], [97.0, 255.0], [97.1, 258.0], [97.2, 261.0], [97.3, 266.0], [97.4, 269.0], [97.5, 273.0], [97.6, 277.0], [97.7, 283.0], [97.8, 290.0], [97.9, 295.0], [98.0, 301.0], [98.1, 309.0], [98.2, 319.0], [98.3, 325.0], [98.4, 334.0], [98.5, 345.0], [98.6, 357.0], [98.7, 366.0], [98.8, 381.0], [98.9, 396.0], [99.0, 405.0], [99.1, 427.0], [99.2, 459.0], [99.3, 478.0], [99.4, 501.0], [99.5, 521.0], [99.6, 560.0], [99.7, 635.0], [99.8, 716.0], [99.9, 804.0]], "isOverall": false, "label": "查看自己的比赛参赛详情", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 92803.0, "series": [{"data": [[600.0, 37.0], [700.0, 35.0], [2900.0, 1.0], [200.0, 496.0], [800.0, 23.0], [900.0, 17.0], [1000.0, 10.0], [1100.0, 8.0], [300.0, 244.0], [1200.0, 4.0], [1300.0, 9.0], [21000.0, 54.0], [1400.0, 7.0], [1500.0, 2.0], [100.0, 860.0], [400.0, 123.0], [1600.0, 1.0], [1700.0, 2.0], [1800.0, 1.0], [500.0, 65.0], [2000.0, 1.0]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[0.0, 92803.0], [600.0, 144.0], [700.0, 141.0], [800.0, 54.0], [900.0, 16.0], [1000.0, 19.0], [1100.0, 12.0], [1200.0, 7.0], [1300.0, 3.0], [1400.0, 4.0], [1500.0, 1.0], [100.0, 20271.0], [1600.0, 1.0], [1700.0, 1.0], [1900.0, 1.0], [2000.0, 2.0], [2300.0, 1.0], [200.0, 4504.0], [3600.0, 1.0], [4200.0, 1.0], [4100.0, 1.0], [300.0, 1170.0], [400.0, 518.0], [6400.0, 1.0], [500.0, 323.0]], "isOverall": false, "label": "查看自己的比赛参赛详情", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 19.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 121004.0, "series": [{"data": [[0.0, 121004.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 923.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 19.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 54.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 33.67575731910457, "minX": 1.63145922E12, "maxY": 133.50181841383224, "series": [{"data": [[1.63145934E12, 33.67575731910457], [1.63145928E12, 38.388899740491695], [1.6314594E12, 133.50181841383224], [1.63145922E12, 61.44024637143936]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6314594E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.0, "maxY": 21045.0, "series": [{"data": [[4.0, 221.0], [5.0, 186.5], [17.0, 1013.0], [18.0, 164.0], [19.0, 419.7666666666668], [20.0, 170.86956521739128], [21.0, 172.36363636363635], [22.0, 170.96666666666667], [23.0, 174.53731343283582], [24.0, 186.7323943661972], [25.0, 509.9076923076922], [26.0, 190.25000000000003], [27.0, 181.08771929824564], [28.0, 204.95714285714283], [29.0, 223.61764705882356], [30.0, 217.22857142857137], [31.0, 221.8648648648649], [33.0, 216.9433962264151], [32.0, 200.57894736842104], [34.0, 228.53448275862067], [35.0, 213.05263157894746], [36.0, 240.6666666666667], [37.0, 247.92857142857133], [38.0, 290.1136363636365], [39.0, 240.79310344827587], [40.0, 272.9090909090909], [41.0, 341.22222222222223], [42.0, 286.11111111111103], [43.0, 1749.6785714285718], [44.0, 2391.5333333333338], [45.0, 1446.7222222222224], [47.0, 5066.692307692308], [46.0, 4703.285714285714], [48.0, 4135.090909090909], [49.0, 376.1428571428571], [50.0, 1869.142857142857], [51.0, 1152.541666666667], [53.0, 1072.04], [52.0, 1129.1666666666667], [54.0, 1933.68], [55.0, 1489.1818181818185], [56.0, 934.1724137931035], [57.0, 1350.157894736842], [58.0, 342.3076923076923], [59.0, 273.0909090909091], [61.0, 233.60000000000002], [60.0, 210.33333333333334], [63.0, 241.5], [62.0, 310.6], [64.0, 390.0], [65.0, 467.0], [66.0, 456.4285714285714], [67.0, 395.57142857142856], [68.0, 297.2857142857143], [69.0, 283.57142857142856], [70.0, 413.2857142857143], [71.0, 281.2307692307693], [73.0, 351.125], [74.0, 287.5], [75.0, 312.5], [72.0, 438.25], [76.0, 451.1333333333334], [77.0, 367.8421052631579], [78.0, 333.0], [79.0, 1622.5294117647059], [80.0, 2278.0], [81.0, 375.3333333333333], [82.0, 344.71428571428567], [83.0, 400.3999999999999], [87.0, 643.0], [86.0, 622.0], [85.0, 545.0], [84.0, 554.3333333333334], [88.0, 571.3333333333334], [89.0, 672.0], [90.0, 456.85714285714283], [91.0, 3945.833333333333], [92.0, 399.6], [93.0, 596.2222222222222], [94.0, 376.0], [95.0, 427.4], [96.0, 391.0], [98.0, 558.6666666666666], [99.0, 417.0], [97.0, 14331.666666666666], [100.0, 445.625], [101.0, 621.1666666666667], [102.0, 685.0], [103.0, 2441.1], [104.0, 699.0], [105.0, 584.25], [106.0, 3806.0], [107.0, 336.0], [111.0, 21045.0], [117.0, 4353.714285714285], [119.0, 1146.0], [123.0, 11311.5], [127.0, 3162.636363636364], [128.0, 879.75], [129.0, 746.25], [130.0, 7281.666666666667], [132.0, 412.5], [135.0, 559.6666666666666], [134.0, 10702.5], [131.0, 319.0], [138.0, 4014.333333333333], [139.0, 734.0], [140.0, 464.75], [143.0, 345.5], [137.0, 7223.0], [136.0, 498.0], [146.0, 5722.75], [147.0, 736.0], [149.0, 672.6666666666666], [150.0, 811.0], [151.0, 371.0], [145.0, 401.0], [152.0, 12884.4], [154.0, 7463.0], [155.0, 822.8], [156.0, 584.1666666666666], [157.0, 404.75], [158.0, 2355.363636363636], [159.0, 457.5], [153.0, 415.6666666666667], [160.0, 433.0], [161.0, 437.5], [162.0, 397.5], [163.0, 5560.5], [165.0, 5581.0], [167.0, 569.75], [164.0, 21025.0], [168.0, 442.8], [170.0, 453.2], [173.0, 462.2857142857143], [174.0, 3697.1428571428573], [175.0, 501.4], [172.0, 673.25], [171.0, 10674.5], [169.0, 354.0], [177.0, 4578.4], [176.0, 4703.4]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[54.31300000000002, 861.2175]], "isOverall": false, "label": "登录请求-Aggregated", "isController": false}, {"data": [[2.0, 16.0], [3.0, 16.444444444444443], [4.0, 15.4], [5.0, 20.25], [6.0, 20.254545454545458], [7.0, 18.25], [8.0, 22.0], [9.0, 21.33333333333333], [10.0, 21.03125], [11.0, 28.25], [12.0, 25.428571428571427], [14.0, 29.0], [15.0, 205.34782608695653], [16.0, 35.52631578947368], [17.0, 30.66666666666667], [18.0, 29.01754385964913], [19.0, 27.48709315375985], [20.0, 30.867291178766582], [21.0, 34.526032315978526], [22.0, 33.23011604868402], [23.0, 36.11821601289636], [24.0, 37.901852297329796], [25.0, 41.014634146341585], [26.0, 42.06498404409639], [27.0, 37.232302581139784], [28.0, 45.06415191172686], [29.0, 49.539999999999964], [30.0, 48.23931203931203], [31.0, 52.34880163182055], [32.0, 50.085009140767845], [33.0, 51.05399061032869], [34.0, 50.876077040040606], [35.0, 49.79818128483426], [36.0, 55.263954588457935], [37.0, 53.21196924105657], [38.0, 60.86260733801713], [39.0, 55.58337889557131], [40.0, 57.02735562310034], [41.0, 73.94136125654451], [42.0, 49.64423076923076], [43.0, 58.254531722054374], [44.0, 67.24763292061172], [45.0, 70.86419753086425], [46.0, 67.95094936708863], [47.0, 55.495522388059726], [48.0, 72.14838709677427], [49.0, 73.29243937232515], [50.0, 67.65957446808503], [51.0, 68.3741987179486], [52.0, 66.54473872584106], [53.0, 62.13077525450275], [54.0, 70.13815402704293], [55.0, 58.58555358200119], [56.0, 55.170965806838545], [57.0, 58.68582375478924], [58.0, 88.18801652892559], [59.0, 66.57230769230758], [60.0, 66.26987060998155], [61.0, 82.04979253112036], [62.0, 70.41372141372138], [63.0, 87.91089108910894], [64.0, 69.36421725239616], [65.0, 114.81489361702126], [66.0, 79.22027290448348], [67.0, 97.55581395348837], [68.0, 79.66041666666672], [69.0, 108.33197556008149], [70.0, 94.17690058479529], [71.0, 79.5515695067265], [72.0, 99.42145593869742], [73.0, 85.32395566922415], [74.0, 111.95935960591135], [75.0, 105.90270270270263], [76.0, 87.65816326530613], [77.0, 88.86662492172802], [78.0, 102.81948955916471], [79.0, 129.35109983079525], [80.0, 106.84615384615387], [81.0, 126.02713178294572], [82.0, 165.84507042253514], [83.0, 160.1026392961876], [84.0, 147.8566243194192], [85.0, 162.30515463917524], [86.0, 190.25837320574152], [87.0, 129.82258064516128], [88.0, 205.85714285714292], [89.0, 201.93452380952377], [90.0, 211.06666666666683], [91.0, 129.0808823529412], [92.0, 120.39659367396594], [93.0, 170.16467065868272], [94.0, 129.95652173913038], [95.0, 126.59316770186336], [96.0, 110.31679389312966], [97.0, 193.97072072072066], [98.0, 250.84868421052633], [99.0, 156.16384180790968], [100.0, 170.1261467889908], [101.0, 161.5126811594204], [102.0, 160.29596412556066], [103.0, 133.60270880361162], [104.0, 131.87651821862337], [105.0, 108.6024844720497], [106.0, 103.45971563981051], [107.0, 128.0405405405405], [109.0, 310.4179104477612], [110.0, 288.1799999999999], [111.0, 198.31578947368413], [108.0, 115.5], [112.0, 163.56249999999997], [115.0, 135.8888888888889], [114.0, 81.59047619047618], [113.0, 121.25], [116.0, 248.94117647058826], [117.0, 261.8153846153848], [118.0, 147.94017094017096], [119.0, 294.5], [123.0, 239.1428571428571], [122.0, 137.80769230769232], [121.0, 125.83333333333331], [120.0, 91.5], [124.0, 721.3333333333333], [125.0, 292.4891304347827], [126.0, 256.5], [127.0, 183.19796954314722], [128.0, 127.94444444444437], [129.0, 157.04166666666663], [130.0, 173.1781609195403], [131.0, 270.9393939393939], [132.0, 142.19834710743802], [134.0, 198.0324324324325], [133.0, 364.12195121951214], [135.0, 146.28571428571436], [136.0, 184.051094890511], [137.0, 162.1586826347305], [138.0, 160.54666666666668], [139.0, 145.19277108433738], [140.0, 177.21917808219177], [141.0, 161.97297297297297], [142.0, 157.22580645161293], [143.0, 119.53982300884958], [145.0, 224.9252873563219], [146.0, 248.24324324324326], [147.0, 166.09302325581396], [149.0, 205.08823529411768], [148.0, 310.47692307692313], [150.0, 468.94594594594594], [151.0, 130.45], [144.0, 112.60465116279069], [152.0, 206.23897058823542], [153.0, 255.91596638655454], [154.0, 252.8316831683168], [155.0, 148.95412844036701], [156.0, 172.2207792207792], [157.0, 149.6453333333334], [158.0, 138.18874773139729], [159.0, 180.3070866141733], [160.0, 195.39393939393946], [161.0, 160.565934065934], [162.0, 182.00425531914888], [163.0, 187.70503597122308], [164.0, 188.572864321608], [165.0, 205.54356846473036], [167.0, 160.70000000000002], [166.0, 296.4385964912283], [168.0, 162.98192771084337], [169.0, 130.578073089701], [170.0, 134.5957446808511], [171.0, 156.66666666666666], [173.0, 187.9004815409309], [172.0, 163.439024390244], [174.0, 174.26315789473696], [175.0, 212.2868217054264], [176.0, 159.30206378986875], [177.0, 185.26751592356692], [178.0, 261.46938775510205], [1.0, 14.0]], "isOverall": false, "label": "查看自己的比赛参赛详情", "isController": false}, {"data": [[55.891308333332894, 77.29807500000072]], "isOverall": false, "label": "查看自己的比赛参赛详情-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 178.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 74730.33333333333, "minX": 1.63145922E12, "maxY": 311357.7, "series": [{"data": [[1.63145934E12, 307680.3], [1.63145928E12, 311357.7], [1.6314594E12, 137173.98333333334], [1.63145922E12, 305535.5833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63145934E12, 169221.01666666666], [1.63145928E12, 171193.4], [1.6314594E12, 74730.33333333333], [1.63145922E12, 167402.38333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6314594E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 51.93384990673024, "minX": 1.63145922E12, "maxY": 3287.7377777777792, "series": [{"data": [[1.63145934E12, 221.08506944444434], [1.63145928E12, 279.79900332225924], [1.6314594E12, 3287.7377777777792], [1.63145922E12, 1150.6030150753766]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[1.63145934E12, 51.93384990673024], [1.63145928E12, 59.47120760607315], [1.6314594E12, 167.14319005696498], [1.63145922E12, 80.89574147133924]], "isOverall": false, "label": "查看自己的比赛参赛详情", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6314594E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 51.636934997847604, "minX": 1.63145922E12, "maxY": 574.5644444444443, "series": [{"data": [[1.63145934E12, 220.50868055555543], [1.63145928E12, 244.1893687707641], [1.6314594E12, 574.5644444444443], [1.63145922E12, 303.3199329983255]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[1.63145934E12, 51.636934997847604], [1.63145928E12, 59.14372073222642], [1.6314594E12, 166.7421672708451], [1.63145922E12, 80.468583197958]], "isOverall": false, "label": "查看自己的比赛参赛详情", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6314594E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.63145922E12, "maxY": 2955.4222222222224, "series": [{"data": [[1.63145934E12, 56.36631944444446], [1.63145928E12, 107.95847176079738], [1.6314594E12, 2955.4222222222224], [1.63145922E12, 953.9949748743712]], "isOverall": false, "label": "登录请求", "isController": false}, {"data": [[1.63145934E12, 0.0], [1.63145928E12, 0.001248758336880944], [1.6314594E12, 0.26359399274987033], [1.63145922E12, 0.028631933163147178]], "isOverall": false, "label": "查看自己的比赛参赛详情", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6314594E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.63145922E12, "maxY": 6471.0, "series": [{"data": [[1.63145934E12, 1226.0], [1.63145928E12, 1374.0], [1.6314594E12, 6471.0], [1.63145922E12, 2336.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63145934E12, 112.0], [1.63145928E12, 147.0], [1.6314594E12, 298.0], [1.63145922E12, 80.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63145934E12, 334.0], [1.63145928E12, 324.0], [1.6314594E12, 789.5499999999993], [1.63145922E12, 223.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63145934E12, 175.0], [1.63145928E12, 207.0], [1.6314594E12, 421.0], [1.63145922E12, 146.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63145934E12, 12.0], [1.63145928E12, 10.0], [1.6314594E12, 11.0], [1.63145922E12, 12.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63145934E12, 46.0], [1.63145928E12, 53.0], [1.6314594E12, 133.0], [1.63145922E12, 41.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6314594E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 25.0, "minX": 4.0, "maxY": 21062.0, "series": [{"data": [[4.0, 211.0], [73.0, 379.0], [76.0, 62.0], [78.0, 485.5], [93.0, 182.0], [111.0, 358.0], [116.0, 770.5], [126.0, 439.5], [134.0, 295.0], [137.0, 348.0], [141.0, 553.0], [171.0, 129.0], [183.0, 241.0], [218.0, 465.0], [241.0, 166.0], [255.0, 188.0], [284.0, 54.0], [291.0, 210.0], [290.0, 46.0], [289.0, 94.0], [294.0, 25.0], [312.0, 272.5], [308.0, 87.0], [310.0, 58.0], [315.0, 44.0], [314.0, 150.5], [335.0, 57.0], [320.0, 96.0], [351.0, 40.0], [338.0, 48.0], [354.0, 42.0], [357.0, 66.0], [375.0, 85.0], [374.0, 44.0], [381.0, 202.0], [396.0, 39.0], [389.0, 66.0], [415.0, 216.0], [420.0, 169.0], [442.0, 32.0], [434.0, 56.0], [443.0, 96.5], [452.0, 48.0], [451.0, 42.0], [455.0, 192.0], [473.0, 152.0], [477.0, 43.0], [475.0, 38.0], [478.0, 52.0], [474.0, 147.0], [470.0, 51.0], [464.0, 46.0], [489.0, 77.0], [482.0, 104.0], [510.0, 114.0], [511.0, 149.0], [497.0, 43.0], [499.0, 51.0], [507.0, 35.0], [501.0, 67.0], [514.0, 164.0], [521.0, 41.0], [518.0, 42.0], [528.0, 25.0], [513.0, 78.0], [525.0, 56.0], [520.0, 61.0], [534.0, 58.0], [549.0, 32.0], [570.0, 149.0], [571.0, 108.0], [548.0, 126.0], [557.0, 49.0], [550.0, 131.0], [555.0, 38.0], [574.0, 36.0], [566.0, 171.0], [569.0, 29.0], [551.0, 43.0], [554.0, 32.0], [607.0, 40.0], [594.0, 85.0], [595.0, 113.5], [599.0, 34.0], [584.0, 36.0], [606.0, 36.5], [605.0, 76.0], [577.0, 26.0], [604.0, 31.0], [591.0, 32.0], [588.0, 55.0], [585.0, 31.0], [638.0, 47.0], [636.0, 42.0], [609.0, 30.0], [617.0, 32.0], [613.0, 31.0], [630.0, 49.0], [624.0, 208.5], [665.0, 117.0], [640.0, 52.0], [642.0, 39.0], [644.0, 43.0], [646.0, 29.0], [652.0, 29.0], [651.0, 64.0], [661.0, 45.0], [656.0, 39.0], [657.0, 35.0], [659.0, 66.0], [648.0, 44.0], [649.0, 25.0], [670.0, 35.0], [669.0, 33.0], [671.0, 33.0], [698.0, 38.0], [681.0, 34.0], [699.0, 36.0], [689.0, 38.0], [672.0, 35.0], [684.0, 40.0], [691.0, 72.0], [695.0, 54.0], [693.0, 31.0], [673.0, 47.0], [696.0, 169.5], [725.0, 104.0], [728.0, 44.0], [716.0, 35.0], [724.0, 40.0], [712.0, 41.0], [723.0, 37.0], [710.0, 30.0], [705.0, 48.0], [740.0, 110.0], [737.0, 58.0], [747.0, 59.0], [756.0, 40.0], [755.0, 44.0], [766.0, 30.0], [754.0, 30.0], [739.0, 95.0], [778.0, 90.0], [770.0, 41.0], [799.0, 43.0], [768.0, 43.0], [774.0, 45.0], [787.0, 43.0], [776.0, 42.0], [818.0, 35.0], [822.0, 27.0], [801.0, 57.0], [824.0, 57.0], [800.0, 40.5], [806.0, 142.0], [814.0, 86.0], [861.0, 48.0], [856.0, 136.0], [837.0, 104.0], [864.0, 44.0], [882.0, 34.0], [884.0, 134.5], [899.0, 65.0], [906.0, 99.0], [923.0, 39.0], [898.0, 44.0], [957.0, 37.0], [939.0, 78.0], [952.0, 33.0], [970.0, 75.0], [961.0, 126.0], [967.0, 139.0], [1007.0, 138.0], [1051.0, 124.0], [1130.0, 63.0], [1097.0, 43.0], [1160.0, 53.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[584.0, 21062.0], [659.0, 21041.0], [681.0, 21062.0], [728.0, 21044.0], [756.0, 21045.0], [755.0, 21038.5], [739.0, 21026.0], [799.0, 21024.0], [818.0, 21040.0], [814.0, 21045.5], [856.0, 21054.0], [837.0, 21034.0], [864.0, 21045.5], [884.0, 21035.0], [957.0, 21031.0], [939.0, 21049.5], [961.0, 21053.0], [967.0, 21037.5], [1007.0, 21027.0], [1051.0, 21043.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1160.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 4.0, "maxY": 770.5, "series": [{"data": [[4.0, 207.0], [73.0, 379.0], [76.0, 62.0], [78.0, 482.0], [93.0, 182.0], [111.0, 358.0], [116.0, 770.5], [126.0, 437.0], [134.0, 294.0], [137.0, 348.0], [141.0, 544.0], [171.0, 129.0], [183.0, 240.5], [218.0, 460.5], [241.0, 166.0], [255.0, 188.0], [284.0, 53.5], [291.0, 210.0], [290.0, 45.5], [289.0, 93.0], [294.0, 25.0], [312.0, 272.5], [308.0, 87.0], [310.0, 58.0], [315.0, 44.0], [314.0, 148.5], [335.0, 57.0], [320.0, 95.5], [351.0, 40.0], [338.0, 48.0], [354.0, 42.0], [357.0, 65.0], [375.0, 85.0], [374.0, 44.0], [381.0, 200.0], [396.0, 39.0], [389.0, 66.0], [415.0, 215.0], [420.0, 169.0], [442.0, 32.0], [434.0, 56.0], [443.0, 95.5], [452.0, 47.0], [451.0, 42.0], [455.0, 191.0], [473.0, 152.0], [477.0, 43.0], [475.0, 38.0], [478.0, 52.0], [474.0, 147.0], [470.0, 51.0], [464.0, 45.5], [489.0, 77.0], [482.0, 104.0], [510.0, 114.0], [511.0, 149.0], [497.0, 43.0], [499.0, 50.0], [507.0, 35.0], [501.0, 66.0], [514.0, 164.0], [521.0, 41.0], [518.0, 42.0], [528.0, 25.0], [513.0, 78.0], [525.0, 56.0], [520.0, 61.0], [534.0, 58.0], [549.0, 32.0], [570.0, 149.0], [571.0, 107.5], [548.0, 126.0], [557.0, 47.0], [550.0, 130.5], [555.0, 38.0], [574.0, 36.0], [566.0, 171.0], [569.0, 29.0], [551.0, 42.0], [554.0, 32.0], [607.0, 40.0], [594.0, 84.0], [595.0, 113.0], [599.0, 34.0], [584.0, 36.0], [606.0, 36.0], [605.0, 76.0], [577.0, 26.0], [604.0, 31.0], [591.0, 32.0], [588.0, 54.0], [585.0, 31.0], [638.0, 47.0], [636.0, 42.0], [609.0, 30.0], [617.0, 32.0], [613.0, 31.0], [630.0, 49.0], [624.0, 208.5], [665.0, 117.0], [640.0, 52.0], [642.0, 39.0], [644.0, 43.0], [646.0, 28.0], [652.0, 29.0], [651.0, 63.0], [661.0, 44.0], [656.0, 39.0], [657.0, 35.0], [659.0, 66.0], [648.0, 44.0], [649.0, 24.0], [670.0, 35.0], [669.0, 32.0], [671.0, 32.0], [698.0, 38.0], [681.0, 34.0], [699.0, 35.0], [689.0, 37.0], [672.0, 35.0], [684.0, 40.0], [691.0, 72.0], [695.0, 54.0], [693.0, 31.0], [673.0, 47.0], [696.0, 168.0], [725.0, 103.0], [728.0, 44.0], [716.0, 34.0], [724.0, 40.0], [712.0, 41.0], [723.0, 37.0], [710.0, 29.0], [705.0, 48.0], [740.0, 109.0], [737.0, 58.0], [747.0, 58.0], [756.0, 39.0], [755.0, 44.0], [766.0, 30.0], [754.0, 29.5], [739.0, 94.0], [778.0, 90.0], [770.0, 41.0], [799.0, 43.0], [768.0, 42.5], [774.0, 45.0], [787.0, 43.0], [776.0, 42.0], [818.0, 35.0], [822.0, 27.0], [801.0, 57.0], [824.0, 57.0], [800.0, 40.0], [806.0, 141.0], [814.0, 86.0], [861.0, 48.0], [856.0, 136.0], [837.0, 103.5], [864.0, 43.0], [882.0, 34.0], [884.0, 134.5], [899.0, 64.0], [906.0, 99.0], [923.0, 39.0], [898.0, 44.0], [957.0, 37.0], [939.0, 77.0], [952.0, 33.0], [970.0, 75.0], [961.0, 126.0], [967.0, 139.0], [1007.0, 138.0], [1051.0, 124.0], [1130.0, 63.0], [1097.0, 43.0], [1160.0, 53.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[584.0, 0.0], [659.0, 0.0], [681.0, 0.0], [728.0, 0.0], [756.0, 0.0], [755.0, 0.0], [739.0, 0.0], [799.0, 0.0], [818.0, 0.0], [814.0, 0.0], [856.0, 0.0], [837.0, 0.0], [864.0, 0.0], [884.0, 0.0], [957.0, 0.0], [939.0, 0.0], [961.0, 0.0], [967.0, 0.0], [1007.0, 0.0], [1051.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1160.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 259.8833333333333, "minX": 1.63145922E12, "maxY": 597.8166666666667, "series": [{"data": [[1.63145934E12, 590.3833333333333], [1.63145928E12, 597.8166666666667], [1.6314594E12, 259.8833333333333], [1.63145922E12, 585.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6314594E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63145922E12, "maxY": 597.2666666666667, "series": [{"data": [[1.63145934E12, 590.35], [1.63145928E12, 597.2666666666667], [1.6314594E12, 260.73333333333335], [1.63145922E12, 584.0833333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63145928E12, 0.016666666666666666], [1.6314594E12, 0.48333333333333334], [1.63145922E12, 0.4]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6314594E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63145922E12, "maxY": 587.25, "series": [{"data": [[1.63145934E12, 580.75], [1.63145928E12, 587.25], [1.6314594E12, 257.46666666666664], [1.63145922E12, 574.5333333333333]], "isOverall": false, "label": "查看自己的比赛参赛详情-success", "isController": false}, {"data": [[1.63145928E12, 0.016666666666666666], [1.6314594E12, 0.48333333333333334], [1.63145922E12, 0.4]], "isOverall": false, "label": "登录请求-failure", "isController": false}, {"data": [[1.63145934E12, 9.6], [1.63145928E12, 10.016666666666667], [1.6314594E12, 3.2666666666666666], [1.63145922E12, 9.55]], "isOverall": false, "label": "登录请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6314594E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63145922E12, "maxY": 597.2666666666667, "series": [{"data": [[1.63145934E12, 590.35], [1.63145928E12, 597.2666666666667], [1.6314594E12, 260.73333333333335], [1.63145922E12, 584.0833333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63145928E12, 0.016666666666666666], [1.6314594E12, 0.48333333333333334], [1.63145922E12, 0.4]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6314594E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

